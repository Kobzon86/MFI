/*
 *
 */

#ifndef ADV7613_REGS_H
#define ADV7613_REGS_H

#include "altera_avalon_pio_regs.h"
#include "i2c_master.h"
#include "gpio.h"

#define ADV7613_NUM_REGS ( 188 )
#define DEBUG
/*
i2c_registers_t const adv7613_registers[ADV7613_NUM_REGS] =
{
  { 0x98, 0xF4, 0x80 },
  { 0x98, 0xF5, 0x7C },
  { 0x98, 0xF8, 0x4C },
  { 0x98, 0xF9, 0x64 },
  { 0x98, 0xFA, 0x6C },
  { 0x98, 0xFB, 0x68 },
  { 0x98, 0xFD, 0x44 },
  { 0x98, 0xE9, 0xC0 },
  { 0x98, 0x00, 0x06 },
  { 0x98, 0x01, 0x0C },
  { 0x98, 0x02, 0xF2 },
  { 0x98, 0x03, 0x42 },
  { 0x98, 0x04, 0x63 },
  { 0x98, 0x05, 0x20 },
  { 0x44, 0x8B, 0x40 },
  { 0x44, 0x8C, 0x01 },
  { 0x44, 0x8D, 0x01 },
  { 0x44, 0xc9, 0x00 },
  { 0x98, 0x0C, 0x42 },
  { 0x98, 0x15, 0xAE },
  { 0x44, 0x6C, 0x00 },
  { 0x64, 0x40, 0x81 },
  { 0x68, 0x03, 0x98 },
  { 0x98, 0x20, 0x80 },
  { 0x68, 0x6C, 0x01 },
  { 0x68, 0x10, 0xA5 },
  { 0x68, 0x1B, 0x18 },
  { 0x68, 0x45, 0x04 },
  { 0x68, 0x48, 0x40 },
  { 0x68, 0x97, 0xC0 },
  { 0x68, 0x3D, 0x10 },
  { 0x68, 0x3E, 0x7B },
  { 0x68, 0x3F, 0x5E },
  { 0x68, 0x4E, 0xFE },
  { 0x68, 0x4F, 0x08 },
  { 0x68, 0x57, 0xA3 },
  { 0x68, 0x58, 0x07 },
  { 0x68, 0x6F, 0x08 },
  { 0x68, 0x83, 0xFE },
  { 0x68, 0x85, 0x10 },
  { 0x68, 0x86, 0x9B },
  { 0x68, 0x89, 0x01 },
  { 0x68, 0x9B, 0x03 },
  { 0x68, 0x9C, 0x80 },
  { 0x68, 0x9C, 0xC0 },
  { 0x68, 0x9C, 0x00 },
  // Termination control
  { 0x68, 0x83, 0xFF },
  { 0x68, 0x01, 0x00 },
  { 0x68, 0x6C, 0xA3 },
  /////////////////////////
  { 0xC0, 0x40, 0x08 },
  { 0xC0, 0x43, 0x03 },
  { 0xC0, 0x44, 0x00 },
  { 0xC0, 0x45, 0x04 },
  { 0xC0, 0x46, 0x53 },
  { 0xC0, 0x47, 0x03 },
  { 0xC0, 0x4C, 0x19 },
  { 0xC0, 0x4E, 0x04 },
  { 0x98, 0xbf, 0x01 },
  { 0x64, 0x74, 0x00 },
  { 0x6C, 0x00, 0x00 },
  { 0x6C, 0x01, 0xFF },
  { 0x6C, 0x02, 0xFF },
  { 0x6C, 0x03, 0xFF },
  { 0x6C, 0x04, 0xFF },
  { 0x6C, 0x05, 0xFF },
  { 0x6C, 0x06, 0xFF },
  { 0x6C, 0x07, 0x00 },
  { 0x6C, 0x08, 0x10 },
  { 0x6C, 0x09, 0xAC },
  { 0x6C, 0x0A, 0xDB },
  { 0x6C, 0x0B, 0xA0 },
  { 0x6C, 0x0C, 0x49 },
  { 0x6C, 0x0D, 0x48 },
  { 0x6C, 0x0E, 0x4D },
  { 0x6C, 0x0F, 0x33 },
  { 0x6C, 0x10, 0x26 },
  { 0x6C, 0x11, 0x1C },
  { 0x6C, 0x12, 0x01 },
  { 0x6C, 0x13, 0x04 },
  { 0x6C, 0x14, 0xA5 },
  { 0x6C, 0x15, 0x35 },
  { 0x6C, 0x16, 0x1E },
  { 0x6C, 0x17, 0x78 },
  { 0x6C, 0x18, 0x3A },
  { 0x6C, 0x19, 0x05 },
  { 0x6C, 0x1A, 0x65 },
  { 0x6C, 0x1B, 0xA7 },
  { 0x6C, 0x1C, 0x56 },
  { 0x6C, 0x1D, 0x52 },
  { 0x6C, 0x1E, 0x9C },
  { 0x6C, 0x1F, 0x27 },
  { 0x6C, 0x20, 0x0F },
  { 0x6C, 0x21, 0x50 },
  { 0x6C, 0x22, 0x54 },
  { 0x6C, 0x23, 0xA5 },
  { 0x6C, 0x24, 0x4B },
  { 0x6C, 0x25, 0x00 },
  { 0x6C, 0x26, 0x71 },
  { 0x6C, 0x27, 0x4F },
  { 0x6C, 0x28, 0x81 },
  { 0x6C, 0x29, 0x80 },
  { 0x6C, 0x2A, 0xA9 },
  { 0x6C, 0x2B, 0xC0 },
  { 0x6C, 0x2C, 0xD1 },
  { 0x6C, 0x2D, 0xC0 },
  { 0x6C, 0x2E, 0x01 },
  { 0x6C, 0x2F, 0x01 },
  { 0x6C, 0x30, 0x01 },
  { 0x6C, 0x31, 0x01 },
  { 0x6C, 0x32, 0x01 },
  { 0x6C, 0x33, 0x01 },
  { 0x6C, 0x34, 0x01 },
  { 0x6C, 0x35, 0x01 },
  { 0x6C, 0x36, 0x02 },
  { 0x6C, 0x37, 0x3A },
  { 0x6C, 0x38, 0x80 },
  { 0x6C, 0x39, 0x18 },
  { 0x6C, 0x3A, 0x71 },
  { 0x6C, 0x3B, 0x38 },
  { 0x6C, 0x3C, 0x2D },
  { 0x6C, 0x3D, 0x40 },
  { 0x6C, 0x3E, 0x58 },
  { 0x6C, 0x3F, 0x2C },
  { 0x6C, 0x40, 0x45 },
  { 0x6C, 0x41, 0x00 },
  { 0x6C, 0x42, 0x0F },
  { 0x6C, 0x43, 0x28 },
  { 0x6C, 0x44, 0x21 },
  { 0x6C, 0x45, 0x00 },
  { 0x6C, 0x46, 0x00 },
  { 0x6C, 0x47, 0x1E },
  { 0x6C, 0x48, 0x00 },
  { 0x6C, 0x49, 0x00 },
  { 0x6C, 0x4A, 0x00 },
  { 0x6C, 0x4B, 0xFF },
  { 0x6C, 0x4C, 0x00 },
  { 0x6C, 0x4D, 0x43 },
  { 0x6C, 0x4E, 0x57 },
  { 0x6C, 0x4F, 0x36 },
  { 0x6C, 0x50, 0x59 },
  { 0x6C, 0x51, 0x37 },
  { 0x6C, 0x52, 0x38 },
  { 0x6C, 0x53, 0x39 },
  { 0x6C, 0x54, 0x4C },
  { 0x6C, 0x55, 0x33 },
  { 0x6C, 0x56, 0x4D },
  { 0x6C, 0x57, 0x48 },
  { 0x6C, 0x58, 0x49 },
  { 0x6C, 0x59, 0x0A },
  { 0x6C, 0x5A, 0x00 },
  { 0x6C, 0x5B, 0x00 },
  { 0x6C, 0x5C, 0x00 },
  { 0x6C, 0x5D, 0xFC },
  { 0x6C, 0x5E, 0x00 },
  { 0x6C, 0x5F, 0x44 },
  { 0x6C, 0x60, 0x45 },
  { 0x6C, 0x61, 0x4C },
  { 0x6C, 0x62, 0x4C },
  { 0x6C, 0x63, 0x20 },
  { 0x6C, 0x64, 0x50 },
  { 0x6C, 0x65, 0x32 },
  { 0x6C, 0x66, 0x34 },
  { 0x6C, 0x67, 0x31 },
  { 0x6C, 0x68, 0x37 },
  { 0x6C, 0x69, 0x48 },
  { 0x6C, 0x6A, 0x0A },
  { 0x6C, 0x6B, 0x20 },
  { 0x6C, 0x6C, 0x00 },
  { 0x6C, 0x6D, 0x00 },
  { 0x6C, 0x6E, 0x00 },
  { 0x6C, 0x6F, 0xFD },
  { 0x6C, 0x70, 0x00 },
  { 0x6C, 0x71, 0x38 },
  { 0x6C, 0x72, 0x4C },
  { 0x6C, 0x73, 0x1E },
  { 0x6C, 0x74, 0x53 },
  { 0x6C, 0x75, 0x11 },
  { 0x6C, 0x76, 0x01 },
  { 0x6C, 0x77, 0x0A },
  { 0x6C, 0x78, 0x20 },
  { 0x6C, 0x79, 0x20 },
  { 0x6C, 0x7A, 0x20 },
  { 0x6C, 0x7B, 0x20 },
  { 0x6C, 0x7C, 0x20 },
  { 0x6C, 0x7D, 0x20 },
  { 0x6C, 0x7E, 0x00 },
  { 0x6C, 0x7F, 0xF0 },
  { 0x64, 0x74, 0x01 },
};
*/

i2c_registers_t const adv7613_registers[ADV7613_NUM_REGS] =
{
		{ 0x98, 0xF4, 0x80 }, //cec
		  { 0x98, 0xF5, 0x7C }, //infoframe
		  { 0x98, 0xF8, 0x4C }, //dpll
		  { 0x98, 0xF9, 0x64 }, //repeater
		  { 0x98, 0xFA, 0x6C }, //edid
		  { 0x98, 0xFB, 0x68 }, //hdmi
		  { 0x98, 0xFD, 0x44 }, //cp
		  { 0x98, 0xE9, 0xC0 },
		  { 0x98, 0x00, 0x06 }, //06 06
		  { 0x98, 0x01, 0x22 }, //0C 02
		  { 0x98, 0x02, 0xF2 },
		  { 0x98, 0x03, 0x42 },
		  { 0x98, 0x04, 0x63 },
		  { 0x98, 0x05, 0x20 },
		  { 0x44, 0x8B, 0x40 },
		  { 0x44, 0x8C, 0x01 },
		  { 0x44, 0x8D, 0x01 },
		  { 0x44, 0xc9, 0x00 }, // DIS_AUTO_PARAM_BUFFER
		  { 0x98, 0x0C, 0x42 },
		  { 0x98, 0x15, 0xAE },
		  { 0x44, 0x6C, 0x00 },
		  { 0x64, 0x40, 0x81 },
		  { 0x68, 0x03, 0x98 },
		  { 0x98, 0x20, 0x80 }, // HPA_MAN_VALUE_A
		  { 0x68, 0x6C, 0x01 }, // Manual HPA
		  { 0x68, 0x10, 0xA5 },
		  { 0x68, 0x1B, 0x18 }, // +DCFIFO_RESET_ON_LOCK
		  { 0x68, 0x45, 0x04 },
		  { 0x68, 0x48, 0x40 },
		  { 0x68, 0x97, 0xC0 },
		  { 0x68, 0x3D, 0x10 },
		  { 0x68, 0x3E, 0x7B },
		  { 0x68, 0x3F, 0x5E },
		  { 0x68, 0x4E, 0xFE },
		  { 0x68, 0x4F, 0x08 },
		  { 0x68, 0x57, 0xA3 },
		  { 0x68, 0x58, 0x07 },
		  { 0x68, 0x6F, 0x08 },
		  { 0x68, 0x83, 0xFE }, //FE
		  { 0x68, 0x85, 0x10 },
		  { 0x68, 0x86, 0x9B },
		  { 0x68, 0x89, 0x01 },
		  { 0x68, 0x9B, 0x03 },
		  { 0x68, 0x9C, 0x80 },
		  { 0x68, 0x9C, 0xC0 },
		  { 0x68, 0x9C, 0x00 },
		  // Termination control
		  { 0x68, 0x83, 0xFE },
		  { 0x68, 0x01, 0x00 },
		  { 0x68, 0x6C, 0xA3 },
		  /////////////////////////
		  { 0xC0, 0x40, 0x08 },
		  { 0xC0, 0x43, 0x03 },
		  { 0xC0, 0x44, 0x00 }, // 0x02 PLL Gear 0x02:200-300 0x00:0-200
		  { 0xC0, 0x45, 0x04 },
		  { 0xC0, 0x46, 0x53 },
		  { 0xC0, 0x47, 0x03 },
		  { 0xC0, 0x4C, 0x19 },
		  { 0xC0, 0x4E, 0x04 },
		  { 0x98, 0xbf, 0x01 },
		  { 0x64, 0x74, 0x00 },
		  { 0x6c, 0x00, 0x00 },
		  { 0x6c, 0x01, 0xff },
		  { 0x6c, 0x02, 0xff },
		  { 0x6c, 0x03, 0xff },
		  { 0x6c, 0x04, 0xff },
		  { 0x6c, 0x05, 0xff },
		  { 0x6c, 0x06, 0xff },
		  { 0x6c, 0x07, 0x00 },
		  { 0x6c, 0x08, 0x10 },
		  { 0x6c, 0x09, 0xac },
		  { 0x6c, 0x0a, 0xdb },
		  { 0x6c, 0x0b, 0xa0 },
		  { 0x6c, 0x0c, 0x49 },
		  { 0x6c, 0x0d, 0x48 },
		  { 0x6c, 0x0e, 0x4d },
		  { 0x6c, 0x0f, 0x33 },
		  { 0x6c, 0x10, 0x26 },
		  { 0x6c, 0x11, 0x1c },
		  { 0x6c, 0x12, 0x01 },
		  { 0x6c, 0x13, 0x04 },
		  { 0x6c, 0x14, 0xa5 },
		  { 0x6c, 0x15, 0x35 },
		  { 0x6c, 0x16, 0x1e },
		  { 0x6c, 0x17, 0x78 },
		  { 0x6c, 0x18, 0x3a },
		  { 0x6c, 0x19, 0x05 },
		  { 0x6c, 0x1a, 0x65 },
		  { 0x6c, 0x1b, 0xa7 },
		  { 0x6c, 0x1c, 0x56 },
		  { 0x6c, 0x1d, 0x52 },
		  { 0x6c, 0x1e, 0x9c },
		  { 0x6c, 0x1f, 0x27 },
		  { 0x6c, 0x20, 0x0f },
		  { 0x6c, 0x21, 0x50 },
		  { 0x6c, 0x22, 0x54 },
		  { 0x6c, 0x23, 0xa5 },
		  { 0x6c, 0x24, 0x4b },
		  { 0x6c, 0x25, 0x00 },
		  { 0x6c, 0x26, 0x71 },
		  { 0x6c, 0x27, 0x4f },
		  { 0x6c, 0x28, 0x81 },
		  { 0x6c, 0x29, 0x80 },
		  { 0x6c, 0x2a, 0xa9 },
		  { 0x6c, 0x2b, 0xc0 },
		  { 0x6c, 0x2c, 0xd1 },
		  { 0x6c, 0x2d, 0xc0 },
		  { 0x6c, 0x2e, 0x01 },
		  { 0x6c, 0x2f, 0x01 },
		  { 0x6c, 0x30, 0x01 },
		  { 0x6c, 0x31, 0x01 },
		  { 0x6c, 0x32, 0x01 },
		  { 0x6c, 0x33, 0x01 },
		  { 0x6c, 0x34, 0x01 },
		  { 0x6c, 0x35, 0x01 },
		  { 0x6c, 0x36, 0x02 },
		  { 0x6c, 0x37, 0x3a },
		  { 0x6c, 0x38, 0x80 },
		  { 0x6c, 0x39, 0x18 },
		  { 0x6c, 0x3a, 0x71 },
		  { 0x6c, 0x3b, 0x38 },
		  { 0x6c, 0x3c, 0x2d },
		  { 0x6c, 0x3d, 0x40 },
		  { 0x6c, 0x3e, 0x58 },
		  { 0x6c, 0x3f, 0x2c },
		  { 0x6c, 0x40, 0x45 },
		  { 0x6c, 0x41, 0x00 },
		  { 0x6c, 0x42, 0x0f },
		  { 0x6c, 0x43, 0x28 },
		  { 0x6c, 0x44, 0x21 },
		  { 0x6c, 0x45, 0x00 },
		  { 0x6c, 0x46, 0x00 },
		  { 0x6c, 0x47, 0x1e },
		  { 0x6c, 0x48, 0x00 },
		  { 0x6c, 0x49, 0x00 },
		  { 0x6c, 0x4a, 0x00 },
		  { 0x6c, 0x4b, 0xff },
		  { 0x6c, 0x4c, 0x00 },
		  { 0x6c, 0x4d, 0x43 },
		  { 0x6c, 0x4e, 0x57 },
		  { 0x6c, 0x4f, 0x36 },
		  { 0x6c, 0x50, 0x59 },
		  { 0x6c, 0x51, 0x37 },
		  { 0x6c, 0x52, 0x38 },
		  { 0x6c, 0x53, 0x39 },
		  { 0x6c, 0x54, 0x4c },
		  { 0x6c, 0x55, 0x33 },
		  { 0x6c, 0x56, 0x4d },
		  { 0x6c, 0x57, 0x48 },
		  { 0x6c, 0x58, 0x49 },
		  { 0x6c, 0x59, 0x0a },
		  { 0x6c, 0x5a, 0x00 },
		  { 0x6c, 0x5b, 0x00 },
		  { 0x6c, 0x5c, 0x00 },
		  { 0x6c, 0x5d, 0xfc },
		  { 0x6c, 0x5e, 0x00 },
		  { 0x6c, 0x5f, 0x44 },
		  { 0x6c, 0x60, 0x45 },
		  { 0x6c, 0x61, 0x4c },
		  { 0x6c, 0x62, 0x4c },
		  { 0x6c, 0x63, 0x20 },
		  { 0x6c, 0x64, 0x50 },
		  { 0x6c, 0x65, 0x32 },
		  { 0x6c, 0x66, 0x34 },
		  { 0x6c, 0x67, 0x31 },
		  { 0x6c, 0x68, 0x37 },
		  { 0x6c, 0x69, 0x48 },
		  { 0x6c, 0x6a, 0x0a },
		  { 0x6c, 0x6b, 0x20 },
		  { 0x6c, 0x6c, 0x00 },
		  { 0x6c, 0x6d, 0x00 },
		  { 0x6c, 0x6e, 0x00 },
		  { 0x6c, 0x6f, 0xfd },
		  { 0x6c, 0x70, 0x00 },
		  { 0x6c, 0x71, 0x38 },
		  { 0x6c, 0x72, 0x4c },
		  { 0x6c, 0x73, 0x1e },
		  { 0x6c, 0x74, 0x53 },
		  { 0x6c, 0x75, 0x11 },
		  { 0x6c, 0x76, 0x01 },
		  { 0x6c, 0x77, 0x0a },
		  { 0x6c, 0x78, 0x20 },
		  { 0x6c, 0x79, 0x20 },
		  { 0x6c, 0x7a, 0x20 },
		  { 0x6c, 0x7b, 0x20 },
		  { 0x6c, 0x7c, 0x20 },
		  { 0x6c, 0x7d, 0x20 },
		  { 0x6c, 0x7e, 0x00 },
		  { 0x6c, 0x7f, 0xf0 },
		  { 0x64, 0x74, 0x01 },
};

alt_u32 get_hdmi_clk(alt_u32 hdmi_in){
	alt_u32 cs = ( hdmi_in == 0 ) ? GPIO_ADV7613_CS0 : GPIO_ADV7613_CS1;
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, cs );
		alt_u8 buff[2]    = { i2c_read(0x0068, 0x51), i2c_read(0x0068, 0x52) };
		alt_u16 TMDS_FREQ = ( buff[0] << 1 ) | ( buff[1] & 0x01 );
//		alt_u16 TMDS_FRAC = buff[1] >> 1;
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, cs );
	return TMDS_FREQ;
}

alt_u8 get_adv_info(alt_u8 cs){

	alt_u8 buff_io[256];
#ifdef DEBUG
	alt_u8 buff_hdmi[256];
	alt_u8 buff_cec[256];
#endif
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 | GPIO_ADV7613_CS0 );
	alt_u32 curr_cs = ( cs == 1 ) ? GPIO_ADV7613_CS1 : GPIO_ADV7613_CS0;
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, curr_cs );

	for (alt_u8 i=0; i < 255; i++){
		buff_io[i]   = i2c_read(0x0098, i);
#ifdef DEBUG
		buff_hdmi[i] = i2c_read(0x0068, i);
		buff_cec[i]  = i2c_read(0x0080, i);
#endif
	}
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, curr_cs );

#ifdef DEBUG
	volatile double cur_freq          = ( ( buff_hdmi[0x51] << 1 ) | ( buff_hdmi[0x52] & 0x01 ) ) + ( buff_hdmi[0x52] >> 1 ) / 64.;

	alt_u8  STATUS_REG_HDMI_FLAGS1   = ( buff_io[0x60]);
	alt_u8  STATUS_REG_HDMI_FLAGS2   = ( buff_io[0x65]);
	alt_u8  STATUS_REG_HDMI_FLAGS3   = ( buff_io[0x6A]);
	alt_u8  STATUS_REG_HDMI_FLAGS4   = ( buff_io[0x6F]);
	alt_u8  STATUS_REG_HDMI_FLAGS5   = ( buff_io[0x79]);
	alt_u8  STATUS_REG_HDMI_FLAGS6   = ( buff_io[0x7E]);
	alt_u8  STATUS_REG_HDMI_FLAGS7   = ( buff_io[0x83]);
	alt_u8  STATUS_REG_HDMI_FLAGS8   = ( buff_io[0x88]);



	alt_u8  TMDS_CLK_A_RAW   = ( buff_io[0x6a]   & 0x10 ) >> 4;
	alt_u8  TMDS_PLL_LOCKED  = ( buff_hdmi[0x04] & 0x02 ) >> 1;
	alt_u8  DCFIFO_LOCKED    = ( buff_hdmi[0x1c] & 0x08 ) >> 3;
	alt_u8  DCFIFO_LEVEL     = ( buff_hdmi[0x1c] & 0x07 );
	alt_u8  DCFIFO_RECENTER  = ( buff_hdmi[0x5a] & 0x04 ) >> 2;
	alt_u16 LINE_WIDTH       = ( buff_hdmi[0x07] & 0x1f ) << 8 | buff_hdmi[0x08];
	alt_u16 FIELD0_HEIGHT    = ( buff_hdmi[0x09] & 0x1f ) << 8 | buff_hdmi[0x0a];
	alt_u8 NEW_TMDS_FRQ_RAW  = ( buff_io[0x83]   & 0x02 ) >> 1;
	alt_u8 TMDSPLL_LCK_A_RAW = ( buff_io[0x6a]   & 0x40 ) >> 6;
	alt_u8 CP_PWRDN          = ( buff_io[0x0c]   & 0x04 ) >> 2; //0 (d) Powers up clock to CP core;	1 Powers down clock to CP core
	alt_u8 XTAL_PDN          = ( buff_io[0x0b]   & 0x01 );		//0 (d) Powers up XTAL buffer to digital core; 1 Powers down XTAL buffer to digital core
	alt_u8 CORE_PDN          = ( buff_io[0x0b]   & 0x02 ) >> 1;	//0 (d) Powers up CP and digital sections of HDMI block; 1 Powers down CP and digital section of HDMI block
	alt_u8 CEC_POWER_UP      = ( buff_cec[0x2a]  & 0x01 );
	alt_u8 CEC_SOFT_RESET    = ( buff_cec[0x2c]  & 0x01 );
	alt_u8 MAIN_RESET        = ( buff_io[0xff]   & 0x80 ) >> 7;
	alt_u8 PADS_PDN          = ( buff_io[0x0c]   & 0x01 );
#endif
	alt_u8 POWER_DOWN        = ( buff_io[0x0c]   & 0x20 ) >> 5; //0 Chip operational; 1(d) Enables chip power down
	return POWER_DOWN;
}

void reset_flash_adv7613(){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_RESET );
	usleep( 10000 );
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_RESET );
	usleep( 10000 );

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
	i2c_write(0x0098, 0xff, 0x80);
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
	i2c_write(0x0098, 0xff, 0x80);
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );

	usleep( 10000 );
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
	i2c_write_array( (i2c_registers_t*)adv7613_registers, ADV7613_NUM_REGS );
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
	i2c_write_array( (i2c_registers_t*)adv7613_registers, ADV7613_NUM_REGS );
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
}

#endif
