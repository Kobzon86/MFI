
nios2.elf:     file format elf32-littlenios2
nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00005284 memsz 0x000052dc flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000062a4  2**0
                  CONTENTS
  2 .text         000049f0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b4  0000ca10  0000ca10  00005a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000e0  0000d1c4  0000d1c4  000061c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000058  0000d2a4  0000d2a4  000062a4  2**2
                  ALLOC, SMALL_DATA
  6 .shared_ram_0 00000000  00000000  00000000  000062a4  2**0
                  CONTENTS
  7 .nios_ram_0   00000000  0000d2fc  0000d2fc  000062a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000260  00000000  00000000  000062c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000036ff  00000000  00000000  00006528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000fcd  00000000  00000000  00009c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001a88  00000000  00000000  0000abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000890  00000000  00000000  0000c67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000189d  00000000  00000000  0000cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003ba9  00000000  00000000  0000e7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00012354  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000470  00000000  00000000  00012398  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00014045  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00014048  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00014054  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00014055  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00014056  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001405a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001405e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  00014062  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  00014066  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  0001406e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002a  00000000  00000000  00014072  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00400683  00000000  00000000  0001409c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000ca10 l    d  .rodata	00000000 .rodata
0000d1c4 l    d  .rwdata	00000000 .rwdata
0000d2a4 l    d  .bss	00000000 .bss
00000000 l    d  .shared_ram_0	00000000 .shared_ram_0
0000d2fc l    d  .nios_ram_0	00000000 .nios_ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2_bsp//obj/HAL/src/crt0.o
000080c8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
0000d2a8 l     O .bss	00000001 lcd_type
0000d2a9 l     O .bss	00000001 edp_timer
0000d2aa l     O .bss	00000004 layer_timer
0000d2ae l     O .bss	00000001 heart
0000d2af l     O .bss	00000001 heart_bit
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_log_macro.o
0000b9e4 l       .text	00000000 tx_next_char
0000ba0c l       .text	00000000 end_tx
0000b9ec l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
0000c4bc g     F .text	00000104 alt_main
00008c44 g     F .text	000000cc init_mixer
00008d10 g     F .text	00000068 set_switch
000088a8 g     F .text	00000128 reset_flash_adv7613
00008f28 g     F .text	0000006c update_switch
0000c2a4 g     F .text	00000064 alt_log_jtag_uart_isr_proc
0000d274 g     O .rwdata	00000004 cvi4
00008ab0 g     F .text	0000005c set_scaler
0000d2b0 g     O .bss	00000001 alt_log_write_on_flag
0000c974 g     F .text	0000002c altera_nios2_gen2_irq_init
0000d2b2 g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
00008134 g     F .text	000000c4 i2c_write
00008000 g     F .entry	0000000c __reset
0000d284 g     O .rwdata	00000004 sc0
0000d2d0 g     O .bss	00000011 alt_log_write_buf
0000d2c0 g     O .bss	00000004 alt_argv
0001525e g       *ABS*	00000000 _gp
0000c774 g     F .text	00000038 usleep
0000d2a4 g     O .bss	00000004 shared_ram0
00008d78 g     F .text	00000038 get_status
0000d1e0 g     O .rwdata	0000001d alt_log_msg_alt_main
0000d2b1 g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
0000ca10 g     O .rodata	000000d2 si5332_fhd_registers
0000b6e0 g     F .text	000000e4 .hidden __floatsidf
000081f8 g     F .text	000000c0 i2c_write_array
0000d288 g     O .rwdata	00000004 sc1
000084b0 g     F .text	000000b0 get_hdmi_clk
0000b920 g     F .text	00000064 .hidden __udivsi3
000082b8 g     F .text	00000140 i2c_compare_array
0000c448 g     F .text	00000074 alt_log_system_clock
0000c094 g     F .text	00000060 alt_log_printf_proc
0000d299 g     O .rwdata	00000001 alt_log_jtag_uart_startup_info_on_flag
0000a454 g     F .text	000008b4 .hidden __adddf3
0000d2e4 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
0000d2fc g       *ABS*	00000000 __bss_end
0000c664 g     F .text	00000110 alt_tick
0000d26c g     O .rwdata	00000004 cvi2
0000cc50 g     O .rodata	00000234 adv7613_registers
0000d2b4 g     O .bss	00000004 alt_system_clock_in_sec
0000c250 g     F .text	00000054 alt_log_jtag_uart_startup_info
0000c5c0 g     F .text	000000a4 alt_alarm_stop
0000d298 g     O .rwdata	00000001 alt_log_sys_clk_on_flag
0000bacc g     F .text	000005c8 alt_log_private_printf
0000d1c4 g     O .rwdata	00000019 alt_log_msg_bss
0000d280 g     O .rwdata	00000004 clp1
00008db0 g     F .text	00000038 init_switch
0000b984 g     F .text	00000058 .hidden __umodsi3
0000cae2 g     O .rodata	000000ab si5332_xga_registers
0000d2fc g       *ABS*	00000000 end
00008560 g     F .text	00000348 get_adv_info
0000ba10 g     F .text	00000054 alt_log_txchar
0000d270 g     O .rwdata	00000004 cvi3
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000b7c4 g     F .text	00000064 .hidden __clzsi2
000083f8 g     F .text	00000040 gpio_get
0000ce84 g     O .rodata	0000006c adv7181_registers
00008020 g     F .text	000000ac _start
0000d2c8 g     O .bss	00000004 _alt_tick_rate
0000d2cc g     O .bss	00000004 _alt_nticks
0000c7ec g     F .text	00000028 alt_sys_init
0000b9dc g       .text	00000000 tx_log_str
000090dc g     F .text	00000060 init_cvo
0000a42c g     F .text	00000028 .hidden __mulsi3
0000c9bc g     F .text	00000054 strncpy
0000d294 g     O .rwdata	00000004 alt_log_boot_on_flag
0000c814 g     F .text	00000160 alt_busy_sleep
0000c174 g     F .text	000000dc alt_log_jtag_uart_print_control_reg
00008de8 g     F .text	00000140 set_CVO_1024
0000d2fc g       *ABS*	00000000 __alt_stack_base
0000ad08 g     F .text	000009d8 .hidden __divdf3
00008b0c g     F .text	000000dc set_layer_cfg
0000d2a4 g       *ABS*	00000000 __bss_start
0000913c g     F .text	000012f0 main
0000d2c4 g     O .bss	00000004 alt_envp
000080cc g     F .text	00000068 i2c_read
0000c0f4 g     F .text	00000080 altera_avalon_jtag_uart_report_log
0000d2fc g       *ABS*	00000000 __alt_stack_limit
0000cb8d g     O .rodata	000000ab si5332_vga_registers
0000b828 g     F .text	00000084 .hidden __divsi3
0000d234 g     O .rwdata	0000002a alt_log_msg_cache
00008a74 g     F .text	0000003c init_cvi
00000000 g       *ABS*	00000000 __alt_mem_shared_ram_0
0000d290 g     O .rwdata	00000004 cvo0
0000d268 g     O .rwdata	00000004 cvi1
00008f94 g     F .text	00000148 set_CVO_1920
0000c7ac g     F .text	00000040 alt_irq_init
0000d200 g     O .rwdata	00000031 alt_log_msg_stackpointer
0000cef0 g     O .rodata	00000100 .hidden __clz_tab
00008000 g       *ABS*	00000000 __alt_mem_nios_ram_0
0000d2bc g     O .bss	00000004 alt_argc
0000d27c g     O .rwdata	00000004 clp0
0000d2b8 g     O .bss	00000004 alt_log_sys_clk_count
0000c308 g     F .text	00000140 alt_log_write
0000d28c g     O .rwdata	00000004 mix0
0000d260 g     O .rwdata	00000004 alt_stack_limit_value
0000d2a4 g       *ABS*	00000000 _edata
00008a0c g     F .text	00000068 set_rectangle
0000d2fc g       *ABS*	00000000 _end
0000d264 g     O .rwdata	00000004 cvi0
0000b8ac g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008474 g     F .text	0000003c gpio_clear
0000cc38 g     O .rodata	00000018 tmds171_registers
0000800c g       .entry	00000000 _exit
0000c9a0 g     F .text	0000001c strlen
00008438 g     F .text	0000003c gpio_set
00008be8 g     F .text	0000005c set_mixer_background
000089d0 g     F .text	0000003c init_clp
0000d29c g     O .rwdata	00000008 alt_alarm_list
0000ba64 g     F .text	00000068 alt_log_repchar
0000d278 g     O .rwdata	00000004 sw0



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
    8020:	01000074 	movhi	r4,1
    8024:	2134a504 	addi	r4,r4,-11628
    8028:	21400037 	ldwio	r5,0(r4)
    802c:	01400326 	beq	zero,r5,803c <_start+0x1c>
    8030:	01000074 	movhi	r4,1
    8034:	21348d04 	addi	r4,r4,-11724
    8038:	000b9dc0 	call	b9dc <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
    803c:	01000074 	movhi	r4,1
    8040:	2134a504 	addi	r4,r4,-11628
    8044:	21400037 	ldwio	r5,0(r4)
    8048:	01400326 	beq	zero,r5,8058 <_start+0x38>
    804c:	01000074 	movhi	r4,1
    8050:	21348004 	addi	r4,r4,-11776
    8054:	000b9dc0 	call	b9dc <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8058:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    805c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8060:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8064:	d6949794 	ori	gp,gp,21086
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
    8068:	01000074 	movhi	r4,1
    806c:	2134a504 	addi	r4,r4,-11628
    8070:	21400037 	ldwio	r5,0(r4)
    8074:	01400326 	beq	zero,r5,8084 <_start+0x64>
    8078:	01000074 	movhi	r4,1
    807c:	21347104 	addi	r4,r4,-11836
    8080:	000b9dc0 	call	b9dc <tx_log_str>

    movhi r2, %hi(__bss_start)
    8084:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8088:	10b4a914 	ori	r2,r2,53924

    movhi r3, %hi(__bss_end)
    808c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8090:	18f4bf14 	ori	r3,r3,54012

    beq r2, r3, 1f
    8094:	10c00326 	beq	r2,r3,80a4 <_start+0x84>

0:
    stw zero, (r2)
    8098:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    809c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    80a0:	10fffd36 	bltu	r2,r3,8098 <_gp+0xffff2e3a>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
    80a4:	d6200097 	ldw	et,-32766(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
    80a8:	01000074 	movhi	r4,1
    80ac:	2134a504 	addi	r4,r4,-11628
    80b0:	21400037 	ldwio	r5,0(r4)
    80b4:	01400326 	beq	zero,r5,80c4 <_start+0xa4>
    80b8:	01000074 	movhi	r4,1
    80bc:	21347804 	addi	r4,r4,-11808
    80c0:	000b9dc0 	call	b9dc <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
    80c4:	000c4bc0 	call	c4bc <alt_main>

000080c8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    80c8:	003fff06 	br	80c8 <_gp+0xffff2e6a>

000080cc <i2c_read>:
	alt_u8 reg;
	alt_u8 value;
} i2c_registers_t;

alt_u8 i2c_read( alt_u8 addr, alt_u8 reg )
{
    80cc:	defffb04 	addi	sp,sp,-20
    80d0:	de00012e 	bgeu	sp,et,80d8 <i2c_read+0xc>
    80d4:	003b68fa 	trap	3
    80d8:	df000415 	stw	fp,16(sp)
    80dc:	df000404 	addi	fp,sp,16
    80e0:	2007883a 	mov	r3,r4
    80e4:	2805883a 	mov	r2,r5
    80e8:	e0fffe05 	stb	r3,-8(fp)
    80ec:	e0bfff05 	stb	r2,-4(fp)
  alt_u32 address = ( ( ( (alt_u32)addr << 8 ) & 0x0000FF00 ) | ( (alt_u32)reg & 0x000000FF ) );
    80f0:	e0bffe03 	ldbu	r2,-8(fp)
    80f4:	1004923a 	slli	r2,r2,8
    80f8:	10ffffcc 	andi	r3,r2,65535
    80fc:	e0bfff03 	ldbu	r2,-4(fp)
    8100:	1884b03a 	or	r2,r3,r2
    8104:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 result = IORD_8DIRECT( AMS_I2C_0_BASE, address );
    8108:	e0fffc17 	ldw	r3,-16(fp)
    810c:	008000b4 	movhi	r2,2
    8110:	1885883a 	add	r2,r3,r2
    8114:	10800023 	ldbuio	r2,0(r2)
    8118:	10803fcc 	andi	r2,r2,255
    811c:	e0bffd05 	stb	r2,-12(fp)
  return result;
    8120:	e0bffd03 	ldbu	r2,-12(fp)
}
    8124:	e037883a 	mov	sp,fp
    8128:	df000017 	ldw	fp,0(sp)
    812c:	dec00104 	addi	sp,sp,4
    8130:	f800283a 	ret

00008134 <i2c_write>:

void i2c_write( alt_u8 addr, alt_u8 reg, alt_u8 data )
{
    8134:	defff904 	addi	sp,sp,-28
    8138:	de00012e 	bgeu	sp,et,8140 <i2c_write+0xc>
    813c:	003b68fa 	trap	3
    8140:	df000615 	stw	fp,24(sp)
    8144:	df000604 	addi	fp,sp,24
    8148:	2807883a 	mov	r3,r5
    814c:	3005883a 	mov	r2,r6
    8150:	e13ffd05 	stb	r4,-12(fp)
    8154:	e0fffe05 	stb	r3,-8(fp)
    8158:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 status = 0;
    815c:	e03ffb05 	stb	zero,-20(fp)
	alt_u32 retry = 100;
    8160:	00801904 	movi	r2,100
    8164:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 address = ( ( ( (alt_u32)addr << 8 ) & 0x0000FF00 ) | ( (alt_u32)reg & 0x000000FF ) );
    8168:	e0bffd03 	ldbu	r2,-12(fp)
    816c:	1004923a 	slli	r2,r2,8
    8170:	10ffffcc 	andi	r3,r2,65535
    8174:	e0bffe03 	ldbu	r2,-8(fp)
    8178:	1884b03a 	or	r2,r3,r2
    817c:	e0bffc15 	stw	r2,-16(fp)
    while ( retry > 0) {
    8180:	00001406 	br	81d4 <i2c_write+0xa0>
		IOWR_8DIRECT( AMS_I2C_0_BASE, address, data );
    8184:	e0fffc17 	ldw	r3,-16(fp)
    8188:	008000b4 	movhi	r2,2
    818c:	1885883a 	add	r2,r3,r2
    8190:	e0ffff03 	ldbu	r3,-4(fp)
    8194:	10c00025 	stbio	r3,0(r2)
		status = (IORD_8DIRECT( AMS_I2C_0_BASE, address | (1 << 8)) & 0xFB);
    8198:	e0bffc17 	ldw	r2,-16(fp)
    819c:	10c04014 	ori	r3,r2,256
    81a0:	008000b4 	movhi	r2,2
    81a4:	1885883a 	add	r2,r3,r2
    81a8:	10800023 	ldbuio	r2,0(r2)
    81ac:	10803fcc 	andi	r2,r2,255
    81b0:	1007883a 	mov	r3,r2
    81b4:	00bffec4 	movi	r2,-5
    81b8:	1884703a 	and	r2,r3,r2
    81bc:	e0bffb05 	stb	r2,-20(fp)
		if (status != 0)
    81c0:	e0bffb03 	ldbu	r2,-20(fp)
    81c4:	10000626 	beq	r2,zero,81e0 <i2c_write+0xac>
			retry--;
    81c8:	e0bffa17 	ldw	r2,-24(fp)
    81cc:	10bfffc4 	addi	r2,r2,-1
    81d0:	e0bffa15 	stw	r2,-24(fp)
void i2c_write( alt_u8 addr, alt_u8 reg, alt_u8 data )
{
	alt_u8 status = 0;
	alt_u32 retry = 100;
    alt_u32 address = ( ( ( (alt_u32)addr << 8 ) & 0x0000FF00 ) | ( (alt_u32)reg & 0x000000FF ) );
    while ( retry > 0) {
    81d4:	e0bffa17 	ldw	r2,-24(fp)
    81d8:	103fea1e 	bne	r2,zero,8184 <_gp+0xffff2f26>
		if (status != 0)
			retry--;
		else
			break;
    }
}
    81dc:	00000106 	br	81e4 <i2c_write+0xb0>
		IOWR_8DIRECT( AMS_I2C_0_BASE, address, data );
		status = (IORD_8DIRECT( AMS_I2C_0_BASE, address | (1 << 8)) & 0xFB);
		if (status != 0)
			retry--;
		else
			break;
    81e0:	0001883a 	nop
    }
}
    81e4:	0001883a 	nop
    81e8:	e037883a 	mov	sp,fp
    81ec:	df000017 	ldw	fp,0(sp)
    81f0:	dec00104 	addi	sp,sp,4
    81f4:	f800283a 	ret

000081f8 <i2c_write_array>:

void i2c_write_array( const i2c_registers_t* array, const alt_u32 count )
{
    81f8:	defffb04 	addi	sp,sp,-20
    81fc:	de00012e 	bgeu	sp,et,8204 <i2c_write_array+0xc>
    8200:	003b68fa 	trap	3
    8204:	dfc00415 	stw	ra,16(sp)
    8208:	df000315 	stw	fp,12(sp)
    820c:	df000304 	addi	fp,sp,12
    8210:	e13ffe15 	stw	r4,-8(fp)
    8214:	e17fff15 	stw	r5,-4(fp)
  alt_u32 i;
  for( i = 0; i < count; i++ )
    8218:	e03ffd15 	stw	zero,-12(fp)
    821c:	00001d06 	br	8294 <i2c_write_array+0x9c>
    i2c_write( array[i].addr, array[i].reg, array[i].value );
    8220:	e0fffd17 	ldw	r3,-12(fp)
    8224:	1805883a 	mov	r2,r3
    8228:	1085883a 	add	r2,r2,r2
    822c:	10c5883a 	add	r2,r2,r3
    8230:	e0fffe17 	ldw	r3,-8(fp)
    8234:	1885883a 	add	r2,r3,r2
    8238:	10800003 	ldbu	r2,0(r2)
    823c:	11003fcc 	andi	r4,r2,255
    8240:	e0fffd17 	ldw	r3,-12(fp)
    8244:	1805883a 	mov	r2,r3
    8248:	1085883a 	add	r2,r2,r2
    824c:	10c5883a 	add	r2,r2,r3
    8250:	e0fffe17 	ldw	r3,-8(fp)
    8254:	1885883a 	add	r2,r3,r2
    8258:	10800043 	ldbu	r2,1(r2)
    825c:	11403fcc 	andi	r5,r2,255
    8260:	e0fffd17 	ldw	r3,-12(fp)
    8264:	1805883a 	mov	r2,r3
    8268:	1085883a 	add	r2,r2,r2
    826c:	10c5883a 	add	r2,r2,r3
    8270:	e0fffe17 	ldw	r3,-8(fp)
    8274:	1885883a 	add	r2,r3,r2
    8278:	10800083 	ldbu	r2,2(r2)
    827c:	10803fcc 	andi	r2,r2,255
    8280:	100d883a 	mov	r6,r2
    8284:	00081340 	call	8134 <i2c_write>
}

void i2c_write_array( const i2c_registers_t* array, const alt_u32 count )
{
  alt_u32 i;
  for( i = 0; i < count; i++ )
    8288:	e0bffd17 	ldw	r2,-12(fp)
    828c:	10800044 	addi	r2,r2,1
    8290:	e0bffd15 	stw	r2,-12(fp)
    8294:	e0fffd17 	ldw	r3,-12(fp)
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	18bfe036 	bltu	r3,r2,8220 <_gp+0xffff2fc2>
    i2c_write( array[i].addr, array[i].reg, array[i].value );
}
    82a0:	0001883a 	nop
    82a4:	e037883a 	mov	sp,fp
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	df000017 	ldw	fp,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret

000082b8 <i2c_compare_array>:

void i2c_compare_array( const i2c_registers_t* array, const alt_u32 count )
{
    82b8:	defffa04 	addi	sp,sp,-24
    82bc:	de00012e 	bgeu	sp,et,82c4 <i2c_compare_array+0xc>
    82c0:	003b68fa 	trap	3
    82c4:	dfc00515 	stw	ra,20(sp)
    82c8:	df000415 	stw	fp,16(sp)
    82cc:	df000404 	addi	fp,sp,16
    82d0:	e13ffe15 	stw	r4,-8(fp)
    82d4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 i;
  alt_u8 readed = 0;
    82d8:	e03ffd05 	stb	zero,-12(fp)
  alt_u8 must_be = 0;
    82dc:	e03ffd45 	stb	zero,-11(fp)
  for( i = 0; i < count; i++ ){
    82e0:	e03ffc15 	stw	zero,-16(fp)
    82e4:	00003b06 	br	83d4 <i2c_compare_array+0x11c>
	readed =  i2c_read(array[i].addr,array[i].reg);
    82e8:	e0fffc17 	ldw	r3,-16(fp)
    82ec:	1805883a 	mov	r2,r3
    82f0:	1085883a 	add	r2,r2,r2
    82f4:	10c5883a 	add	r2,r2,r3
    82f8:	e0fffe17 	ldw	r3,-8(fp)
    82fc:	1885883a 	add	r2,r3,r2
    8300:	10800003 	ldbu	r2,0(r2)
    8304:	11003fcc 	andi	r4,r2,255
    8308:	e0fffc17 	ldw	r3,-16(fp)
    830c:	1805883a 	mov	r2,r3
    8310:	1085883a 	add	r2,r2,r2
    8314:	10c5883a 	add	r2,r2,r3
    8318:	e0fffe17 	ldw	r3,-8(fp)
    831c:	1885883a 	add	r2,r3,r2
    8320:	10800043 	ldbu	r2,1(r2)
    8324:	10803fcc 	andi	r2,r2,255
    8328:	100b883a 	mov	r5,r2
    832c:	00080cc0 	call	80cc <i2c_read>
    8330:	e0bffd05 	stb	r2,-12(fp)
	must_be = array[i].value;
    8334:	e0fffc17 	ldw	r3,-16(fp)
    8338:	1805883a 	mov	r2,r3
    833c:	1085883a 	add	r2,r2,r2
    8340:	10c5883a 	add	r2,r2,r3
    8344:	e0fffe17 	ldw	r3,-8(fp)
    8348:	1885883a 	add	r2,r3,r2
    834c:	10800083 	ldbu	r2,2(r2)
    8350:	e0bffd45 	stb	r2,-11(fp)
    if(readed != must_be)
    8354:	e0fffd03 	ldbu	r3,-12(fp)
    8358:	e0bffd43 	ldbu	r2,-11(fp)
    835c:	18801a26 	beq	r3,r2,83c8 <i2c_compare_array+0x110>
    	i2c_write( array[i].addr, array[i].reg, array[i].value );
    8360:	e0fffc17 	ldw	r3,-16(fp)
    8364:	1805883a 	mov	r2,r3
    8368:	1085883a 	add	r2,r2,r2
    836c:	10c5883a 	add	r2,r2,r3
    8370:	e0fffe17 	ldw	r3,-8(fp)
    8374:	1885883a 	add	r2,r3,r2
    8378:	10800003 	ldbu	r2,0(r2)
    837c:	11003fcc 	andi	r4,r2,255
    8380:	e0fffc17 	ldw	r3,-16(fp)
    8384:	1805883a 	mov	r2,r3
    8388:	1085883a 	add	r2,r2,r2
    838c:	10c5883a 	add	r2,r2,r3
    8390:	e0fffe17 	ldw	r3,-8(fp)
    8394:	1885883a 	add	r2,r3,r2
    8398:	10800043 	ldbu	r2,1(r2)
    839c:	11403fcc 	andi	r5,r2,255
    83a0:	e0fffc17 	ldw	r3,-16(fp)
    83a4:	1805883a 	mov	r2,r3
    83a8:	1085883a 	add	r2,r2,r2
    83ac:	10c5883a 	add	r2,r2,r3
    83b0:	e0fffe17 	ldw	r3,-8(fp)
    83b4:	1885883a 	add	r2,r3,r2
    83b8:	10800083 	ldbu	r2,2(r2)
    83bc:	10803fcc 	andi	r2,r2,255
    83c0:	100d883a 	mov	r6,r2
    83c4:	00081340 	call	8134 <i2c_write>
void i2c_compare_array( const i2c_registers_t* array, const alt_u32 count )
{
  alt_u32 i;
  alt_u8 readed = 0;
  alt_u8 must_be = 0;
  for( i = 0; i < count; i++ ){
    83c8:	e0bffc17 	ldw	r2,-16(fp)
    83cc:	10800044 	addi	r2,r2,1
    83d0:	e0bffc15 	stw	r2,-16(fp)
    83d4:	e0fffc17 	ldw	r3,-16(fp)
    83d8:	e0bfff17 	ldw	r2,-4(fp)
    83dc:	18bfc236 	bltu	r3,r2,82e8 <_gp+0xffff308a>
	readed =  i2c_read(array[i].addr,array[i].reg);
	must_be = array[i].value;
    if(readed != must_be)
    	i2c_write( array[i].addr, array[i].reg, array[i].value );
  }
}
    83e0:	0001883a 	nop
    83e4:	e037883a 	mov	sp,fp
    83e8:	dfc00117 	ldw	ra,4(sp)
    83ec:	df000017 	ldw	fp,0(sp)
    83f0:	dec00204 	addi	sp,sp,8
    83f4:	f800283a 	ret

000083f8 <gpio_get>:
                                     GPIO_DDR_TOP_CAL_SUCCESS | \
                                     GPIO_DDR_BOT_INIT_DONE   | \
                                     GPIO_DDR_TOP_INIT_DONE )

alt_u32 gpio_get( alt_u32 mask )
{
    83f8:	defffd04 	addi	sp,sp,-12
    83fc:	de00012e 	bgeu	sp,et,8404 <gpio_get+0xc>
    8400:	003b68fa 	trap	3
    8404:	df000215 	stw	fp,8(sp)
    8408:	df000204 	addi	fp,sp,8
    840c:	e13fff15 	stw	r4,-4(fp)
	/*
	alt_u32 state = IORD_32DIRECT( PIO_0_BASE, 0 );
	return ( state & mask );
	*/
	alt_u32 state = IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE );
    8410:	00800074 	movhi	r2,1
    8414:	10800037 	ldwio	r2,0(r2)
    8418:	e0bffe15 	stw	r2,-8(fp)
	return ( state & mask );
    841c:	e0fffe17 	ldw	r3,-8(fp)
    8420:	e0bfff17 	ldw	r2,-4(fp)
    8424:	1884703a 	and	r2,r3,r2
}
    8428:	e037883a 	mov	sp,fp
    842c:	df000017 	ldw	fp,0(sp)
    8430:	dec00104 	addi	sp,sp,4
    8434:	f800283a 	ret

00008438 <gpio_set>:

void gpio_set( alt_u32 mask )
{
    8438:	defffe04 	addi	sp,sp,-8
    843c:	de00012e 	bgeu	sp,et,8444 <gpio_set+0xc>
    8440:	003b68fa 	trap	3
    8444:	df000115 	stw	fp,4(sp)
    8448:	df000104 	addi	fp,sp,4
    844c:	e13fff15 	stw	r4,-4(fp)
	/*
	alt_u32 state = IORD_32DIRECT( PIO_0_BASE, 0 );
	IOWR_32DIRECT( PIO_0_BASE, 0, ( state | mask ) );
	*/
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, mask );
    8450:	e0ffff17 	ldw	r3,-4(fp)
    8454:	00800074 	movhi	r2,1
    8458:	10800404 	addi	r2,r2,16
    845c:	10c00035 	stwio	r3,0(r2)
}
    8460:	0001883a 	nop
    8464:	e037883a 	mov	sp,fp
    8468:	df000017 	ldw	fp,0(sp)
    846c:	dec00104 	addi	sp,sp,4
    8470:	f800283a 	ret

00008474 <gpio_clear>:

void gpio_clear( alt_u32 mask )
{
    8474:	defffe04 	addi	sp,sp,-8
    8478:	de00012e 	bgeu	sp,et,8480 <gpio_clear+0xc>
    847c:	003b68fa 	trap	3
    8480:	df000115 	stw	fp,4(sp)
    8484:	df000104 	addi	fp,sp,4
    8488:	e13fff15 	stw	r4,-4(fp)
	/*
	alt_u32 state = IORD_32DIRECT( PIO_0_BASE, 0 );
	IOWR_32DIRECT( PIO_0_BASE, 0, ( state & ~mask ) );
	*/
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, mask );
    848c:	e0ffff17 	ldw	r3,-4(fp)
    8490:	00800074 	movhi	r2,1
    8494:	10800504 	addi	r2,r2,20
    8498:	10c00035 	stwio	r3,0(r2)
}
    849c:	0001883a 	nop
    84a0:	e037883a 	mov	sp,fp
    84a4:	df000017 	ldw	fp,0(sp)
    84a8:	dec00104 	addi	sp,sp,4
    84ac:	f800283a 	ret

000084b0 <get_hdmi_clk>:
		  { 0x6c, 0x7e, 0x00 },
		  { 0x6c, 0x7f, 0xf0 },
		  { 0x64, 0x74, 0x01 },
};

alt_u32 get_hdmi_clk(alt_u32 hdmi_in){
    84b0:	defffb04 	addi	sp,sp,-20
    84b4:	de00012e 	bgeu	sp,et,84bc <get_hdmi_clk+0xc>
    84b8:	003b68fa 	trap	3
    84bc:	dfc00415 	stw	ra,16(sp)
    84c0:	df000315 	stw	fp,12(sp)
    84c4:	df000304 	addi	fp,sp,12
    84c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 cs = ( hdmi_in == 0 ) ? GPIO_ADV7613_CS0 : GPIO_ADV7613_CS1;
    84cc:	e0bfff17 	ldw	r2,-4(fp)
    84d0:	1000021e 	bne	r2,zero,84dc <get_hdmi_clk+0x2c>
    84d4:	00804004 	movi	r2,256
    84d8:	00000106 	br	84e0 <get_hdmi_clk+0x30>
    84dc:	00808004 	movi	r2,512
    84e0:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, cs );
    84e4:	e0fffd17 	ldw	r3,-12(fp)
    84e8:	00800074 	movhi	r2,1
    84ec:	10800404 	addi	r2,r2,16
    84f0:	10c00035 	stwio	r3,0(r2)
		alt_u8 buff[2]    = { i2c_read(0x0068, 0x51), i2c_read(0x0068, 0x52) };
    84f4:	01401444 	movi	r5,81
    84f8:	01001a04 	movi	r4,104
    84fc:	00080cc0 	call	80cc <i2c_read>
    8500:	e0bffe85 	stb	r2,-6(fp)
    8504:	01401484 	movi	r5,82
    8508:	01001a04 	movi	r4,104
    850c:	00080cc0 	call	80cc <i2c_read>
    8510:	e0bffec5 	stb	r2,-5(fp)
		alt_u16 TMDS_FREQ = ( buff[0] << 1 ) | ( buff[1] & 0x01 );
    8514:	e0bffe83 	ldbu	r2,-6(fp)
    8518:	10803fcc 	andi	r2,r2,255
    851c:	1085883a 	add	r2,r2,r2
    8520:	1007883a 	mov	r3,r2
    8524:	e0bffec3 	ldbu	r2,-5(fp)
    8528:	10803fcc 	andi	r2,r2,255
    852c:	1080004c 	andi	r2,r2,1
    8530:	1884b03a 	or	r2,r3,r2
    8534:	e0bffe0d 	sth	r2,-8(fp)
//		alt_u16 TMDS_FRAC = buff[1] >> 1;
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, cs );
    8538:	e0fffd17 	ldw	r3,-12(fp)
    853c:	00800074 	movhi	r2,1
    8540:	10800504 	addi	r2,r2,20
    8544:	10c00035 	stwio	r3,0(r2)
	return TMDS_FREQ;
    8548:	e0bffe0b 	ldhu	r2,-8(fp)
}
    854c:	e037883a 	mov	sp,fp
    8550:	dfc00117 	ldw	ra,4(sp)
    8554:	df000017 	ldw	fp,0(sp)
    8558:	dec00204 	addi	sp,sp,8
    855c:	f800283a 	ret

00008560 <get_adv_info>:

alt_u8 get_adv_info(alt_u8 cs){
    8560:	deff3004 	addi	sp,sp,-832
    8564:	de00012e 	bgeu	sp,et,856c <get_adv_info+0xc>
    8568:	003b68fa 	trap	3
    856c:	dfc0cf15 	stw	ra,828(sp)
    8570:	df00ce15 	stw	fp,824(sp)
    8574:	dc40cd15 	stw	r17,820(sp)
    8578:	dc00cc15 	stw	r16,816(sp)
    857c:	df00ce04 	addi	fp,sp,824
    8580:	2005883a 	mov	r2,r4
    8584:	e0bffd05 	stb	r2,-12(fp)
	alt_u8 buff_io[256];
#ifdef DEBUG
	alt_u8 buff_hdmi[256];
	alt_u8 buff_cec[256];
#endif
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 | GPIO_ADV7613_CS0 );
    8588:	00c0c004 	movi	r3,768
    858c:	00800074 	movhi	r2,1
    8590:	10800504 	addi	r2,r2,20
    8594:	10c00035 	stwio	r3,0(r2)
	alt_u32 curr_cs = ( cs == 1 ) ? GPIO_ADV7613_CS1 : GPIO_ADV7613_CS0;
    8598:	e0bffd03 	ldbu	r2,-12(fp)
    859c:	10800058 	cmpnei	r2,r2,1
    85a0:	1000021e 	bne	r2,zero,85ac <get_adv_info+0x4c>
    85a4:	00808004 	movi	r2,512
    85a8:	00000106 	br	85b0 <get_adv_info+0x50>
    85ac:	00804004 	movi	r2,256
    85b0:	e0bf3315 	stw	r2,-820(fp)
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, curr_cs );
    85b4:	e0ff3317 	ldw	r3,-820(fp)
    85b8:	00800074 	movhi	r2,1
    85bc:	10800404 	addi	r2,r2,16
    85c0:	10c00035 	stwio	r3,0(r2)

	for (alt_u8 i=0; i < 255; i++){
    85c4:	e03f3205 	stb	zero,-824(fp)
    85c8:	00001e06 	br	8644 <get_adv_info+0xe4>
		buff_io[i]   = i2c_read(0x0098, i);
    85cc:	e43f3203 	ldbu	r16,-824(fp)
    85d0:	e0bf3203 	ldbu	r2,-824(fp)
    85d4:	100b883a 	mov	r5,r2
    85d8:	01002604 	movi	r4,152
    85dc:	00080cc0 	call	80cc <i2c_read>
    85e0:	1007883a 	mov	r3,r2
    85e4:	e0bf3b04 	addi	r2,fp,-788
    85e8:	1405883a 	add	r2,r2,r16
    85ec:	10c00005 	stb	r3,0(r2)
#ifdef DEBUG
		buff_hdmi[i] = i2c_read(0x0068, i);
    85f0:	e43f3203 	ldbu	r16,-824(fp)
    85f4:	e0bf3203 	ldbu	r2,-824(fp)
    85f8:	100b883a 	mov	r5,r2
    85fc:	01001a04 	movi	r4,104
    8600:	00080cc0 	call	80cc <i2c_read>
    8604:	1007883a 	mov	r3,r2
    8608:	e0bf7b04 	addi	r2,fp,-532
    860c:	1405883a 	add	r2,r2,r16
    8610:	10c00005 	stb	r3,0(r2)
		buff_cec[i]  = i2c_read(0x0080, i);
    8614:	e43f3203 	ldbu	r16,-824(fp)
    8618:	e0bf3203 	ldbu	r2,-824(fp)
    861c:	100b883a 	mov	r5,r2
    8620:	01002004 	movi	r4,128
    8624:	00080cc0 	call	80cc <i2c_read>
    8628:	1007883a 	mov	r3,r2
    862c:	e0bfbb04 	addi	r2,fp,-276
    8630:	1405883a 	add	r2,r2,r16
    8634:	10c00005 	stb	r3,0(r2)
#endif
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 | GPIO_ADV7613_CS0 );
	alt_u32 curr_cs = ( cs == 1 ) ? GPIO_ADV7613_CS1 : GPIO_ADV7613_CS0;
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, curr_cs );

	for (alt_u8 i=0; i < 255; i++){
    8638:	e0bf3203 	ldbu	r2,-824(fp)
    863c:	10800044 	addi	r2,r2,1
    8640:	e0bf3205 	stb	r2,-824(fp)
    8644:	e0bf3203 	ldbu	r2,-824(fp)
    8648:	10803fd8 	cmpnei	r2,r2,255
    864c:	103fdf1e 	bne	r2,zero,85cc <_gp+0xffff336e>
#ifdef DEBUG
		buff_hdmi[i] = i2c_read(0x0068, i);
		buff_cec[i]  = i2c_read(0x0080, i);
#endif
	}
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, curr_cs );
    8650:	e0ff3317 	ldw	r3,-820(fp)
    8654:	00800074 	movhi	r2,1
    8658:	10800504 	addi	r2,r2,20
    865c:	10c00035 	stwio	r3,0(r2)

#ifdef DEBUG
	volatile double cur_freq          = ( ( buff_hdmi[0x51] << 1 ) | ( buff_hdmi[0x52] & 0x01 ) ) + ( buff_hdmi[0x52] >> 1 ) / 64.;
    8660:	e0bf8f43 	ldbu	r2,-451(fp)
    8664:	10803fcc 	andi	r2,r2,255
    8668:	1085883a 	add	r2,r2,r2
    866c:	1007883a 	mov	r3,r2
    8670:	e0bf8f83 	ldbu	r2,-450(fp)
    8674:	10803fcc 	andi	r2,r2,255
    8678:	1080004c 	andi	r2,r2,1
    867c:	1884b03a 	or	r2,r3,r2
    8680:	1009883a 	mov	r4,r2
    8684:	000b6e00 	call	b6e0 <__floatsidf>
    8688:	1021883a 	mov	r16,r2
    868c:	1823883a 	mov	r17,r3
    8690:	e0bf8f83 	ldbu	r2,-450(fp)
    8694:	10803fcc 	andi	r2,r2,255
    8698:	1004d07a 	srli	r2,r2,1
    869c:	10803fcc 	andi	r2,r2,255
    86a0:	1009883a 	mov	r4,r2
    86a4:	000b6e00 	call	b6e0 <__floatsidf>
    86a8:	1011883a 	mov	r8,r2
    86ac:	1813883a 	mov	r9,r3
    86b0:	000d883a 	mov	r6,zero
    86b4:	01d01434 	movhi	r7,16464
    86b8:	4009883a 	mov	r4,r8
    86bc:	480b883a 	mov	r5,r9
    86c0:	000ad080 	call	ad08 <__divdf3>
    86c4:	1009883a 	mov	r4,r2
    86c8:	180b883a 	mov	r5,r3
    86cc:	2005883a 	mov	r2,r4
    86d0:	2807883a 	mov	r3,r5
    86d4:	100d883a 	mov	r6,r2
    86d8:	180f883a 	mov	r7,r3
    86dc:	8009883a 	mov	r4,r16
    86e0:	880b883a 	mov	r5,r17
    86e4:	000a4540 	call	a454 <__adddf3>
    86e8:	1009883a 	mov	r4,r2
    86ec:	180b883a 	mov	r5,r3
    86f0:	2005883a 	mov	r2,r4
    86f4:	2807883a 	mov	r3,r5
    86f8:	e0bffb15 	stw	r2,-20(fp)
    86fc:	e0fffc15 	stw	r3,-16(fp)

	alt_u8  STATUS_REG_HDMI_FLAGS1   = ( buff_io[0x60]);
    8700:	e0bf5303 	ldbu	r2,-692(fp)
    8704:	e0bf3405 	stb	r2,-816(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS2   = ( buff_io[0x65]);
    8708:	e0bf5443 	ldbu	r2,-687(fp)
    870c:	e0bf3445 	stb	r2,-815(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS3   = ( buff_io[0x6A]);
    8710:	e0bf5583 	ldbu	r2,-682(fp)
    8714:	e0bf3485 	stb	r2,-814(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS4   = ( buff_io[0x6F]);
    8718:	e0bf56c3 	ldbu	r2,-677(fp)
    871c:	e0bf34c5 	stb	r2,-813(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS5   = ( buff_io[0x79]);
    8720:	e0bf5943 	ldbu	r2,-667(fp)
    8724:	e0bf3505 	stb	r2,-812(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS6   = ( buff_io[0x7E]);
    8728:	e0bf5a83 	ldbu	r2,-662(fp)
    872c:	e0bf3545 	stb	r2,-811(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS7   = ( buff_io[0x83]);
    8730:	e0bf5bc3 	ldbu	r2,-657(fp)
    8734:	e0bf3585 	stb	r2,-810(fp)
	alt_u8  STATUS_REG_HDMI_FLAGS8   = ( buff_io[0x88]);
    8738:	e0bf5d03 	ldbu	r2,-652(fp)
    873c:	e0bf35c5 	stb	r2,-809(fp)



	alt_u8  TMDS_CLK_A_RAW   = ( buff_io[0x6a]   & 0x10 ) >> 4;
    8740:	e0bf5583 	ldbu	r2,-682(fp)
    8744:	10803fcc 	andi	r2,r2,255
    8748:	1080040c 	andi	r2,r2,16
    874c:	1005d13a 	srai	r2,r2,4
    8750:	e0bf3605 	stb	r2,-808(fp)
	alt_u8  TMDS_PLL_LOCKED  = ( buff_hdmi[0x04] & 0x02 ) >> 1;
    8754:	e0bf7c03 	ldbu	r2,-528(fp)
    8758:	10803fcc 	andi	r2,r2,255
    875c:	1080008c 	andi	r2,r2,2
    8760:	1005d07a 	srai	r2,r2,1
    8764:	e0bf3645 	stb	r2,-807(fp)
	alt_u8  DCFIFO_LOCKED    = ( buff_hdmi[0x1c] & 0x08 ) >> 3;
    8768:	e0bf8203 	ldbu	r2,-504(fp)
    876c:	10803fcc 	andi	r2,r2,255
    8770:	1080020c 	andi	r2,r2,8
    8774:	1005d0fa 	srai	r2,r2,3
    8778:	e0bf3685 	stb	r2,-806(fp)
	alt_u8  DCFIFO_LEVEL     = ( buff_hdmi[0x1c] & 0x07 );
    877c:	e0bf8203 	ldbu	r2,-504(fp)
    8780:	108001cc 	andi	r2,r2,7
    8784:	e0bf36c5 	stb	r2,-805(fp)
	alt_u8  DCFIFO_RECENTER  = ( buff_hdmi[0x5a] & 0x04 ) >> 2;
    8788:	e0bf9183 	ldbu	r2,-442(fp)
    878c:	10803fcc 	andi	r2,r2,255
    8790:	1080010c 	andi	r2,r2,4
    8794:	1005d0ba 	srai	r2,r2,2
    8798:	e0bf3705 	stb	r2,-804(fp)
	alt_u16 LINE_WIDTH       = ( buff_hdmi[0x07] & 0x1f ) << 8 | buff_hdmi[0x08];
    879c:	e0bf7cc3 	ldbu	r2,-525(fp)
    87a0:	10803fcc 	andi	r2,r2,255
    87a4:	108007cc 	andi	r2,r2,31
    87a8:	1004923a 	slli	r2,r2,8
    87ac:	1007883a 	mov	r3,r2
    87b0:	e0bf7d03 	ldbu	r2,-524(fp)
    87b4:	10803fcc 	andi	r2,r2,255
    87b8:	1884b03a 	or	r2,r3,r2
    87bc:	e0bf378d 	sth	r2,-802(fp)
	alt_u16 FIELD0_HEIGHT    = ( buff_hdmi[0x09] & 0x1f ) << 8 | buff_hdmi[0x0a];
    87c0:	e0bf7d43 	ldbu	r2,-523(fp)
    87c4:	10803fcc 	andi	r2,r2,255
    87c8:	108007cc 	andi	r2,r2,31
    87cc:	1004923a 	slli	r2,r2,8
    87d0:	1007883a 	mov	r3,r2
    87d4:	e0bf7d83 	ldbu	r2,-522(fp)
    87d8:	10803fcc 	andi	r2,r2,255
    87dc:	1884b03a 	or	r2,r3,r2
    87e0:	e0bf380d 	sth	r2,-800(fp)
	alt_u8 NEW_TMDS_FRQ_RAW  = ( buff_io[0x83]   & 0x02 ) >> 1;
    87e4:	e0bf5bc3 	ldbu	r2,-657(fp)
    87e8:	10803fcc 	andi	r2,r2,255
    87ec:	1080008c 	andi	r2,r2,2
    87f0:	1005d07a 	srai	r2,r2,1
    87f4:	e0bf3885 	stb	r2,-798(fp)
	alt_u8 TMDSPLL_LCK_A_RAW = ( buff_io[0x6a]   & 0x40 ) >> 6;
    87f8:	e0bf5583 	ldbu	r2,-682(fp)
    87fc:	10803fcc 	andi	r2,r2,255
    8800:	1080100c 	andi	r2,r2,64
    8804:	1005d1ba 	srai	r2,r2,6
    8808:	e0bf38c5 	stb	r2,-797(fp)
	alt_u8 CP_PWRDN          = ( buff_io[0x0c]   & 0x04 ) >> 2; //0 (d) Powers up clock to CP core;	1 Powers down clock to CP core
    880c:	e0bf3e03 	ldbu	r2,-776(fp)
    8810:	10803fcc 	andi	r2,r2,255
    8814:	1080010c 	andi	r2,r2,4
    8818:	1005d0ba 	srai	r2,r2,2
    881c:	e0bf3905 	stb	r2,-796(fp)
	alt_u8 XTAL_PDN          = ( buff_io[0x0b]   & 0x01 );		//0 (d) Powers up XTAL buffer to digital core; 1 Powers down XTAL buffer to digital core
    8820:	e0bf3dc3 	ldbu	r2,-777(fp)
    8824:	1080004c 	andi	r2,r2,1
    8828:	e0bf3945 	stb	r2,-795(fp)
	alt_u8 CORE_PDN          = ( buff_io[0x0b]   & 0x02 ) >> 1;	//0 (d) Powers up CP and digital sections of HDMI block; 1 Powers down CP and digital section of HDMI block
    882c:	e0bf3dc3 	ldbu	r2,-777(fp)
    8830:	10803fcc 	andi	r2,r2,255
    8834:	1080008c 	andi	r2,r2,2
    8838:	1005d07a 	srai	r2,r2,1
    883c:	e0bf3985 	stb	r2,-794(fp)
	alt_u8 CEC_POWER_UP      = ( buff_cec[0x2a]  & 0x01 );
    8840:	e0bfc583 	ldbu	r2,-234(fp)
    8844:	1080004c 	andi	r2,r2,1
    8848:	e0bf39c5 	stb	r2,-793(fp)
	alt_u8 CEC_SOFT_RESET    = ( buff_cec[0x2c]  & 0x01 );
    884c:	e0bfc603 	ldbu	r2,-232(fp)
    8850:	1080004c 	andi	r2,r2,1
    8854:	e0bf3a05 	stb	r2,-792(fp)
	alt_u8 MAIN_RESET        = ( buff_io[0xff]   & 0x80 ) >> 7;
    8858:	e0bf7ac3 	ldbu	r2,-533(fp)
    885c:	10803fcc 	andi	r2,r2,255
    8860:	1004d1fa 	srli	r2,r2,7
    8864:	e0bf3a45 	stb	r2,-791(fp)
	alt_u8 PADS_PDN          = ( buff_io[0x0c]   & 0x01 );
    8868:	e0bf3e03 	ldbu	r2,-776(fp)
    886c:	1080004c 	andi	r2,r2,1
    8870:	e0bf3a85 	stb	r2,-790(fp)
#endif
	alt_u8 POWER_DOWN        = ( buff_io[0x0c]   & 0x20 ) >> 5; //0 Chip operational; 1(d) Enables chip power down
    8874:	e0bf3e03 	ldbu	r2,-776(fp)
    8878:	10803fcc 	andi	r2,r2,255
    887c:	1080080c 	andi	r2,r2,32
    8880:	1005d17a 	srai	r2,r2,5
    8884:	e0bf3ac5 	stb	r2,-789(fp)
	return POWER_DOWN;
    8888:	e0bf3ac3 	ldbu	r2,-789(fp)
}
    888c:	e6fffe04 	addi	sp,fp,-8
    8890:	dfc00317 	ldw	ra,12(sp)
    8894:	df000217 	ldw	fp,8(sp)
    8898:	dc400117 	ldw	r17,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00404 	addi	sp,sp,16
    88a4:	f800283a 	ret

000088a8 <reset_flash_adv7613>:

void reset_flash_adv7613(){
    88a8:	defffe04 	addi	sp,sp,-8
    88ac:	de00012e 	bgeu	sp,et,88b4 <reset_flash_adv7613+0xc>
    88b0:	003b68fa 	trap	3
    88b4:	dfc00115 	stw	ra,4(sp)
    88b8:	df000015 	stw	fp,0(sp)
    88bc:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_RESET );
    88c0:	00c02004 	movi	r3,128
    88c4:	00800074 	movhi	r2,1
    88c8:	10800504 	addi	r2,r2,20
    88cc:	10c00035 	stwio	r3,0(r2)
	usleep( 10000 );
    88d0:	0109c404 	movi	r4,10000
    88d4:	000c7740 	call	c774 <usleep>
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_RESET );
    88d8:	00c02004 	movi	r3,128
    88dc:	00800074 	movhi	r2,1
    88e0:	10800404 	addi	r2,r2,16
    88e4:	10c00035 	stwio	r3,0(r2)
	usleep( 10000 );
    88e8:	0109c404 	movi	r4,10000
    88ec:	000c7740 	call	c774 <usleep>

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    88f0:	00c04004 	movi	r3,256
    88f4:	00800074 	movhi	r2,1
    88f8:	10800404 	addi	r2,r2,16
    88fc:	10c00035 	stwio	r3,0(r2)
	i2c_write(0x0098, 0xff, 0x80);
    8900:	01802004 	movi	r6,128
    8904:	01403fc4 	movi	r5,255
    8908:	01002604 	movi	r4,152
    890c:	00081340 	call	8134 <i2c_write>
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    8910:	00c04004 	movi	r3,256
    8914:	00800074 	movhi	r2,1
    8918:	10800504 	addi	r2,r2,20
    891c:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    8920:	00c08004 	movi	r3,512
    8924:	00800074 	movhi	r2,1
    8928:	10800404 	addi	r2,r2,16
    892c:	10c00035 	stwio	r3,0(r2)
	i2c_write(0x0098, 0xff, 0x80);
    8930:	01802004 	movi	r6,128
    8934:	01403fc4 	movi	r5,255
    8938:	01002604 	movi	r4,152
    893c:	00081340 	call	8134 <i2c_write>
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    8940:	00c08004 	movi	r3,512
    8944:	00800074 	movhi	r2,1
    8948:	10800504 	addi	r2,r2,20
    894c:	10c00035 	stwio	r3,0(r2)

	usleep( 10000 );
    8950:	0109c404 	movi	r4,10000
    8954:	000c7740 	call	c774 <usleep>
	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    8958:	00c04004 	movi	r3,256
    895c:	00800074 	movhi	r2,1
    8960:	10800404 	addi	r2,r2,16
    8964:	10c00035 	stwio	r3,0(r2)
	i2c_write_array( (i2c_registers_t*)adv7613_registers, ADV7613_NUM_REGS );
    8968:	01402f04 	movi	r5,188
    896c:	01000074 	movhi	r4,1
    8970:	21331404 	addi	r4,r4,-13232
    8974:	00081f80 	call	81f8 <i2c_write_array>
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    8978:	00c04004 	movi	r3,256
    897c:	00800074 	movhi	r2,1
    8980:	10800504 	addi	r2,r2,20
    8984:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    8988:	00c08004 	movi	r3,512
    898c:	00800074 	movhi	r2,1
    8990:	10800404 	addi	r2,r2,16
    8994:	10c00035 	stwio	r3,0(r2)
	i2c_write_array( (i2c_registers_t*)adv7613_registers, ADV7613_NUM_REGS );
    8998:	01402f04 	movi	r5,188
    899c:	01000074 	movhi	r4,1
    89a0:	21331404 	addi	r4,r4,-13232
    89a4:	00081f80 	call	81f8 <i2c_write_array>
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    89a8:	00c08004 	movi	r3,512
    89ac:	00800074 	movhi	r2,1
    89b0:	10800504 	addi	r2,r2,20
    89b4:	10c00035 	stwio	r3,0(r2)
}
    89b8:	0001883a 	nop
    89bc:	e037883a 	mov	sp,fp
    89c0:	dfc00117 	ldw	ra,4(sp)
    89c4:	df000017 	ldw	fp,0(sp)
    89c8:	dec00204 	addi	sp,sp,8
    89cc:	f800283a 	ret

000089d0 <init_clp>:
	alt_u32 Right_offset;
	alt_u32 Top_offset;
	alt_u32 Bottom_offset;
};

void init_clp(struct clipper_ctrl *clp, alt_u32 Control){
    89d0:	defffd04 	addi	sp,sp,-12
    89d4:	de00012e 	bgeu	sp,et,89dc <init_clp+0xc>
    89d8:	003b68fa 	trap	3
    89dc:	df000215 	stw	fp,8(sp)
    89e0:	df000204 	addi	fp,sp,8
    89e4:	e13ffe15 	stw	r4,-8(fp)
    89e8:	e17fff15 	stw	r5,-4(fp)
	clp->Control = Control;
    89ec:	e0bffe17 	ldw	r2,-8(fp)
    89f0:	e0ffff17 	ldw	r3,-4(fp)
    89f4:	10c00015 	stw	r3,0(r2)
}
    89f8:	0001883a 	nop
    89fc:	e037883a 	mov	sp,fp
    8a00:	df000017 	ldw	fp,0(sp)
    8a04:	dec00104 	addi	sp,sp,4
    8a08:	f800283a 	ret

00008a0c <set_rectangle>:

void set_rectangle(struct clipper_ctrl *clp, alt_u32 x0, alt_u32 y0, alt_u32 x1, alt_u32 y1){
    8a0c:	defffb04 	addi	sp,sp,-20
    8a10:	de00012e 	bgeu	sp,et,8a18 <set_rectangle+0xc>
    8a14:	003b68fa 	trap	3
    8a18:	df000415 	stw	fp,16(sp)
    8a1c:	df000404 	addi	fp,sp,16
    8a20:	e13ffc15 	stw	r4,-16(fp)
    8a24:	e17ffd15 	stw	r5,-12(fp)
    8a28:	e1bffe15 	stw	r6,-8(fp)
    8a2c:	e1ffff15 	stw	r7,-4(fp)
	clp->Left_offset = x0;
    8a30:	e0bffc17 	ldw	r2,-16(fp)
    8a34:	e0fffd17 	ldw	r3,-12(fp)
    8a38:	10c00315 	stw	r3,12(r2)
	clp->Top_offset = y0;
    8a3c:	e0bffc17 	ldw	r2,-16(fp)
    8a40:	e0fffe17 	ldw	r3,-8(fp)
    8a44:	10c00515 	stw	r3,20(r2)
	clp->Right_offset = x1;
    8a48:	e0bffc17 	ldw	r2,-16(fp)
    8a4c:	e0ffff17 	ldw	r3,-4(fp)
    8a50:	10c00415 	stw	r3,16(r2)
	clp->Bottom_offset = y1;
    8a54:	e0bffc17 	ldw	r2,-16(fp)
    8a58:	e0c00117 	ldw	r3,4(fp)
    8a5c:	10c00615 	stw	r3,24(r2)
}
    8a60:	0001883a 	nop
    8a64:	e037883a 	mov	sp,fp
    8a68:	df000017 	ldw	fp,0(sp)
    8a6c:	dec00104 	addi	sp,sp,4
    8a70:	f800283a 	ret

00008a74 <init_cvi>:

void init_cvi(struct cvi_ctrl *cvi, alt_u32 Control)
{
    8a74:	defffd04 	addi	sp,sp,-12
    8a78:	de00012e 	bgeu	sp,et,8a80 <init_cvi+0xc>
    8a7c:	003b68fa 	trap	3
    8a80:	df000215 	stw	fp,8(sp)
    8a84:	df000204 	addi	fp,sp,8
    8a88:	e13ffe15 	stw	r4,-8(fp)
    8a8c:	e17fff15 	stw	r5,-4(fp)
	cvi->Control = Control;
    8a90:	e0bffe17 	ldw	r2,-8(fp)
    8a94:	e0ffff17 	ldw	r3,-4(fp)
    8a98:	10c00015 	stw	r3,0(r2)
}
    8a9c:	0001883a 	nop
    8aa0:	e037883a 	mov	sp,fp
    8aa4:	df000017 	ldw	fp,0(sp)
    8aa8:	dec00104 	addi	sp,sp,4
    8aac:	f800283a 	ret

00008ab0 <set_scaler>:

void set_scaler(struct scaler_ctrl *scl, alt_u32 Control, alt_u32 Output_Width, alt_u32 Output_Height)
{
    8ab0:	defffb04 	addi	sp,sp,-20
    8ab4:	de00012e 	bgeu	sp,et,8abc <set_scaler+0xc>
    8ab8:	003b68fa 	trap	3
    8abc:	df000415 	stw	fp,16(sp)
    8ac0:	df000404 	addi	fp,sp,16
    8ac4:	e13ffc15 	stw	r4,-16(fp)
    8ac8:	e17ffd15 	stw	r5,-12(fp)
    8acc:	e1bffe15 	stw	r6,-8(fp)
    8ad0:	e1ffff15 	stw	r7,-4(fp)
	scl->Control = Control;
    8ad4:	e0bffc17 	ldw	r2,-16(fp)
    8ad8:	e0fffd17 	ldw	r3,-12(fp)
    8adc:	10c00015 	stw	r3,0(r2)
	scl->Output_Width = Output_Width;
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	e0fffe17 	ldw	r3,-8(fp)
    8ae8:	10c00315 	stw	r3,12(r2)
	scl->Output_Height = Output_Height;
    8aec:	e0bffc17 	ldw	r2,-16(fp)
    8af0:	e0ffff17 	ldw	r3,-4(fp)
    8af4:	10c00415 	stw	r3,16(r2)
}
    8af8:	0001883a 	nop
    8afc:	e037883a 	mov	sp,fp
    8b00:	df000017 	ldw	fp,0(sp)
    8b04:	dec00104 	addi	sp,sp,4
    8b08:	f800283a 	ret

00008b0c <set_layer_cfg>:

void set_layer_cfg(struct layer_cfg *lyr, alt_u32 Layer_position, alt_u32 Enable, alt_u32 X_offset, alt_u32 Y_offset, alt_u32 Alpha_Mode, alt_u32 Static_Alpha)
{
    8b0c:	defffb04 	addi	sp,sp,-20
    8b10:	de00012e 	bgeu	sp,et,8b18 <set_layer_cfg+0xc>
    8b14:	003b68fa 	trap	3
    8b18:	df000415 	stw	fp,16(sp)
    8b1c:	df000404 	addi	fp,sp,16
    8b20:	e13ffc15 	stw	r4,-16(fp)
    8b24:	e17ffd15 	stw	r5,-12(fp)
    8b28:	e1bffe15 	stw	r6,-8(fp)
    8b2c:	e1ffff15 	stw	r7,-4(fp)
	lyr->X_offset = X_offset;
    8b30:	e0bffc17 	ldw	r2,-16(fp)
    8b34:	e0ffff17 	ldw	r3,-4(fp)
    8b38:	10c00015 	stw	r3,0(r2)
	lyr->Y_offset = Y_offset;
    8b3c:	e0bffc17 	ldw	r2,-16(fp)
    8b40:	e0c00117 	ldw	r3,4(fp)
    8b44:	10c00115 	stw	r3,4(r2)
	lyr->Static_Alpha = Static_Alpha;
    8b48:	e0bffc17 	ldw	r2,-16(fp)
    8b4c:	e0c00317 	ldw	r3,12(fp)
    8b50:	10c00415 	stw	r3,16(r2)
	lyr->Layer_position = Layer_position;
    8b54:	e0bffc17 	ldw	r2,-16(fp)
    8b58:	e0fffd17 	ldw	r3,-12(fp)
    8b5c:	10c00315 	stw	r3,12(r2)
	lyr->Input_Control.Enable = Enable;
    8b60:	e0bffe17 	ldw	r2,-8(fp)
    8b64:	1080004c 	andi	r2,r2,1
    8b68:	1007883a 	mov	r3,r2
    8b6c:	e0bffc17 	ldw	r2,-16(fp)
    8b70:	18c03fcc 	andi	r3,r3,255
    8b74:	18c0004c 	andi	r3,r3,1
    8b78:	11400217 	ldw	r5,8(r2)
    8b7c:	013fff84 	movi	r4,-2
    8b80:	2908703a 	and	r4,r5,r4
    8b84:	20c6b03a 	or	r3,r4,r3
    8b88:	10c00215 	stw	r3,8(r2)
	lyr->Input_Control.Alpha_Mode = Alpha_Mode;
    8b8c:	e0800217 	ldw	r2,8(fp)
    8b90:	108000cc 	andi	r2,r2,3
    8b94:	1007883a 	mov	r3,r2
    8b98:	e0bffc17 	ldw	r2,-16(fp)
    8b9c:	18c03fcc 	andi	r3,r3,255
    8ba0:	18c000cc 	andi	r3,r3,3
    8ba4:	18c7883a 	add	r3,r3,r3
    8ba8:	18c7883a 	add	r3,r3,r3
    8bac:	11400217 	ldw	r5,8(r2)
    8bb0:	013ffcc4 	movi	r4,-13
    8bb4:	2908703a 	and	r4,r5,r4
    8bb8:	20c6b03a 	or	r3,r4,r3
    8bbc:	10c00215 	stw	r3,8(r2)
	lyr->Input_Control.Enable_Consume = 0;
    8bc0:	e0bffc17 	ldw	r2,-16(fp)
    8bc4:	11000217 	ldw	r4,8(r2)
    8bc8:	00ffff44 	movi	r3,-3
    8bcc:	20c6703a 	and	r3,r4,r3
    8bd0:	10c00215 	stw	r3,8(r2)
}
    8bd4:	0001883a 	nop
    8bd8:	e037883a 	mov	sp,fp
    8bdc:	df000017 	ldw	fp,0(sp)
    8be0:	dec00104 	addi	sp,sp,4
    8be4:	f800283a 	ret

00008be8 <set_mixer_background>:

void set_mixer_background(struct mixer_ctrl *mix, alt_u32 Red, alt_u32 Green, alt_u32 Blue)
{
    8be8:	defffb04 	addi	sp,sp,-20
    8bec:	de00012e 	bgeu	sp,et,8bf4 <set_mixer_background+0xc>
    8bf0:	003b68fa 	trap	3
    8bf4:	df000415 	stw	fp,16(sp)
    8bf8:	df000404 	addi	fp,sp,16
    8bfc:	e13ffc15 	stw	r4,-16(fp)
    8c00:	e17ffd15 	stw	r5,-12(fp)
    8c04:	e1bffe15 	stw	r6,-8(fp)
    8c08:	e1ffff15 	stw	r7,-4(fp)
	mix->Uniform_background_Red = Red;
    8c0c:	e0bffc17 	ldw	r2,-16(fp)
    8c10:	e0fffd17 	ldw	r3,-12(fp)
    8c14:	10c00515 	stw	r3,20(r2)
	mix->Uniform_background_Green = Green;
    8c18:	e0bffc17 	ldw	r2,-16(fp)
    8c1c:	e0fffe17 	ldw	r3,-8(fp)
    8c20:	10c00615 	stw	r3,24(r2)
	mix->Uniform_background_Blue = Blue;
    8c24:	e0bffc17 	ldw	r2,-16(fp)
    8c28:	e0ffff17 	ldw	r3,-4(fp)
    8c2c:	10c00715 	stw	r3,28(r2)
}
    8c30:	0001883a 	nop
    8c34:	e037883a 	mov	sp,fp
    8c38:	df000017 	ldw	fp,0(sp)
    8c3c:	dec00104 	addi	sp,sp,4
    8c40:	f800283a 	ret

00008c44 <init_mixer>:

void init_mixer(struct mixer_ctrl *mix, alt_u32 Background_Width, alt_u32 Background_Height)
{
    8c44:	defff704 	addi	sp,sp,-36
    8c48:	de00012e 	bgeu	sp,et,8c50 <init_mixer+0xc>
    8c4c:	003b68fa 	trap	3
    8c50:	dfc00815 	stw	ra,32(sp)
    8c54:	df000715 	stw	fp,28(sp)
    8c58:	df000704 	addi	fp,sp,28
    8c5c:	e13ffd15 	stw	r4,-12(fp)
    8c60:	e17ffe15 	stw	r5,-8(fp)
    8c64:	e1bfff15 	stw	r6,-4(fp)
	mix->Background_Height = Background_Height;
    8c68:	e0bffd17 	ldw	r2,-12(fp)
    8c6c:	e0ffff17 	ldw	r3,-4(fp)
    8c70:	10c00415 	stw	r3,16(r2)
	mix->Background_Width = Background_Width;
    8c74:	e0bffd17 	ldw	r2,-12(fp)
    8c78:	e0fffe17 	ldw	r3,-8(fp)
    8c7c:	10c00315 	stw	r3,12(r2)
	set_mixer_background(mix, 254, 97, 0);
    8c80:	000f883a 	mov	r7,zero
    8c84:	01801844 	movi	r6,97
    8c88:	01403f84 	movi	r5,254
    8c8c:	e13ffd17 	ldw	r4,-12(fp)
    8c90:	0008be80 	call	8be8 <set_mixer_background>
	for (alt_u32 i = 0; i < 4; i++)
    8c94:	e03ffc15 	stw	zero,-16(fp)
    8c98:	00001106 	br	8ce0 <init_mixer+0x9c>
		set_layer_cfg(&mix->layer_config[i], i, 0, 0, 0, 0, 0);
    8c9c:	01400504 	movi	r5,20
    8ca0:	e13ffc17 	ldw	r4,-16(fp)
    8ca4:	000a42c0 	call	a42c <__mulsi3>
    8ca8:	10800804 	addi	r2,r2,32
    8cac:	e0fffd17 	ldw	r3,-12(fp)
    8cb0:	1885883a 	add	r2,r3,r2
    8cb4:	d8000215 	stw	zero,8(sp)
    8cb8:	d8000115 	stw	zero,4(sp)
    8cbc:	d8000015 	stw	zero,0(sp)
    8cc0:	000f883a 	mov	r7,zero
    8cc4:	000d883a 	mov	r6,zero
    8cc8:	e17ffc17 	ldw	r5,-16(fp)
    8ccc:	1009883a 	mov	r4,r2
    8cd0:	0008b0c0 	call	8b0c <set_layer_cfg>
void init_mixer(struct mixer_ctrl *mix, alt_u32 Background_Width, alt_u32 Background_Height)
{
	mix->Background_Height = Background_Height;
	mix->Background_Width = Background_Width;
	set_mixer_background(mix, 254, 97, 0);
	for (alt_u32 i = 0; i < 4; i++)
    8cd4:	e0bffc17 	ldw	r2,-16(fp)
    8cd8:	10800044 	addi	r2,r2,1
    8cdc:	e0bffc15 	stw	r2,-16(fp)
    8ce0:	e0bffc17 	ldw	r2,-16(fp)
    8ce4:	10800130 	cmpltui	r2,r2,4
    8ce8:	103fec1e 	bne	r2,zero,8c9c <_gp+0xffff3a3e>
		set_layer_cfg(&mix->layer_config[i], i, 0, 0, 0, 0, 0);
	mix->Control = 1;
    8cec:	e0bffd17 	ldw	r2,-12(fp)
    8cf0:	00c00044 	movi	r3,1
    8cf4:	10c00015 	stw	r3,0(r2)
}
    8cf8:	0001883a 	nop
    8cfc:	e037883a 	mov	sp,fp
    8d00:	dfc00117 	ldw	ra,4(sp)
    8d04:	df000017 	ldw	fp,0(sp)
    8d08:	dec00204 	addi	sp,sp,8
    8d0c:	f800283a 	ret

00008d10 <set_switch>:

void set_switch(struct switch_ctrl *sw, alt_u32 Control, alt_u32 Out0, alt_u32 Out1)
{
    8d10:	defffb04 	addi	sp,sp,-20
    8d14:	de00012e 	bgeu	sp,et,8d1c <set_switch+0xc>
    8d18:	003b68fa 	trap	3
    8d1c:	df000415 	stw	fp,16(sp)
    8d20:	df000404 	addi	fp,sp,16
    8d24:	e13ffc15 	stw	r4,-16(fp)
    8d28:	e17ffd15 	stw	r5,-12(fp)
    8d2c:	e1bffe15 	stw	r6,-8(fp)
    8d30:	e1ffff15 	stw	r7,-4(fp)
	sw->Control = Control;
    8d34:	e0bffc17 	ldw	r2,-16(fp)
    8d38:	e0fffd17 	ldw	r3,-12(fp)
    8d3c:	10c00015 	stw	r3,0(r2)
	sw->Output_Ctrl[0] = Out0;
    8d40:	e0bffc17 	ldw	r2,-16(fp)
    8d44:	e0fffe17 	ldw	r3,-8(fp)
    8d48:	10c00415 	stw	r3,16(r2)
	sw->Output_Ctrl[1] = Out1;
    8d4c:	e0bffc17 	ldw	r2,-16(fp)
    8d50:	e0ffff17 	ldw	r3,-4(fp)
    8d54:	10c00515 	stw	r3,20(r2)
	sw->Output_Switch = 1;
    8d58:	e0bffc17 	ldw	r2,-16(fp)
    8d5c:	00c00044 	movi	r3,1
    8d60:	10c00315 	stw	r3,12(r2)
}
    8d64:	0001883a 	nop
    8d68:	e037883a 	mov	sp,fp
    8d6c:	df000017 	ldw	fp,0(sp)
    8d70:	dec00104 	addi	sp,sp,4
    8d74:	f800283a 	ret

00008d78 <get_status>:

alt_u32 get_status(alt_u32 *ptr)
{
    8d78:	defffe04 	addi	sp,sp,-8
    8d7c:	de00012e 	bgeu	sp,et,8d84 <get_status+0xc>
    8d80:	003b68fa 	trap	3
    8d84:	df000115 	stw	fp,4(sp)
    8d88:	df000104 	addi	fp,sp,4
    8d8c:	e13fff15 	stw	r4,-4(fp)
	return *(ptr++);
    8d90:	e0bfff17 	ldw	r2,-4(fp)
    8d94:	10c00104 	addi	r3,r2,4
    8d98:	e0ffff15 	stw	r3,-4(fp)
    8d9c:	10800017 	ldw	r2,0(r2)
}
    8da0:	e037883a 	mov	sp,fp
    8da4:	df000017 	ldw	fp,0(sp)
    8da8:	dec00104 	addi	sp,sp,4
    8dac:	f800283a 	ret

00008db0 <init_switch>:

void init_switch(struct switch_ctrl *sw)
{
    8db0:	defffe04 	addi	sp,sp,-8
    8db4:	de00012e 	bgeu	sp,et,8dbc <init_switch+0xc>
    8db8:	003b68fa 	trap	3
    8dbc:	df000115 	stw	fp,4(sp)
    8dc0:	df000104 	addi	fp,sp,4
    8dc4:	e13fff15 	stw	r4,-4(fp)
	sw->Control = 1;
    8dc8:	e0bfff17 	ldw	r2,-4(fp)
    8dcc:	00c00044 	movi	r3,1
    8dd0:	10c00015 	stw	r3,0(r2)
}
    8dd4:	0001883a 	nop
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	df000017 	ldw	fp,0(sp)
    8de0:	dec00104 	addi	sp,sp,4
    8de4:	f800283a 	ret

00008de8 <set_CVO_1024>:

void set_CVO_1024(struct cvo_ctrl *cvo)
{
    8de8:	defffe04 	addi	sp,sp,-8
    8dec:	de00012e 	bgeu	sp,et,8df4 <set_CVO_1024+0xc>
    8df0:	003b68fa 	trap	3
    8df4:	df000115 	stw	fp,4(sp)
    8df8:	df000104 	addi	fp,sp,4
    8dfc:	e13fff15 	stw	r4,-4(fp)
	cvo->Bank_Select = 1;
    8e00:	e0bfff17 	ldw	r2,-4(fp)
    8e04:	00c00044 	movi	r3,1
    8e08:	10c00415 	stw	r3,16(r2)
	cvo->ModeX_Valid = 0;
    8e0c:	e0bfff17 	ldw	r2,-4(fp)
    8e10:	10001e15 	stw	zero,120(r2)

	cvo->ModeX_Control = 0;
    8e14:	e0bfff17 	ldw	r2,-4(fp)
    8e18:	10000515 	stw	zero,20(r2)

	// Dimensions
	cvo->ModeX_Sample_Count = 1024;
    8e1c:	e0bfff17 	ldw	r2,-4(fp)
    8e20:	00c10004 	movi	r3,1024
    8e24:	10c00615 	stw	r3,24(r2)
	cvo->ModeX_F0_Line_Count = 768;
    8e28:	e0bfff17 	ldw	r2,-4(fp)
    8e2c:	00c0c004 	movi	r3,768
    8e30:	10c00715 	stw	r3,28(r2)
	cvo->ModeX_F1_Line_Count = 0;
    8e34:	e0bfff17 	ldw	r2,-4(fp)
    8e38:	10000815 	stw	zero,32(r2)

	// Blanking
	cvo->ModeX_Horizontal_Front_Porch = 24;
    8e3c:	e0bfff17 	ldw	r2,-4(fp)
    8e40:	00c00604 	movi	r3,24
    8e44:	10c00915 	stw	r3,36(r2)
	cvo->ModeX_Horizontal_Sync_Length = 136;
    8e48:	e0bfff17 	ldw	r2,-4(fp)
    8e4c:	00c02204 	movi	r3,136
    8e50:	10c00a15 	stw	r3,40(r2)
	cvo->ModeX_Horizontal_Blanking = 320;
    8e54:	e0bfff17 	ldw	r2,-4(fp)
    8e58:	00c05004 	movi	r3,320
    8e5c:	10c00b15 	stw	r3,44(r2)
	cvo->ModeX_Vertical_Front_Porch = 3;
    8e60:	e0bfff17 	ldw	r2,-4(fp)
    8e64:	00c000c4 	movi	r3,3
    8e68:	10c00c15 	stw	r3,48(r2)
	cvo->ModeX_Vertical_Sync_Length = 6;
    8e6c:	e0bfff17 	ldw	r2,-4(fp)
    8e70:	00c00184 	movi	r3,6
    8e74:	10c00d15 	stw	r3,52(r2)
	cvo->ModeX_Vertical_Blanking = 38;
    8e78:	e0bfff17 	ldw	r2,-4(fp)
    8e7c:	00c00984 	movi	r3,38
    8e80:	10c00e15 	stw	r3,56(r2)
	cvo->ModeX_F0_Vertical_Front_Porch = 0;
    8e84:	e0bfff17 	ldw	r2,-4(fp)
    8e88:	10000f15 	stw	zero,60(r2)
	cvo->ModeX_F0_Vertical_Sync_Length = 0;
    8e8c:	e0bfff17 	ldw	r2,-4(fp)
    8e90:	10001015 	stw	zero,64(r2)
	cvo->ModeX_F0_Vertical_Blanking = 0;
    8e94:	e0bfff17 	ldw	r2,-4(fp)
    8e98:	10001115 	stw	zero,68(r2)

	// Active data start
	cvo->ModeX_Active_Picture_Line = 0; // �� �� ���, ��� � 135
    8e9c:	e0bfff17 	ldw	r2,-4(fp)
    8ea0:	10001215 	stw	zero,72(r2)

	// Field toggle parameterization
	cvo->ModeX_F0_Vertical_Rising = 0;
    8ea4:	e0bfff17 	ldw	r2,-4(fp)
    8ea8:	10001315 	stw	zero,76(r2)
	cvo->ModeX_Field_Rising = 0;
    8eac:	e0bfff17 	ldw	r2,-4(fp)
    8eb0:	10001415 	stw	zero,80(r2)
	cvo->ModeX_Field_Falling = 0;
    8eb4:	e0bfff17 	ldw	r2,-4(fp)
    8eb8:	10001515 	stw	zero,84(r2)

	// Ancillary data insertion
	cvo->ModeX_Ancillary_Line = 0;
    8ebc:	e0bfff17 	ldw	r2,-4(fp)
    8ec0:	10001a15 	stw	zero,104(r2)
	cvo->ModeX_F0_Ancillary_Line = 0;
    8ec4:	e0bfff17 	ldw	r2,-4(fp)
    8ec8:	10001b15 	stw	zero,108(r2)

	// h_sync/v_sync polarity
	cvo->ModeX_HSync_Polarity = 0;
    8ecc:	e0bfff17 	ldw	r2,-4(fp)
    8ed0:	10001c15 	stw	zero,112(r2)
	cvo->ModeX_VSync_Polarity = 0;
    8ed4:	e0bfff17 	ldw	r2,-4(fp)
    8ed8:	10001d15 	stw	zero,116(r2)

	// Genlock params
	cvo->ModeX_Standart = 0;
    8edc:	e0bfff17 	ldw	r2,-4(fp)
    8ee0:	10001615 	stw	zero,88(r2)
	cvo->ModeX_SOF_Sample = 0;
    8ee4:	e0bfff17 	ldw	r2,-4(fp)
    8ee8:	10001715 	stw	zero,92(r2)
	cvo->ModeX_SOF_Line = 0;
    8eec:	e0bfff17 	ldw	r2,-4(fp)
    8ef0:	10001815 	stw	zero,96(r2)
	cvo->ModeX_Vcoclk_Divider = 0;
    8ef4:	e0bfff17 	ldw	r2,-4(fp)
    8ef8:	10001915 	stw	zero,100(r2)

	// Revalidate the bank
	cvo->ModeX_Valid = 1;
    8efc:	e0bfff17 	ldw	r2,-4(fp)
    8f00:	00c00044 	movi	r3,1
    8f04:	10c01e15 	stw	r3,120(r2)

	cvo->Control = 1;
    8f08:	e0bfff17 	ldw	r2,-4(fp)
    8f0c:	00c00044 	movi	r3,1
    8f10:	10c00015 	stw	r3,0(r2)
}
    8f14:	0001883a 	nop
    8f18:	e037883a 	mov	sp,fp
    8f1c:	df000017 	ldw	fp,0(sp)
    8f20:	dec00104 	addi	sp,sp,4
    8f24:	f800283a 	ret

00008f28 <update_switch>:

void update_switch(struct switch_ctrl *sw, alt_u32 out_port, alt_u32 in_port)
{
    8f28:	defffc04 	addi	sp,sp,-16
    8f2c:	de00012e 	bgeu	sp,et,8f34 <update_switch+0xc>
    8f30:	003b68fa 	trap	3
    8f34:	df000315 	stw	fp,12(sp)
    8f38:	df000304 	addi	fp,sp,12
    8f3c:	e13ffd15 	stw	r4,-12(fp)
    8f40:	e17ffe15 	stw	r5,-8(fp)
    8f44:	e1bfff15 	stw	r6,-4(fp)
	sw->Output_Ctrl[out_port] = 1 << in_port;
    8f48:	00c00044 	movi	r3,1
    8f4c:	e0bfff17 	ldw	r2,-4(fp)
    8f50:	1884983a 	sll	r2,r3,r2
    8f54:	1009883a 	mov	r4,r2
    8f58:	e0fffd17 	ldw	r3,-12(fp)
    8f5c:	e0bffe17 	ldw	r2,-8(fp)
    8f60:	10800104 	addi	r2,r2,4
    8f64:	1085883a 	add	r2,r2,r2
    8f68:	1085883a 	add	r2,r2,r2
    8f6c:	1885883a 	add	r2,r3,r2
    8f70:	11000015 	stw	r4,0(r2)
	sw->Output_Switch = 1;
    8f74:	e0bffd17 	ldw	r2,-12(fp)
    8f78:	00c00044 	movi	r3,1
    8f7c:	10c00315 	stw	r3,12(r2)
}
    8f80:	0001883a 	nop
    8f84:	e037883a 	mov	sp,fp
    8f88:	df000017 	ldw	fp,0(sp)
    8f8c:	dec00104 	addi	sp,sp,4
    8f90:	f800283a 	ret

00008f94 <set_CVO_1920>:

void set_CVO_1920(struct cvo_ctrl *cvo)
{
    8f94:	defffe04 	addi	sp,sp,-8
    8f98:	de00012e 	bgeu	sp,et,8fa0 <set_CVO_1920+0xc>
    8f9c:	003b68fa 	trap	3
    8fa0:	df000115 	stw	fp,4(sp)
    8fa4:	df000104 	addi	fp,sp,4
    8fa8:	e13fff15 	stw	r4,-4(fp)
	cvo->Bank_Select = 1;
    8fac:	e0bfff17 	ldw	r2,-4(fp)
    8fb0:	00c00044 	movi	r3,1
    8fb4:	10c00415 	stw	r3,16(r2)
	cvo->ModeX_Valid = 0;
    8fb8:	e0bfff17 	ldw	r2,-4(fp)
    8fbc:	10001e15 	stw	zero,120(r2)

	cvo->ModeX_Control = 0;
    8fc0:	e0bfff17 	ldw	r2,-4(fp)
    8fc4:	10000515 	stw	zero,20(r2)

	// Dimensions
	cvo->ModeX_Sample_Count = 1920;
    8fc8:	e0bfff17 	ldw	r2,-4(fp)
    8fcc:	00c1e004 	movi	r3,1920
    8fd0:	10c00615 	stw	r3,24(r2)
	cvo->ModeX_F0_Line_Count = 1080;
    8fd4:	e0bfff17 	ldw	r2,-4(fp)
    8fd8:	00c10e04 	movi	r3,1080
    8fdc:	10c00715 	stw	r3,28(r2)
	cvo->ModeX_F1_Line_Count = 0;
    8fe0:	e0bfff17 	ldw	r2,-4(fp)
    8fe4:	10000815 	stw	zero,32(r2)

	// Blanking
	cvo->ModeX_Horizontal_Front_Porch = 88; //88
    8fe8:	e0bfff17 	ldw	r2,-4(fp)
    8fec:	00c01604 	movi	r3,88
    8ff0:	10c00915 	stw	r3,36(r2)
	cvo->ModeX_Horizontal_Sync_Length = 44;
    8ff4:	e0bfff17 	ldw	r2,-4(fp)
    8ff8:	00c00b04 	movi	r3,44
    8ffc:	10c00a15 	stw	r3,40(r2)
	cvo->ModeX_Horizontal_Blanking = 280;
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	00c04604 	movi	r3,280
    9008:	10c00b15 	stw	r3,44(r2)
	cvo->ModeX_Vertical_Front_Porch = 4;
    900c:	e0bfff17 	ldw	r2,-4(fp)
    9010:	00c00104 	movi	r3,4
    9014:	10c00c15 	stw	r3,48(r2)
	cvo->ModeX_Vertical_Sync_Length = 5;
    9018:	e0bfff17 	ldw	r2,-4(fp)
    901c:	00c00144 	movi	r3,5
    9020:	10c00d15 	stw	r3,52(r2)
	cvo->ModeX_Vertical_Blanking = 45;
    9024:	e0bfff17 	ldw	r2,-4(fp)
    9028:	00c00b44 	movi	r3,45
    902c:	10c00e15 	stw	r3,56(r2)
	cvo->ModeX_F0_Vertical_Front_Porch = 0;
    9030:	e0bfff17 	ldw	r2,-4(fp)
    9034:	10000f15 	stw	zero,60(r2)
	cvo->ModeX_F0_Vertical_Sync_Length = 0;
    9038:	e0bfff17 	ldw	r2,-4(fp)
    903c:	10001015 	stw	zero,64(r2)
	cvo->ModeX_F0_Vertical_Blanking = 0;
    9040:	e0bfff17 	ldw	r2,-4(fp)
    9044:	10001115 	stw	zero,68(r2)

	// Active data start
	cvo->ModeX_Active_Picture_Line = 135; // �� �� ���, ��� � 135(42)
    9048:	e0bfff17 	ldw	r2,-4(fp)
    904c:	00c021c4 	movi	r3,135
    9050:	10c01215 	stw	r3,72(r2)

	// Field toggle parameterization
	cvo->ModeX_F0_Vertical_Rising = 0;
    9054:	e0bfff17 	ldw	r2,-4(fp)
    9058:	10001315 	stw	zero,76(r2)
	cvo->ModeX_Field_Rising = 0;
    905c:	e0bfff17 	ldw	r2,-4(fp)
    9060:	10001415 	stw	zero,80(r2)
	cvo->ModeX_Field_Falling = 0;
    9064:	e0bfff17 	ldw	r2,-4(fp)
    9068:	10001515 	stw	zero,84(r2)

	// Ancillary data insertion
	cvo->ModeX_Ancillary_Line = 10;
    906c:	e0bfff17 	ldw	r2,-4(fp)
    9070:	00c00284 	movi	r3,10
    9074:	10c01a15 	stw	r3,104(r2)
	cvo->ModeX_F0_Ancillary_Line = 0;
    9078:	e0bfff17 	ldw	r2,-4(fp)
    907c:	10001b15 	stw	zero,108(r2)

	// h_sync/v_sync polarity
	cvo->ModeX_HSync_Polarity = 0;
    9080:	e0bfff17 	ldw	r2,-4(fp)
    9084:	10001c15 	stw	zero,112(r2)
	cvo->ModeX_VSync_Polarity = 0;
    9088:	e0bfff17 	ldw	r2,-4(fp)
    908c:	10001d15 	stw	zero,116(r2)

	// Genlock params
	cvo->ModeX_Standart = 0;
    9090:	e0bfff17 	ldw	r2,-4(fp)
    9094:	10001615 	stw	zero,88(r2)
	cvo->ModeX_SOF_Sample = 0;
    9098:	e0bfff17 	ldw	r2,-4(fp)
    909c:	10001715 	stw	zero,92(r2)
	cvo->ModeX_SOF_Line = 0;
    90a0:	e0bfff17 	ldw	r2,-4(fp)
    90a4:	10001815 	stw	zero,96(r2)
	cvo->ModeX_Vcoclk_Divider = 0;
    90a8:	e0bfff17 	ldw	r2,-4(fp)
    90ac:	10001915 	stw	zero,100(r2)

	// Revalidate the bank
	cvo->ModeX_Valid = 1;
    90b0:	e0bfff17 	ldw	r2,-4(fp)
    90b4:	00c00044 	movi	r3,1
    90b8:	10c01e15 	stw	r3,120(r2)

	cvo->Control = 1;
    90bc:	e0bfff17 	ldw	r2,-4(fp)
    90c0:	00c00044 	movi	r3,1
    90c4:	10c00015 	stw	r3,0(r2)
}
    90c8:	0001883a 	nop
    90cc:	e037883a 	mov	sp,fp
    90d0:	df000017 	ldw	fp,0(sp)
    90d4:	dec00104 	addi	sp,sp,4
    90d8:	f800283a 	ret

000090dc <init_cvo>:

void init_cvo(struct cvo_ctrl *cvo, alt_u32 mode)
{
    90dc:	defffc04 	addi	sp,sp,-16
    90e0:	de00012e 	bgeu	sp,et,90e8 <init_cvo+0xc>
    90e4:	003b68fa 	trap	3
    90e8:	dfc00315 	stw	ra,12(sp)
    90ec:	df000215 	stw	fp,8(sp)
    90f0:	df000204 	addi	fp,sp,8
    90f4:	e13ffe15 	stw	r4,-8(fp)
    90f8:	e17fff15 	stw	r5,-4(fp)
	cvo->Control = 1;
    90fc:	e0bffe17 	ldw	r2,-8(fp)
    9100:	00c00044 	movi	r3,1
    9104:	10c00015 	stw	r3,0(r2)
	if (mode == 0)
    9108:	e0bfff17 	ldw	r2,-4(fp)
    910c:	1000031e 	bne	r2,zero,911c <init_cvo+0x40>
		set_CVO_1024(cvo);
    9110:	e13ffe17 	ldw	r4,-8(fp)
    9114:	0008de80 	call	8de8 <set_CVO_1024>
	else
		set_CVO_1920(cvo);
}
    9118:	00000206 	br	9124 <init_cvo+0x48>
{
	cvo->Control = 1;
	if (mode == 0)
		set_CVO_1024(cvo);
	else
		set_CVO_1920(cvo);
    911c:	e13ffe17 	ldw	r4,-8(fp)
    9120:	0008f940 	call	8f94 <set_CVO_1920>
}
    9124:	0001883a 	nop
    9128:	e037883a 	mov	sp,fp
    912c:	dfc00117 	ldw	ra,4(sp)
    9130:	df000017 	ldw	fp,0(sp)
    9134:	dec00204 	addi	sp,sp,8
    9138:	f800283a 	ret

0000913c <main>:
volatile static alt_u8  edp_timer;
volatile static alt_u16 layer_timer[2];
volatile static alt_u8 heart, heart_bit;

int main()
{
    913c:	defffa04 	addi	sp,sp,-24
    9140:	de00012e 	bgeu	sp,et,9148 <main+0xc>
    9144:	003b68fa 	trap	3
    9148:	dfc00515 	stw	ra,20(sp)
    914c:	df000415 	stw	fp,16(sp)
    9150:	dc400315 	stw	r17,12(sp)
    9154:	dc000215 	stw	r16,8(sp)
    9158:	df000404 	addi	fp,sp,16

  while( 1 ) {

    edp_timer      = 0;
    915c:	d02012c5 	stb	zero,-32693(gp)
    layer_timer[0] = 0;
    9160:	d020130d 	sth	zero,-32692(gp)
    layer_timer[1] = 0;
    9164:	d020138d 	sth	zero,-32690(gp)
    heart          = 0;
    9168:	d0201405 	stb	zero,-32688(gp)
    heart_bit      = 0;
    916c:	d0201445 	stb	zero,-32687(gp)
    IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, 0xFFFFFFFF );
    9170:	00ffffc4 	movi	r3,-1
    9174:	00800074 	movhi	r2,1
    9178:	10800504 	addi	r2,r2,20
    917c:	10c00035 	stwio	r3,0(r2)
    usleep( 10000 );
    9180:	0109c404 	movi	r4,10000
    9184:	000c7740 	call	c774 <usleep>

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_IP_RESET_N );
    9188:	00c00834 	movhi	r3,32
    918c:	00800074 	movhi	r2,1
    9190:	10800404 	addi	r2,r2,16
    9194:	10c00035 	stwio	r3,0(r2)
    usleep( 400000 );
    9198:	010001b4 	movhi	r4,6
    919c:	2106a004 	addi	r4,r4,6784
    91a0:	000c7740 	call	c774 <usleep>

    lcd_type = ( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_LCD_SIZE_MASK ) >> GPIO_LCD_SIZE_SHIFT );
    91a4:	00800074 	movhi	r2,1
    91a8:	10800037 	ldwio	r2,0(r2)
    91ac:	1080032c 	andhi	r2,r2,12
    91b0:	1005d4ba 	srai	r2,r2,18
    91b4:	d0a01285 	stb	r2,-32694(gp)

    if( lcd_type == MFD_15INCH_TYPE )
    91b8:	d0a01283 	ldbu	r2,-32694(gp)
    91bc:	10803fcc 	andi	r2,r2,255
    91c0:	10800098 	cmpnei	r2,r2,2
    91c4:	1000051e 	bne	r2,zero,91dc <main+0xa0>
      i2c_write_array( si5332_fhd_registers, SI5332_FHD_NUM_REGS );
    91c8:	01401184 	movi	r5,70
    91cc:	01000074 	movhi	r4,1
    91d0:	21328404 	addi	r4,r4,-13808
    91d4:	00081f80 	call	81f8 <i2c_write_array>
    91d8:	00001006 	br	921c <main+0xe0>
    else if( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) )
    91dc:	d0a01283 	ldbu	r2,-32694(gp)
    91e0:	10803fcc 	andi	r2,r2,255
    91e4:	10800060 	cmpeqi	r2,r2,1
    91e8:	1000031e 	bne	r2,zero,91f8 <main+0xbc>
    91ec:	d0a01283 	ldbu	r2,-32694(gp)
    91f0:	10803fcc 	andi	r2,r2,255
    91f4:	1000051e 	bne	r2,zero,920c <main+0xd0>
      i2c_write_array( si5332_xga_registers, SI5332_XGA_NUM_REGS );
    91f8:	01400e44 	movi	r5,57
    91fc:	01000074 	movhi	r4,1
    9200:	2132b884 	addi	r4,r4,-13598
    9204:	00081f80 	call	81f8 <i2c_write_array>
    9208:	00000406 	br	921c <main+0xe0>
    else
      i2c_write_array( si5332_vga_registers, SI5332_VGA_NUM_REGS );
    920c:	01400e44 	movi	r5,57
    9210:	01000074 	movhi	r4,1
    9214:	2132e344 	addi	r4,r4,-13427
    9218:	00081f80 	call	81f8 <i2c_write_array>
    usleep( 400000 );
    921c:	010001b4 	movhi	r4,6
    9220:	2106a004 	addi	r4,r4,6784
    9224:	000c7740 	call	c774 <usleep>

    if( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED ) &&
    9228:	00800074 	movhi	r2,1
    922c:	10800037 	ldwio	r2,0(r2)
    9230:	1081000c 	andi	r2,r2,1024
    9234:	10047b26 	beq	r2,zero,a424 <main+0x12e8>
        ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED ) )
    9238:	00800074 	movhi	r2,1
    923c:	10800037 	ldwio	r2,0(r2)
    9240:	1082000c 	andi	r2,r2,2048
      i2c_write_array( si5332_xga_registers, SI5332_XGA_NUM_REGS );
    else
      i2c_write_array( si5332_vga_registers, SI5332_VGA_NUM_REGS );
    usleep( 400000 );

    if( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED ) &&
    9244:	10047726 	beq	r2,zero,a424 <main+0x12e8>
        ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED ) )
      IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_DDR_BOT_GLOBAL_RESET | GPIO_DDR_TOP_GLOBAL_RESET );
    9248:	00c06034 	movhi	r3,384
    924c:	00800074 	movhi	r2,1
    9250:	10800404 	addi	r2,r2,16
    9254:	10c00035 	stwio	r3,0(r2)
    else
      continue;
    usleep( 400000 );
    9258:	010001b4 	movhi	r4,6
    925c:	2106a004 	addi	r4,r4,6784
    9260:	000c7740 	call	c774 <usleep>

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_DDR_BOT_SOFT_RESET | GPIO_DDR_TOP_SOFT_RESET );
    9264:	00c18034 	movhi	r3,1536
    9268:	00800074 	movhi	r2,1
    926c:	10800404 	addi	r2,r2,16
    9270:	10c00035 	stwio	r3,0(r2)
    usleep( 200000 );
    9274:	010000f4 	movhi	r4,3
    9278:	21035004 	addi	r4,r4,3392
    927c:	000c7740 	call	c774 <usleep>

    shared_ram0->cvi[0].control = 1;
    9280:	d0a01197 	ldw	r2,-32698(gp)
    9284:	00c00044 	movi	r3,1
    9288:	10c00415 	stw	r3,16(r2)
    shared_ram0->cvi[1].control = 1;
    928c:	d0a01197 	ldw	r2,-32698(gp)
    9290:	00c00044 	movi	r3,1
    9294:	10c00815 	stw	r3,32(r2)
    shared_ram0->cvi[2].control = 1;
    9298:	d0a01197 	ldw	r2,-32698(gp)
    929c:	00c00044 	movi	r3,1
    92a0:	10c00c15 	stw	r3,48(r2)
    shared_ram0->cvi[3].control = 1;
    92a4:	d0a01197 	ldw	r2,-32698(gp)
    92a8:	00c00044 	movi	r3,1
    92ac:	10c01015 	stw	r3,64(r2)
    shared_ram0->cvi[4].control = 1;
    92b0:	d0a01197 	ldw	r2,-32698(gp)
    92b4:	00c00044 	movi	r3,1
    92b8:	10c01415 	stw	r3,80(r2)

    shared_ram0->sw[0].control   = 1;
    92bc:	d0a01197 	ldw	r2,-32698(gp)
    92c0:	00c00044 	movi	r3,1
    92c4:	10c01815 	stw	r3,96(r2)
    shared_ram0->sw[0].output[0] = 2;
    92c8:	d0a01197 	ldw	r2,-32698(gp)
    92cc:	00c00084 	movi	r3,2
    92d0:	10c01a15 	stw	r3,104(r2)
    shared_ram0->sw[0].output[1] = 4;
    92d4:	d0a01197 	ldw	r2,-32698(gp)
    92d8:	00c00104 	movi	r3,4
    92dc:	10c01b15 	stw	r3,108(r2)

    shared_ram0->clp[0].control  = 1;
    92e0:	d0a01197 	ldw	r2,-32698(gp)
    92e4:	00c00044 	movi	r3,1
    92e8:	10c03c15 	stw	r3,240(r2)
    shared_ram0->clp[0].offset.x = 0;
    92ec:	d0a01197 	ldw	r2,-32698(gp)
    92f0:	10003d8d 	sth	zero,246(r2)
    shared_ram0->clp[0].offset.y = 0;
    92f4:	d0a01197 	ldw	r2,-32698(gp)
    92f8:	10003d0d 	sth	zero,244(r2)
    shared_ram0->clp[0].clip.x   = 0;
    92fc:	d0a01197 	ldw	r2,-32698(gp)
    9300:	10003e8d 	sth	zero,250(r2)
    shared_ram0->clp[0].clip.y   = 0;
    9304:	d0a01197 	ldw	r2,-32698(gp)
    9308:	10003e0d 	sth	zero,248(r2)
    shared_ram0->clp[1].control  = 1;
    930c:	d0a01197 	ldw	r2,-32698(gp)
    9310:	00c00044 	movi	r3,1
    9314:	10c04015 	stw	r3,256(r2)
    shared_ram0->clp[1].offset.x = 0;
    9318:	d0a01197 	ldw	r2,-32698(gp)
    931c:	1000418d 	sth	zero,262(r2)
    shared_ram0->clp[1].offset.y = 0;
    9320:	d0a01197 	ldw	r2,-32698(gp)
    9324:	1000410d 	sth	zero,260(r2)
    shared_ram0->clp[1].clip.x   = 0;
    9328:	d0a01197 	ldw	r2,-32698(gp)
    932c:	1000428d 	sth	zero,266(r2)
    shared_ram0->clp[1].clip.y   = 0;
    9330:	d0a01197 	ldw	r2,-32698(gp)
    9334:	1000420d 	sth	zero,264(r2)

    shared_ram0->sc[0].control      = 1;
    9338:	d0a01197 	ldw	r2,-32698(gp)
    933c:	00c00044 	movi	r3,1
    9340:	10c01c15 	stw	r3,112(r2)
    shared_ram0->sc[0].resolution.x = ( lcd_type == MFD_15INCH_TYPE ) ? 1920 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ? 1024 : 640;
    9344:	d0e01197 	ldw	r3,-32698(gp)
    9348:	d0a01283 	ldbu	r2,-32694(gp)
    934c:	10803fcc 	andi	r2,r2,255
    9350:	10800098 	cmpnei	r2,r2,2
    9354:	10000b26 	beq	r2,zero,9384 <main+0x248>
    9358:	d0a01283 	ldbu	r2,-32694(gp)
    935c:	10803fcc 	andi	r2,r2,255
    9360:	10800060 	cmpeqi	r2,r2,1
    9364:	1000031e 	bne	r2,zero,9374 <main+0x238>
    9368:	d0a01283 	ldbu	r2,-32694(gp)
    936c:	10803fcc 	andi	r2,r2,255
    9370:	1000021e 	bne	r2,zero,937c <main+0x240>
    9374:	00810004 	movi	r2,1024
    9378:	00000306 	br	9388 <main+0x24c>
    937c:	0080a004 	movi	r2,640
    9380:	00000106 	br	9388 <main+0x24c>
    9384:	0081e004 	movi	r2,1920
    9388:	18801e8d 	sth	r2,122(r3)
    shared_ram0->sc[0].resolution.y = ( lcd_type == MFD_15INCH_TYPE ) ? 1080 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ?  768 : 480;
    938c:	d0e01197 	ldw	r3,-32698(gp)
    9390:	d0a01283 	ldbu	r2,-32694(gp)
    9394:	10803fcc 	andi	r2,r2,255
    9398:	108000a0 	cmpeqi	r2,r2,2
    939c:	10000b1e 	bne	r2,zero,93cc <main+0x290>
    93a0:	d0a01283 	ldbu	r2,-32694(gp)
    93a4:	10803fcc 	andi	r2,r2,255
    93a8:	10800060 	cmpeqi	r2,r2,1
    93ac:	1000031e 	bne	r2,zero,93bc <main+0x280>
    93b0:	d0a01283 	ldbu	r2,-32694(gp)
    93b4:	10803fcc 	andi	r2,r2,255
    93b8:	1000021e 	bne	r2,zero,93c4 <main+0x288>
    93bc:	0080c004 	movi	r2,768
    93c0:	00000306 	br	93d0 <main+0x294>
    93c4:	00807804 	movi	r2,480
    93c8:	00000106 	br	93d0 <main+0x294>
    93cc:	00810e04 	movi	r2,1080
    93d0:	18801e0d 	sth	r2,120(r3)
    shared_ram0->sc[1].control      = 1;
    93d4:	d0a01197 	ldw	r2,-32698(gp)
    93d8:	00c00044 	movi	r3,1
    93dc:	10c02015 	stw	r3,128(r2)
    shared_ram0->sc[1].resolution.x = ( lcd_type == MFD_15INCH_TYPE ) ? 1920 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ? 1024 : 640;
    93e0:	d0e01197 	ldw	r3,-32698(gp)
    93e4:	d0a01283 	ldbu	r2,-32694(gp)
    93e8:	10803fcc 	andi	r2,r2,255
    93ec:	108000a0 	cmpeqi	r2,r2,2
    93f0:	10000b1e 	bne	r2,zero,9420 <main+0x2e4>
    93f4:	d0a01283 	ldbu	r2,-32694(gp)
    93f8:	10803fcc 	andi	r2,r2,255
    93fc:	10800060 	cmpeqi	r2,r2,1
    9400:	1000031e 	bne	r2,zero,9410 <main+0x2d4>
    9404:	d0a01283 	ldbu	r2,-32694(gp)
    9408:	10803fcc 	andi	r2,r2,255
    940c:	1000021e 	bne	r2,zero,9418 <main+0x2dc>
    9410:	00810004 	movi	r2,1024
    9414:	00000306 	br	9424 <main+0x2e8>
    9418:	0080a004 	movi	r2,640
    941c:	00000106 	br	9424 <main+0x2e8>
    9420:	0081e004 	movi	r2,1920
    9424:	1880228d 	sth	r2,138(r3)
    shared_ram0->sc[1].resolution.y = ( lcd_type == MFD_15INCH_TYPE ) ? 1080 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ?  768 : 480;
    9428:	d0e01197 	ldw	r3,-32698(gp)
    942c:	d0a01283 	ldbu	r2,-32694(gp)
    9430:	10803fcc 	andi	r2,r2,255
    9434:	108000a0 	cmpeqi	r2,r2,2
    9438:	10000b1e 	bne	r2,zero,9468 <main+0x32c>
    943c:	d0a01283 	ldbu	r2,-32694(gp)
    9440:	10803fcc 	andi	r2,r2,255
    9444:	10800060 	cmpeqi	r2,r2,1
    9448:	1000031e 	bne	r2,zero,9458 <main+0x31c>
    944c:	d0a01283 	ldbu	r2,-32694(gp)
    9450:	10803fcc 	andi	r2,r2,255
    9454:	1000021e 	bne	r2,zero,9460 <main+0x324>
    9458:	0080c004 	movi	r2,768
    945c:	00000306 	br	946c <main+0x330>
    9460:	00807804 	movi	r2,480
    9464:	00000106 	br	946c <main+0x330>
    9468:	00810e04 	movi	r2,1080
    946c:	1880220d 	sth	r2,136(r3)

    shared_ram0->mix[0].control           = 1;
    9470:	d0a01197 	ldw	r2,-32698(gp)
    9474:	00c00044 	movi	r3,1
    9478:	10c02815 	stw	r3,160(r2)
    shared_ram0->mix[0].resolution.x      = ( lcd_type == MFD_15INCH_TYPE ) ? 1920 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ? 1024 : 640;
    947c:	d0e01197 	ldw	r3,-32698(gp)
    9480:	d0a01283 	ldbu	r2,-32694(gp)
    9484:	10803fcc 	andi	r2,r2,255
    9488:	108000a0 	cmpeqi	r2,r2,2
    948c:	10000b1e 	bne	r2,zero,94bc <main+0x380>
    9490:	d0a01283 	ldbu	r2,-32694(gp)
    9494:	10803fcc 	andi	r2,r2,255
    9498:	10800060 	cmpeqi	r2,r2,1
    949c:	1000031e 	bne	r2,zero,94ac <main+0x370>
    94a0:	d0a01283 	ldbu	r2,-32694(gp)
    94a4:	10803fcc 	andi	r2,r2,255
    94a8:	1000021e 	bne	r2,zero,94b4 <main+0x378>
    94ac:	00810004 	movi	r2,1024
    94b0:	00000306 	br	94c0 <main+0x384>
    94b4:	0080a004 	movi	r2,640
    94b8:	00000106 	br	94c0 <main+0x384>
    94bc:	0081e004 	movi	r2,1920
    94c0:	18802a8d 	sth	r2,170(r3)
    shared_ram0->mix[0].resolution.y      = ( lcd_type == MFD_15INCH_TYPE ) ? 1080 : ( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) ) ?  768 : 480;
    94c4:	d0e01197 	ldw	r3,-32698(gp)
    94c8:	d0a01283 	ldbu	r2,-32694(gp)
    94cc:	10803fcc 	andi	r2,r2,255
    94d0:	108000a0 	cmpeqi	r2,r2,2
    94d4:	10000b1e 	bne	r2,zero,9504 <main+0x3c8>
    94d8:	d0a01283 	ldbu	r2,-32694(gp)
    94dc:	10803fcc 	andi	r2,r2,255
    94e0:	10800060 	cmpeqi	r2,r2,1
    94e4:	1000031e 	bne	r2,zero,94f4 <main+0x3b8>
    94e8:	d0a01283 	ldbu	r2,-32694(gp)
    94ec:	10803fcc 	andi	r2,r2,255
    94f0:	1000021e 	bne	r2,zero,94fc <main+0x3c0>
    94f4:	0080c004 	movi	r2,768
    94f8:	00000306 	br	9508 <main+0x3cc>
    94fc:	00807804 	movi	r2,480
    9500:	00000106 	br	9508 <main+0x3cc>
    9504:	00810e04 	movi	r2,1080
    9508:	18802a0d 	sth	r2,168(r3)
    shared_ram0->mix[0].background.red    = 0;
    950c:	d0a01197 	ldw	r2,-32698(gp)
    9510:	10002b45 	stb	zero,173(r2)
    shared_ram0->mix[0].background.green  = 0;
    9514:	d0a01197 	ldw	r2,-32698(gp)
    9518:	10002b85 	stb	zero,174(r2)
    shared_ram0->mix[0].background.blue   = 0;
    951c:	d0a01197 	ldw	r2,-32698(gp)
    9520:	10002bc5 	stb	zero,175(r2)
    shared_ram0->mix[0].layer[0].control  = 0;
    9524:	d0a01197 	ldw	r2,-32698(gp)
    9528:	10002c05 	stb	zero,176(r2)
    shared_ram0->mix[0].layer[0].position = 0;
    952c:	d0a01197 	ldw	r2,-32698(gp)
    9530:	10002c45 	stb	zero,177(r2)
    shared_ram0->mix[0].layer[0].alpha    = 0;
    9534:	d0a01197 	ldw	r2,-32698(gp)
    9538:	10002e05 	stb	zero,184(r2)
    shared_ram0->mix[0].layer[0].offset.x = 0;
    953c:	d0a01197 	ldw	r2,-32698(gp)
    9540:	10002d8d 	sth	zero,182(r2)
    shared_ram0->mix[0].layer[0].offset.y = 0;
    9544:	d0a01197 	ldw	r2,-32698(gp)
    9548:	10002d0d 	sth	zero,180(r2)
    shared_ram0->mix[0].layer[1].control  = 0;
    954c:	d0a01197 	ldw	r2,-32698(gp)
    9550:	10003005 	stb	zero,192(r2)
    shared_ram0->mix[0].layer[1].position = 1;
    9554:	d0a01197 	ldw	r2,-32698(gp)
    9558:	00c00044 	movi	r3,1
    955c:	10c03045 	stb	r3,193(r2)
    shared_ram0->mix[0].layer[1].alpha    = 0;
    9560:	d0a01197 	ldw	r2,-32698(gp)
    9564:	10003205 	stb	zero,200(r2)
    shared_ram0->mix[0].layer[1].offset.x = 0;
    9568:	d0a01197 	ldw	r2,-32698(gp)
    956c:	1000318d 	sth	zero,198(r2)
    shared_ram0->mix[0].layer[1].offset.y = 0;
    9570:	d0a01197 	ldw	r2,-32698(gp)
    9574:	1000310d 	sth	zero,196(r2)
    shared_ram0->mix[0].layer[2].control  = 1;
    9578:	d0a01197 	ldw	r2,-32698(gp)
    957c:	00c00044 	movi	r3,1
    9580:	10c03405 	stb	r3,208(r2)
    shared_ram0->mix[0].layer[2].position = 2;
    9584:	d0a01197 	ldw	r2,-32698(gp)
    9588:	00c00084 	movi	r3,2
    958c:	10c03445 	stb	r3,209(r2)
    shared_ram0->mix[0].layer[2].alpha    = 0;
    9590:	d0a01197 	ldw	r2,-32698(gp)
    9594:	10003605 	stb	zero,216(r2)
    shared_ram0->mix[0].layer[2].offset.x = 0;
    9598:	d0a01197 	ldw	r2,-32698(gp)
    959c:	1000358d 	sth	zero,214(r2)
    shared_ram0->mix[0].layer[2].offset.y = 0;
    95a0:	d0a01197 	ldw	r2,-32698(gp)
    95a4:	1000350d 	sth	zero,212(r2)

    shared_ram0->cvo[0].control = 1;
    95a8:	d0a01197 	ldw	r2,-32698(gp)
    95ac:	00c00044 	movi	r3,1
    95b0:	10c03815 	stw	r3,224(r2)

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvo_0
    if( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED ) &&
    95b4:	00800074 	movhi	r2,1
    95b8:	10800037 	ldwio	r2,0(r2)
    95bc:	1081000c 	andi	r2,r2,1024
    95c0:	10008c26 	beq	r2,zero,97f4 <main+0x6b8>
        ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED ) ) {
    95c4:	00800074 	movhi	r2,1
    95c8:	10800037 	ldwio	r2,0(r2)
    95cc:	1082000c 	andi	r2,r2,2048
    shared_ram0->mix[0].layer[2].offset.y = 0;

    shared_ram0->cvo[0].control = 1;

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvo_0
    if( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED ) &&
    95d0:	10008826 	beq	r2,zero,97f4 <main+0x6b8>
        ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED ) ) {
      cvo0->Control                       = 1;
    95d4:	d0a00c97 	ldw	r2,-32718(gp)
    95d8:	00c00044 	movi	r3,1
    95dc:	10c00015 	stw	r3,0(r2)
      cvo0->Bank_Select                   = 0;
    95e0:	d0a00c97 	ldw	r2,-32718(gp)
    95e4:	10000415 	stw	zero,16(r2)
      cvo0->ModeX_Valid                   = 0;
    95e8:	d0a00c97 	ldw	r2,-32718(gp)
    95ec:	10001e15 	stw	zero,120(r2)
      cvo0->ModeX_Control                 = 0;
    95f0:	d0a00c97 	ldw	r2,-32718(gp)
    95f4:	10000515 	stw	zero,20(r2)
      cvo0->ModeX_Sample_Count            = 1024;
    95f8:	d0a00c97 	ldw	r2,-32718(gp)
    95fc:	00c10004 	movi	r3,1024
    9600:	10c00615 	stw	r3,24(r2)
      cvo0->ModeX_F0_Line_Count           = 768;
    9604:	d0a00c97 	ldw	r2,-32718(gp)
    9608:	00c0c004 	movi	r3,768
    960c:	10c00715 	stw	r3,28(r2)
      cvo0->ModeX_F1_Line_Count           = 0;
    9610:	d0a00c97 	ldw	r2,-32718(gp)
    9614:	10000815 	stw	zero,32(r2)
      cvo0->ModeX_Horizontal_Front_Porch  = 24;
    9618:	d0a00c97 	ldw	r2,-32718(gp)
    961c:	00c00604 	movi	r3,24
    9620:	10c00915 	stw	r3,36(r2)
      cvo0->ModeX_Horizontal_Sync_Length  = 136;
    9624:	d0a00c97 	ldw	r2,-32718(gp)
    9628:	00c02204 	movi	r3,136
    962c:	10c00a15 	stw	r3,40(r2)
      cvo0->ModeX_Horizontal_Blanking     = 320;
    9630:	d0a00c97 	ldw	r2,-32718(gp)
    9634:	00c05004 	movi	r3,320
    9638:	10c00b15 	stw	r3,44(r2)
      cvo0->ModeX_Vertical_Front_Porch    = 3;
    963c:	d0a00c97 	ldw	r2,-32718(gp)
    9640:	00c000c4 	movi	r3,3
    9644:	10c00c15 	stw	r3,48(r2)
      cvo0->ModeX_Vertical_Sync_Length    = 6;
    9648:	d0a00c97 	ldw	r2,-32718(gp)
    964c:	00c00184 	movi	r3,6
    9650:	10c00d15 	stw	r3,52(r2)
      cvo0->ModeX_Vertical_Blanking       = 38;
    9654:	d0a00c97 	ldw	r2,-32718(gp)
    9658:	00c00984 	movi	r3,38
    965c:	10c00e15 	stw	r3,56(r2)
      cvo0->ModeX_F0_Vertical_Front_Porch = 0;
    9660:	d0a00c97 	ldw	r2,-32718(gp)
    9664:	10000f15 	stw	zero,60(r2)
      cvo0->ModeX_F0_Vertical_Sync_Length = 0;
    9668:	d0a00c97 	ldw	r2,-32718(gp)
    966c:	10001015 	stw	zero,64(r2)
      cvo0->ModeX_F0_Vertical_Blanking    = 0;
    9670:	d0a00c97 	ldw	r2,-32718(gp)
    9674:	10001115 	stw	zero,68(r2)
      cvo0->ModeX_Active_Picture_Line     = 135;
    9678:	d0a00c97 	ldw	r2,-32718(gp)
    967c:	00c021c4 	movi	r3,135
    9680:	10c01215 	stw	r3,72(r2)
      cvo0->ModeX_F0_Vertical_Rising      = 0;
    9684:	d0a00c97 	ldw	r2,-32718(gp)
    9688:	10001315 	stw	zero,76(r2)
      cvo0->ModeX_Field_Rising            = 0;
    968c:	d0a00c97 	ldw	r2,-32718(gp)
    9690:	10001415 	stw	zero,80(r2)
      cvo0->ModeX_Field_Falling           = 0;
    9694:	d0a00c97 	ldw	r2,-32718(gp)
    9698:	10001515 	stw	zero,84(r2)
      cvo0->ModeX_Standart                = 0;
    969c:	d0a00c97 	ldw	r2,-32718(gp)
    96a0:	10001615 	stw	zero,88(r2)
      cvo0->ModeX_SOF_Sample              = 0;
    96a4:	d0a00c97 	ldw	r2,-32718(gp)
    96a8:	10001715 	stw	zero,92(r2)
      cvo0->ModeX_SOF_Line                = 0;
    96ac:	d0a00c97 	ldw	r2,-32718(gp)
    96b0:	10001815 	stw	zero,96(r2)
      cvo0->ModeX_Vcoclk_Divider          = 0;
    96b4:	d0a00c97 	ldw	r2,-32718(gp)
    96b8:	10001915 	stw	zero,100(r2)
      cvo0->ModeX_Ancillary_Line          = 0;
    96bc:	d0a00c97 	ldw	r2,-32718(gp)
    96c0:	10001a15 	stw	zero,104(r2)
      cvo0->ModeX_F0_Ancillary_Line       = 0;
    96c4:	d0a00c97 	ldw	r2,-32718(gp)
    96c8:	10001b15 	stw	zero,108(r2)
      cvo0->ModeX_HSync_Polarity          = 0;
    96cc:	d0a00c97 	ldw	r2,-32718(gp)
    96d0:	10001c15 	stw	zero,112(r2)
      cvo0->ModeX_VSync_Polarity          = 0;
    96d4:	d0a00c97 	ldw	r2,-32718(gp)
    96d8:	10001d15 	stw	zero,116(r2)
      cvo0->ModeX_Valid                   = 1;
    96dc:	d0a00c97 	ldw	r2,-32718(gp)
    96e0:	00c00044 	movi	r3,1
    96e4:	10c01e15 	stw	r3,120(r2)
      cvo0->Bank_Select                   = 1;
    96e8:	d0a00c97 	ldw	r2,-32718(gp)
    96ec:	00c00044 	movi	r3,1
    96f0:	10c00415 	stw	r3,16(r2)
      cvo0->ModeX_Valid                   = 0;
    96f4:	d0a00c97 	ldw	r2,-32718(gp)
    96f8:	10001e15 	stw	zero,120(r2)
      cvo0->ModeX_Control                 = 0;
    96fc:	d0a00c97 	ldw	r2,-32718(gp)
    9700:	10000515 	stw	zero,20(r2)
      cvo0->ModeX_Sample_Count            = 1920;
    9704:	d0a00c97 	ldw	r2,-32718(gp)
    9708:	00c1e004 	movi	r3,1920
    970c:	10c00615 	stw	r3,24(r2)
      cvo0->ModeX_F0_Line_Count           = 1080;
    9710:	d0a00c97 	ldw	r2,-32718(gp)
    9714:	00c10e04 	movi	r3,1080
    9718:	10c00715 	stw	r3,28(r2)
      cvo0->ModeX_F1_Line_Count           = 0;
    971c:	d0a00c97 	ldw	r2,-32718(gp)
    9720:	10000815 	stw	zero,32(r2)
      cvo0->ModeX_Horizontal_Front_Porch  = 88;
    9724:	d0a00c97 	ldw	r2,-32718(gp)
    9728:	00c01604 	movi	r3,88
    972c:	10c00915 	stw	r3,36(r2)
      cvo0->ModeX_Horizontal_Sync_Length  = 44;
    9730:	d0a00c97 	ldw	r2,-32718(gp)
    9734:	00c00b04 	movi	r3,44
    9738:	10c00a15 	stw	r3,40(r2)
      cvo0->ModeX_Horizontal_Blanking     = 280;
    973c:	d0a00c97 	ldw	r2,-32718(gp)
    9740:	00c04604 	movi	r3,280
    9744:	10c00b15 	stw	r3,44(r2)
      cvo0->ModeX_Vertical_Front_Porch    = 4;
    9748:	d0a00c97 	ldw	r2,-32718(gp)
    974c:	00c00104 	movi	r3,4
    9750:	10c00c15 	stw	r3,48(r2)
      cvo0->ModeX_Vertical_Sync_Length    = 5;
    9754:	d0a00c97 	ldw	r2,-32718(gp)
    9758:	00c00144 	movi	r3,5
    975c:	10c00d15 	stw	r3,52(r2)
      cvo0->ModeX_Vertical_Blanking       = 45;
    9760:	d0a00c97 	ldw	r2,-32718(gp)
    9764:	00c00b44 	movi	r3,45
    9768:	10c00e15 	stw	r3,56(r2)
      cvo0->ModeX_F0_Vertical_Front_Porch = 0;
    976c:	d0a00c97 	ldw	r2,-32718(gp)
    9770:	10000f15 	stw	zero,60(r2)
      cvo0->ModeX_F0_Vertical_Sync_Length = 0;
    9774:	d0a00c97 	ldw	r2,-32718(gp)
    9778:	10001015 	stw	zero,64(r2)
      cvo0->ModeX_F0_Vertical_Blanking    = 0;
    977c:	d0a00c97 	ldw	r2,-32718(gp)
    9780:	10001115 	stw	zero,68(r2)
      cvo0->ModeX_Active_Picture_Line     = 135;
    9784:	d0a00c97 	ldw	r2,-32718(gp)
    9788:	00c021c4 	movi	r3,135
    978c:	10c01215 	stw	r3,72(r2)
      cvo0->ModeX_F0_Vertical_Rising      = 0;
    9790:	d0a00c97 	ldw	r2,-32718(gp)
    9794:	10001315 	stw	zero,76(r2)
      cvo0->ModeX_Field_Rising            = 0;
    9798:	d0a00c97 	ldw	r2,-32718(gp)
    979c:	10001415 	stw	zero,80(r2)
      cvo0->ModeX_Field_Falling           = 0;
    97a0:	d0a00c97 	ldw	r2,-32718(gp)
    97a4:	10001515 	stw	zero,84(r2)
      cvo0->ModeX_Standart                = 0;
    97a8:	d0a00c97 	ldw	r2,-32718(gp)
    97ac:	10001615 	stw	zero,88(r2)
      cvo0->ModeX_SOF_Sample              = 0;
    97b0:	d0a00c97 	ldw	r2,-32718(gp)
    97b4:	10001715 	stw	zero,92(r2)
      cvo0->ModeX_SOF_Line                = 0;
    97b8:	d0a00c97 	ldw	r2,-32718(gp)
    97bc:	10001815 	stw	zero,96(r2)
      cvo0->ModeX_Vcoclk_Divider          = 0;
    97c0:	d0a00c97 	ldw	r2,-32718(gp)
    97c4:	10001915 	stw	zero,100(r2)
      cvo0->ModeX_Ancillary_Line          = 0;
    97c8:	d0a00c97 	ldw	r2,-32718(gp)
    97cc:	10001a15 	stw	zero,104(r2)
      cvo0->ModeX_F0_Ancillary_Line       = 0;
    97d0:	d0a00c97 	ldw	r2,-32718(gp)
    97d4:	10001b15 	stw	zero,108(r2)
      cvo0->ModeX_HSync_Polarity          = 0;
    97d8:	d0a00c97 	ldw	r2,-32718(gp)
    97dc:	10001c15 	stw	zero,112(r2)
      cvo0->ModeX_VSync_Polarity          = 0;
    97e0:	d0a00c97 	ldw	r2,-32718(gp)
    97e4:	10001d15 	stw	zero,116(r2)
      cvo0->ModeX_Valid                   = 1;
    97e8:	d0a00c97 	ldw	r2,-32718(gp)
    97ec:	00c00044 	movi	r3,1
    97f0:	10c01e15 	stw	r3,120(r2)
    }
#endif

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_TMDS171_OE );
    97f4:	00c10004 	movi	r3,1024
    97f8:	00800074 	movhi	r2,1
    97fc:	10800404 	addi	r2,r2,16
    9800:	10c00035 	stwio	r3,0(r2)
    usleep( 100000 );
    9804:	010000b4 	movhi	r4,2
    9808:	2121a804 	addi	r4,r4,-31072
    980c:	000c7740 	call	c774 <usleep>
    i2c_write_array( tmds171_registers, TMDS171_NUM_REGS );
    9810:	01400204 	movi	r5,8
    9814:	01000074 	movhi	r4,1
    9818:	21330e04 	addi	r4,r4,-13256
    981c:	00081f80 	call	81f8 <i2c_write_array>

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_RESET );
    9820:	00c02004 	movi	r3,128
    9824:	00800074 	movhi	r2,1
    9828:	10800404 	addi	r2,r2,16
    982c:	10c00035 	stwio	r3,0(r2)
    usleep( 200000 );
    9830:	010000f4 	movhi	r4,3
    9834:	21035004 	addi	r4,r4,3392
    9838:	000c7740 	call	c774 <usleep>

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    983c:	00c04004 	movi	r3,256
    9840:	00800074 	movhi	r2,1
    9844:	10800404 	addi	r2,r2,16
    9848:	10c00035 	stwio	r3,0(r2)
   usleep( 200000 );
    984c:	010000f4 	movhi	r4,3
    9850:	21035004 	addi	r4,r4,3392
    9854:	000c7740 	call	c774 <usleep>
    i2c_write_array( adv7613_registers, ADV7613_NUM_REGS );
    9858:	01402f04 	movi	r5,188
    985c:	01000074 	movhi	r4,1
    9860:	21331404 	addi	r4,r4,-13232
    9864:	00081f80 	call	81f8 <i2c_write_array>
    IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS0 );
    9868:	00c04004 	movi	r3,256
    986c:	00800074 	movhi	r2,1
    9870:	10800504 	addi	r2,r2,20
    9874:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    9878:	00c08004 	movi	r3,512
    987c:	00800074 	movhi	r2,1
    9880:	10800404 	addi	r2,r2,16
    9884:	10c00035 	stwio	r3,0(r2)
    usleep( 200000 );
    9888:	010000f4 	movhi	r4,3
    988c:	21035004 	addi	r4,r4,3392
    9890:	000c7740 	call	c774 <usleep>
    i2c_write_array( adv7613_registers, ADV7613_NUM_REGS );
    9894:	01402f04 	movi	r5,188
    9898:	01000074 	movhi	r4,1
    989c:	21331404 	addi	r4,r4,-13232
    98a0:	00081f80 	call	81f8 <i2c_write_array>
    IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    98a4:	00c08004 	movi	r3,512
    98a8:	00800074 	movhi	r2,1
    98ac:	10800504 	addi	r2,r2,20
    98b0:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7181_RESET );
    98b4:	00c01004 	movi	r3,64
    98b8:	00800074 	movhi	r2,1
    98bc:	10800404 	addi	r2,r2,16
    98c0:	10c00035 	stwio	r3,0(r2)
    usleep( 200000 );
    98c4:	010000f4 	movhi	r4,3
    98c8:	21035004 	addi	r4,r4,3392
    98cc:	000c7740 	call	c774 <usleep>

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_ADV7613_CS1 );
    98d0:	00c08004 	movi	r3,512
    98d4:	00800074 	movhi	r2,1
    98d8:	10800404 	addi	r2,r2,16
    98dc:	10c00035 	stwio	r3,0(r2)
        usleep( 200000 );
    98e0:	010000f4 	movhi	r4,3
    98e4:	21035004 	addi	r4,r4,3392
    98e8:	000c7740 	call	c774 <usleep>
    alt_u8 oo = i2c_read(0x98,0xf5);
    98ec:	01403d44 	movi	r5,245
    98f0:	01002604 	movi	r4,152
    98f4:	00080cc0 	call	80cc <i2c_read>
    98f8:	e0bffc45 	stb	r2,-15(fp)



    i2c_write_array( adv7181_registers, ADV7181_NUM_REGS );
    98fc:	01400904 	movi	r5,36
    9900:	01000074 	movhi	r4,1
    9904:	2133a104 	addi	r4,r4,-12668
    9908:	00081f80 	call	81f8 <i2c_write_array>

    if( lcd_type == MFD_15INCH_TYPE )
    990c:	d0a01283 	ldbu	r2,-32694(gp)
    9910:	10803fcc 	andi	r2,r2,255
    9914:	10800098 	cmpnei	r2,r2,2
    9918:	1000061e 	bne	r2,zero,9934 <main+0x7f8>
      IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, ( GPIO_DP_RESET_N | GPIO_DP_HPD ) );
    991c:	00c00234 	movhi	r3,8
    9920:	18c00104 	addi	r3,r3,4
    9924:	00800074 	movhi	r2,1
    9928:	10800404 	addi	r2,r2,16
    992c:	10c00035 	stwio	r3,0(r2)
    9930:	00000b06 	br	9960 <main+0x824>
    else if( ( lcd_type == MFD_12INCH_TYPE ) || ( lcd_type == MFD_10INCH_TYPE ) )
    9934:	d0a01283 	ldbu	r2,-32694(gp)
    9938:	10803fcc 	andi	r2,r2,255
    993c:	10800060 	cmpeqi	r2,r2,1
    9940:	1000031e 	bne	r2,zero,9950 <main+0x814>
    9944:	d0a01283 	ldbu	r2,-32694(gp)
    9948:	10803fcc 	andi	r2,r2,255
    994c:	1000041e 	bne	r2,zero,9960 <main+0x824>
      IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, ( GPIO_LVDS_RESET_N | GPIO_LVDS_LCD_SCAN ) );
    9950:	00c80204 	movi	r3,8200
    9954:	00800074 	movhi	r2,1
    9958:	10800404 	addi	r2,r2,16
    995c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, ( GPIO_AV_RESET_N | GPIO_TMDS_RESET_N | GPIO_IMX6_ALPHA ) );
    9960:	00c00434 	movhi	r3,16
    9964:	18c00c04 	addi	r3,r3,48
    9968:	00800074 	movhi	r2,1
    996c:	10800404 	addi	r2,r2,16
    9970:	10c00035 	stwio	r3,0(r2)

    switch( lcd_type ) {
    9974:	d0a01283 	ldbu	r2,-32694(gp)
    9978:	10803fcc 	andi	r2,r2,255
    997c:	10c00060 	cmpeqi	r3,r2,1
    9980:	1800081e 	bne	r3,zero,99a4 <main+0x868>
    9984:	10c000a0 	cmpeqi	r3,r2,2
    9988:	1800021e 	bne	r3,zero,9994 <main+0x858>
    998c:	10000826 	beq	r2,zero,99b0 <main+0x874>
    9990:	00000b06 	br	99c0 <main+0x884>
      case MFD_15INCH_TYPE:
        gpio_set( GPIO_OUT3_EN_N | GPIO_LCD_BKLT_EN0 | GPIO_LCD_BKLT_EN1 );
    9994:	01000134 	movhi	r4,4
    9998:	21200004 	addi	r4,r4,-32768
    999c:	00084380 	call	8438 <gpio_set>
        break;
    99a0:	00000706 	br	99c0 <main+0x884>
      case MFD_12INCH_TYPE:
        gpio_set( GPIO_LCD_BKLT_EN0 );
    99a4:	01000074 	movhi	r4,1
    99a8:	00084380 	call	8438 <gpio_set>
        break;
    99ac:	00000406 	br	99c0 <main+0x884>
      case MFD_10INCH_TYPE:
        gpio_set( GPIO_OUT1_EN_N | GPIO_LCD_BKLT_EN1 );
    99b0:	010000b4 	movhi	r4,2
    99b4:	21100004 	addi	r4,r4,16384
    99b8:	00084380 	call	8438 <gpio_set>
        break;
    99bc:	0001883a 	nop
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
    99c0:	00027806 	br	a3a4 <main+0x1268>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_INIT_DONE    ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_INIT_DONE    ) &&
	       ( lcd_type == ( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_LCD_SIZE_MASK ) >> GPIO_LCD_SIZE_SHIFT ) ) ) {

      shared_ram0->sys.version          = FPGA_VERSION;
    99c4:	d0a01197 	ldw	r2,-32698(gp)
    99c8:	00c00044 	movi	r3,1
    99cc:	10c000c5 	stb	r3,3(r2)
      shared_ram0->sys.sub_version      = FPGA_SUB_VERSION;
    99d0:	d0a01197 	ldw	r2,-32698(gp)
    99d4:	10000085 	stb	zero,2(r2)
      shared_ram0->sys.local_version    = FPGA_LOCAL_VERSION;
    99d8:	d0a01197 	ldw	r2,-32698(gp)
    99dc:	00c000c4 	movi	r3,3
    99e0:	10c00045 	stb	r3,1(r2)
      shared_ram0->sys.version_checksum = ( 0xFF ^ FPGA_VERSION ^ FPGA_SUB_VERSION ^ FPGA_LOCAL_VERSION );
    99e4:	d0a01197 	ldw	r2,-32698(gp)
    99e8:	00ffff44 	movi	r3,-3
    99ec:	10c00005 	stb	r3,0(r2)
      shared_ram0->sys.checksum         = FPGA_CHECKSUM_CONST;
    99f0:	d0e01197 	ldw	r3,-32698(gp)
    99f4:	0083f1f4 	movhi	r2,4039
    99f8:	10b89b04 	addi	r2,r2,-7572
    99fc:	18800115 	stw	r2,4(r3)
      shared_ram0->sys.runtime          = ( shared_ram0->sys.runtime + 1 );
    9a00:	d0a01197 	ldw	r2,-32698(gp)
    9a04:	d0e01197 	ldw	r3,-32698(gp)
    9a08:	18c00217 	ldw	r3,8(r3)
    9a0c:	18c00044 	addi	r3,r3,1
    9a10:	10c00215 	stw	r3,8(r2)

      if ( shared_ram0->sys.alpha & 0x01 )
    9a14:	d0a01197 	ldw	r2,-32698(gp)
    9a18:	10800317 	ldw	r2,12(r2)
    9a1c:	1080004c 	andi	r2,r2,1
    9a20:	10000526 	beq	r2,zero,9a38 <main+0x8fc>
        IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_IMX6_ALPHA );
    9a24:	00c00434 	movhi	r3,16
    9a28:	00800074 	movhi	r2,1
    9a2c:	10800504 	addi	r2,r2,20
    9a30:	10c00035 	stwio	r3,0(r2)
    9a34:	00000406 	br	9a48 <main+0x90c>
      else
        IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_IMX6_ALPHA );
    9a38:	00c00434 	movhi	r3,16
    9a3c:	00800074 	movhi	r2,1
    9a40:	10800404 	addi	r2,r2,16
    9a44:	10c00035 	stwio	r3,0(r2)

	  heart = (heart < 1) ? heart + 1 : 0;
    9a48:	d0a01403 	ldbu	r2,-32688(gp)
    9a4c:	10803fcc 	andi	r2,r2,255
    9a50:	1000031e 	bne	r2,zero,9a60 <main+0x924>
    9a54:	d0a01403 	ldbu	r2,-32688(gp)
    9a58:	10800044 	addi	r2,r2,1
    9a5c:	00000106 	br	9a64 <main+0x928>
    9a60:	0005883a 	mov	r2,zero
    9a64:	d0a01405 	stb	r2,-32688(gp)
	  if (heart == 0) {
    9a68:	d0a01403 	ldbu	r2,-32688(gp)
    9a6c:	10803fcc 	andi	r2,r2,255
    9a70:	10000b1e 	bne	r2,zero,9aa0 <main+0x964>
	    heart_bit = ~heart_bit;
    9a74:	d0a01443 	ldbu	r2,-32687(gp)
    9a78:	0084303a 	nor	r2,zero,r2
    9a7c:	d0a01445 	stb	r2,-32687(gp)
	    if (heart_bit)
    9a80:	d0a01443 	ldbu	r2,-32687(gp)
    9a84:	10803fcc 	andi	r2,r2,255
    9a88:	10000326 	beq	r2,zero,9a98 <main+0x95c>
		  gpio_set(GPIO_NIOS_HEART_BEAT);
    9a8c:	01001034 	movhi	r4,64
    9a90:	00084380 	call	8438 <gpio_set>
    9a94:	00000206 	br	9aa0 <main+0x964>
	    else
		  gpio_clear(GPIO_NIOS_HEART_BEAT);
    9a98:	01001034 	movhi	r4,64
    9a9c:	00084740 	call	8474 <gpio_clear>
	  }

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvi_0
      cvi0->Control                    = shared_ram0->cvi[0].control;
    9aa0:	d0a00197 	ldw	r2,-32762(gp)
    9aa4:	d0e01197 	ldw	r3,-32698(gp)
    9aa8:	18c00417 	ldw	r3,16(r3)
    9aac:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvi[0].status       = cvi0->Status;
    9ab0:	d0a01197 	ldw	r2,-32698(gp)
    9ab4:	d0e00197 	ldw	r3,-32762(gp)
    9ab8:	18c00117 	ldw	r3,4(r3)
    9abc:	10c00515 	stw	r3,20(r2)
      shared_ram0->cvi[0].resolution.x = cvi0->Active_Sample_Count;
    9ac0:	d0a01197 	ldw	r2,-32698(gp)
    9ac4:	d0e00197 	ldw	r3,-32762(gp)
    9ac8:	18c00417 	ldw	r3,16(r3)
    9acc:	10c0068d 	sth	r3,26(r2)
      shared_ram0->cvi[0].resolution.y = cvi0->F0_Active_Line_Count;
    9ad0:	d0a01197 	ldw	r2,-32698(gp)
    9ad4:	d0e00197 	ldw	r3,-32762(gp)
    9ad8:	18c00517 	ldw	r3,20(r3)
    9adc:	10c0060d 	sth	r3,24(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvi_1
      cvi1->Control                    = shared_ram0->cvi[1].control;
    9ae0:	d0a00297 	ldw	r2,-32758(gp)
    9ae4:	d0e01197 	ldw	r3,-32698(gp)
    9ae8:	18c00817 	ldw	r3,32(r3)
    9aec:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvi[1].status       = cvi1->Status;
    9af0:	d0a01197 	ldw	r2,-32698(gp)
    9af4:	d0e00297 	ldw	r3,-32758(gp)
    9af8:	18c00117 	ldw	r3,4(r3)
    9afc:	10c00915 	stw	r3,36(r2)
      shared_ram0->cvi[1].resolution.x = cvi1->Active_Sample_Count;
    9b00:	d0a01197 	ldw	r2,-32698(gp)
    9b04:	d0e00297 	ldw	r3,-32758(gp)
    9b08:	18c00417 	ldw	r3,16(r3)
    9b0c:	10c00a8d 	sth	r3,42(r2)
      shared_ram0->cvi[1].resolution.y = cvi1->F0_Active_Line_Count;
    9b10:	d0a01197 	ldw	r2,-32698(gp)
    9b14:	d0e00297 	ldw	r3,-32758(gp)
    9b18:	18c00517 	ldw	r3,20(r3)
    9b1c:	10c00a0d 	sth	r3,40(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvi_2
      cvi2->Control                    = shared_ram0->cvi[2].control;
    9b20:	d0a00397 	ldw	r2,-32754(gp)
    9b24:	d0e01197 	ldw	r3,-32698(gp)
    9b28:	18c00c17 	ldw	r3,48(r3)
    9b2c:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvi[2].status       = cvi2->Status;
    9b30:	d0a01197 	ldw	r2,-32698(gp)
    9b34:	d0e00397 	ldw	r3,-32754(gp)
    9b38:	18c00117 	ldw	r3,4(r3)
    9b3c:	10c00d15 	stw	r3,52(r2)
      shared_ram0->cvi[2].resolution.x = cvi2->Active_Sample_Count;
    9b40:	d0a01197 	ldw	r2,-32698(gp)
    9b44:	d0e00397 	ldw	r3,-32754(gp)
    9b48:	18c00417 	ldw	r3,16(r3)
    9b4c:	10c00e8d 	sth	r3,58(r2)
      shared_ram0->cvi[2].resolution.y = cvi2->F0_Active_Line_Count;
    9b50:	d0a01197 	ldw	r2,-32698(gp)
    9b54:	d0e00397 	ldw	r3,-32754(gp)
    9b58:	18c00517 	ldw	r3,20(r3)
    9b5c:	10c00e0d 	sth	r3,56(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvi_3
      cvi3->Control                    = shared_ram0->cvi[3].control;
    9b60:	d0a00497 	ldw	r2,-32750(gp)
    9b64:	d0e01197 	ldw	r3,-32698(gp)
    9b68:	18c01017 	ldw	r3,64(r3)
    9b6c:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvi[3].status       = cvi3->Status;
    9b70:	d0a01197 	ldw	r2,-32698(gp)
    9b74:	d0e00497 	ldw	r3,-32750(gp)
    9b78:	18c00117 	ldw	r3,4(r3)
    9b7c:	10c01115 	stw	r3,68(r2)
      shared_ram0->cvi[3].resolution.x = cvi3->Active_Sample_Count;
    9b80:	d0a01197 	ldw	r2,-32698(gp)
    9b84:	d0e00497 	ldw	r3,-32750(gp)
    9b88:	18c00417 	ldw	r3,16(r3)
    9b8c:	10c0128d 	sth	r3,74(r2)
      shared_ram0->cvi[3].resolution.y = cvi3->F0_Active_Line_Count;
    9b90:	d0a01197 	ldw	r2,-32698(gp)
    9b94:	d0e00497 	ldw	r3,-32750(gp)
    9b98:	18c00517 	ldw	r3,20(r3)
    9b9c:	10c0120d 	sth	r3,72(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvi_4
      cvi4->Control                    = shared_ram0->cvi[4].control;
    9ba0:	d0a00597 	ldw	r2,-32746(gp)
    9ba4:	d0e01197 	ldw	r3,-32698(gp)
    9ba8:	18c01417 	ldw	r3,80(r3)
    9bac:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvi[4].status       = cvi4->Status;
    9bb0:	d0a01197 	ldw	r2,-32698(gp)
    9bb4:	d0e00597 	ldw	r3,-32746(gp)
    9bb8:	18c00117 	ldw	r3,4(r3)
    9bbc:	10c01515 	stw	r3,84(r2)
      shared_ram0->cvi[4].resolution.x = cvi4->Active_Sample_Count;
    9bc0:	d0a01197 	ldw	r2,-32698(gp)
    9bc4:	d0e00597 	ldw	r3,-32746(gp)
    9bc8:	18c00417 	ldw	r3,16(r3)
    9bcc:	10c0168d 	sth	r3,90(r2)
      shared_ram0->cvi[4].resolution.y = cvi4->F0_Active_Line_Count;
    9bd0:	d0a01197 	ldw	r2,-32698(gp)
    9bd4:	d0e00597 	ldw	r3,-32746(gp)
    9bd8:	18c00517 	ldw	r3,20(r3)
    9bdc:	10c0160d 	sth	r3,88(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_swi_0
      sw0->Control              = shared_ram0->sw[0].control;
    9be0:	d0a00697 	ldw	r2,-32742(gp)
    9be4:	d0e01197 	ldw	r3,-32698(gp)
    9be8:	18c01817 	ldw	r3,96(r3)
    9bec:	10c00015 	stw	r3,0(r2)
      shared_ram0->sw[0].status = sw0->Status;
    9bf0:	d0a01197 	ldw	r2,-32698(gp)
    9bf4:	d0e00697 	ldw	r3,-32742(gp)
    9bf8:	18c00117 	ldw	r3,4(r3)
    9bfc:	10c01915 	stw	r3,100(r2)
      if( ( sw0->Output_Ctrl[0] != shared_ram0->sw[0].output[0] ) |
    9c00:	d0a00697 	ldw	r2,-32742(gp)
    9c04:	10c00417 	ldw	r3,16(r2)
    9c08:	d0a01197 	ldw	r2,-32698(gp)
    9c0c:	10801a17 	ldw	r2,104(r2)
    9c10:	1884c03a 	cmpne	r2,r3,r2
    9c14:	1009883a 	mov	r4,r2
          ( sw0->Output_Ctrl[1] != shared_ram0->sw[0].output[1] ) ) {
    9c18:	d0a00697 	ldw	r2,-32742(gp)
    9c1c:	10c00517 	ldw	r3,20(r2)
    9c20:	d0a01197 	ldw	r2,-32698(gp)
    9c24:	10801b17 	ldw	r2,108(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_swi_0
      sw0->Control              = shared_ram0->sw[0].control;
      shared_ram0->sw[0].status = sw0->Status;
      if( ( sw0->Output_Ctrl[0] != shared_ram0->sw[0].output[0] ) |
    9c28:	1884c03a 	cmpne	r2,r3,r2
    9c2c:	2084b03a 	or	r2,r4,r2
    9c30:	10803fcc 	andi	r2,r2,255
    9c34:	10000b26 	beq	r2,zero,9c64 <main+0xb28>
          ( sw0->Output_Ctrl[1] != shared_ram0->sw[0].output[1] ) ) {
        sw0->Output_Ctrl[0] = shared_ram0->sw[0].output[0];
    9c38:	d0a00697 	ldw	r2,-32742(gp)
    9c3c:	d0e01197 	ldw	r3,-32698(gp)
    9c40:	18c01a17 	ldw	r3,104(r3)
    9c44:	10c00415 	stw	r3,16(r2)
        sw0->Output_Ctrl[1] = shared_ram0->sw[0].output[1];
    9c48:	d0a00697 	ldw	r2,-32742(gp)
    9c4c:	d0e01197 	ldw	r3,-32698(gp)
    9c50:	18c01b17 	ldw	r3,108(r3)
    9c54:	10c00515 	stw	r3,20(r2)
        sw0->Output_Switch  = 1;
    9c58:	d0a00697 	ldw	r2,-32742(gp)
    9c5c:	00c00044 	movi	r3,1
    9c60:	10c00315 	stw	r3,12(r2)
      }
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_clp_0
      clp0->Control       = shared_ram0->clp[0].control;
    9c64:	d0a00797 	ldw	r2,-32738(gp)
    9c68:	d0e01197 	ldw	r3,-32698(gp)
    9c6c:	18c03c17 	ldw	r3,240(r3)
    9c70:	10c00015 	stw	r3,0(r2)
      clp0->Left_offset   = shared_ram0->clp[0].offset.x;
    9c74:	d0a00797 	ldw	r2,-32738(gp)
    9c78:	d0e01197 	ldw	r3,-32698(gp)
    9c7c:	18c03d8b 	ldhu	r3,246(r3)
    9c80:	18ffffcc 	andi	r3,r3,65535
    9c84:	10c00315 	stw	r3,12(r2)
      clp0->Top_offset    = shared_ram0->clp[0].offset.y;
    9c88:	d0a00797 	ldw	r2,-32738(gp)
    9c8c:	d0e01197 	ldw	r3,-32698(gp)
    9c90:	18c03d0b 	ldhu	r3,244(r3)
    9c94:	18ffffcc 	andi	r3,r3,65535
    9c98:	10c00515 	stw	r3,20(r2)
      clp0->Right_offset  = shared_ram0->clp[0].clip.x;
    9c9c:	d0a00797 	ldw	r2,-32738(gp)
    9ca0:	d0e01197 	ldw	r3,-32698(gp)
    9ca4:	18c03e8b 	ldhu	r3,250(r3)
    9ca8:	18ffffcc 	andi	r3,r3,65535
    9cac:	10c00415 	stw	r3,16(r2)
      clp0->Bottom_offset = shared_ram0->clp[0].clip.y;
    9cb0:	d0a00797 	ldw	r2,-32738(gp)
    9cb4:	d0e01197 	ldw	r3,-32698(gp)
    9cb8:	18c03e0b 	ldhu	r3,248(r3)
    9cbc:	18ffffcc 	andi	r3,r3,65535
    9cc0:	10c00615 	stw	r3,24(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_clp_1
      clp1->Control       = shared_ram0->clp[1].control;
    9cc4:	d0a00897 	ldw	r2,-32734(gp)
    9cc8:	d0e01197 	ldw	r3,-32698(gp)
    9ccc:	18c04017 	ldw	r3,256(r3)
    9cd0:	10c00015 	stw	r3,0(r2)
      clp1->Left_offset   = shared_ram0->clp[1].offset.x;
    9cd4:	d0a00897 	ldw	r2,-32734(gp)
    9cd8:	d0e01197 	ldw	r3,-32698(gp)
    9cdc:	18c0418b 	ldhu	r3,262(r3)
    9ce0:	18ffffcc 	andi	r3,r3,65535
    9ce4:	10c00315 	stw	r3,12(r2)
      clp1->Top_offset    = shared_ram0->clp[1].offset.y;
    9ce8:	d0a00897 	ldw	r2,-32734(gp)
    9cec:	d0e01197 	ldw	r3,-32698(gp)
    9cf0:	18c0410b 	ldhu	r3,260(r3)
    9cf4:	18ffffcc 	andi	r3,r3,65535
    9cf8:	10c00515 	stw	r3,20(r2)
      clp1->Right_offset  = shared_ram0->clp[1].clip.x;
    9cfc:	d0a00897 	ldw	r2,-32734(gp)
    9d00:	d0e01197 	ldw	r3,-32698(gp)
    9d04:	18c0428b 	ldhu	r3,266(r3)
    9d08:	18ffffcc 	andi	r3,r3,65535
    9d0c:	10c00415 	stw	r3,16(r2)
      clp1->Bottom_offset = shared_ram0->clp[1].clip.y;
    9d10:	d0a00897 	ldw	r2,-32734(gp)
    9d14:	d0e01197 	ldw	r3,-32698(gp)
    9d18:	18c0420b 	ldhu	r3,264(r3)
    9d1c:	18ffffcc 	andi	r3,r3,65535
    9d20:	10c00615 	stw	r3,24(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_scl_0
      sc0->Control              = shared_ram0->sc[0].control;
    9d24:	d0a00997 	ldw	r2,-32730(gp)
    9d28:	d0e01197 	ldw	r3,-32698(gp)
    9d2c:	18c01c17 	ldw	r3,112(r3)
    9d30:	10c00015 	stw	r3,0(r2)
      shared_ram0->sc[0].status = sc0->Status;
    9d34:	d0a01197 	ldw	r2,-32698(gp)
    9d38:	d0e00997 	ldw	r3,-32730(gp)
    9d3c:	18c00117 	ldw	r3,4(r3)
    9d40:	10c01d15 	stw	r3,116(r2)
      sc0->Output_Width         = shared_ram0->sc[0].resolution.x;
    9d44:	d0a00997 	ldw	r2,-32730(gp)
    9d48:	d0e01197 	ldw	r3,-32698(gp)
    9d4c:	18c01e8b 	ldhu	r3,122(r3)
    9d50:	18ffffcc 	andi	r3,r3,65535
    9d54:	10c00315 	stw	r3,12(r2)
      sc0->Output_Height        = shared_ram0->sc[0].resolution.y;
    9d58:	d0a00997 	ldw	r2,-32730(gp)
    9d5c:	d0e01197 	ldw	r3,-32698(gp)
    9d60:	18c01e0b 	ldhu	r3,120(r3)
    9d64:	18ffffcc 	andi	r3,r3,65535
    9d68:	10c00415 	stw	r3,16(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_scl_1
      sc1->Control              = shared_ram0->sc[1].control;
    9d6c:	d0a00a97 	ldw	r2,-32726(gp)
    9d70:	d0e01197 	ldw	r3,-32698(gp)
    9d74:	18c02017 	ldw	r3,128(r3)
    9d78:	10c00015 	stw	r3,0(r2)
      shared_ram0->sc[1].status = sc1->Status;
    9d7c:	d0a01197 	ldw	r2,-32698(gp)
    9d80:	d0e00a97 	ldw	r3,-32726(gp)
    9d84:	18c00117 	ldw	r3,4(r3)
    9d88:	10c02115 	stw	r3,132(r2)
      sc1->Output_Width         = shared_ram0->sc[1].resolution.x;
    9d8c:	d0a00a97 	ldw	r2,-32726(gp)
    9d90:	d0e01197 	ldw	r3,-32698(gp)
    9d94:	18c0228b 	ldhu	r3,138(r3)
    9d98:	18ffffcc 	andi	r3,r3,65535
    9d9c:	10c00315 	stw	r3,12(r2)
      sc1->Output_Height        = shared_ram0->sc[1].resolution.y;
    9da0:	d0a00a97 	ldw	r2,-32726(gp)
    9da4:	d0e01197 	ldw	r3,-32698(gp)
    9da8:	18c0220b 	ldhu	r3,136(r3)
    9dac:	18ffffcc 	andi	r3,r3,65535
    9db0:	10c00415 	stw	r3,16(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_mixer_0
      mix0->Control                                      = shared_ram0->mix[0].control;
    9db4:	d0a00b97 	ldw	r2,-32722(gp)
    9db8:	d0e01197 	ldw	r3,-32698(gp)
    9dbc:	18c02817 	ldw	r3,160(r3)
    9dc0:	10c00015 	stw	r3,0(r2)
      shared_ram0->mix[0].status                         = mix0->Status;
    9dc4:	d0a01197 	ldw	r2,-32698(gp)
    9dc8:	d0e00b97 	ldw	r3,-32722(gp)
    9dcc:	18c00117 	ldw	r3,4(r3)
    9dd0:	10c02915 	stw	r3,164(r2)
      mix0->Background_Width                             = shared_ram0->mix[0].resolution.x;
    9dd4:	d0a00b97 	ldw	r2,-32722(gp)
    9dd8:	d0e01197 	ldw	r3,-32698(gp)
    9ddc:	18c02a8b 	ldhu	r3,170(r3)
    9de0:	18ffffcc 	andi	r3,r3,65535
    9de4:	10c00315 	stw	r3,12(r2)
      mix0->Background_Height                            = shared_ram0->mix[0].resolution.y;
    9de8:	d0a00b97 	ldw	r2,-32722(gp)
    9dec:	d0e01197 	ldw	r3,-32698(gp)
    9df0:	18c02a0b 	ldhu	r3,168(r3)
    9df4:	18ffffcc 	andi	r3,r3,65535
    9df8:	10c00415 	stw	r3,16(r2)
      mix0->Uniform_background_Red                       = shared_ram0->mix[0].background.red;
    9dfc:	d0a00b97 	ldw	r2,-32722(gp)
    9e00:	d0e01197 	ldw	r3,-32698(gp)
    9e04:	18c02b43 	ldbu	r3,173(r3)
    9e08:	18c03fcc 	andi	r3,r3,255
    9e0c:	10c00515 	stw	r3,20(r2)
      mix0->Uniform_background_Green                     = shared_ram0->mix[0].background.green;
    9e10:	d0a00b97 	ldw	r2,-32722(gp)
    9e14:	d0e01197 	ldw	r3,-32698(gp)
    9e18:	18c02b83 	ldbu	r3,174(r3)
    9e1c:	18c03fcc 	andi	r3,r3,255
    9e20:	10c00615 	stw	r3,24(r2)
      mix0->Uniform_background_Blue                      = shared_ram0->mix[0].background.blue;
    9e24:	d0a00b97 	ldw	r2,-32722(gp)
    9e28:	d0e01197 	ldw	r3,-32698(gp)
    9e2c:	18c02bc3 	ldbu	r3,175(r3)
    9e30:	18c03fcc 	andi	r3,r3,255
    9e34:	10c00715 	stw	r3,28(r2)
      //mix0->layer_config[0].Input_Control.Enable         = shared_ram0->mix[0].layer[0].control;
      mix0->layer_config[0].Layer_position               = shared_ram0->mix[0].layer[0].position;
    9e38:	d0a00b97 	ldw	r2,-32722(gp)
    9e3c:	d0e01197 	ldw	r3,-32698(gp)
    9e40:	18c02c43 	ldbu	r3,177(r3)
    9e44:	18c03fcc 	andi	r3,r3,255
    9e48:	10c00b15 	stw	r3,44(r2)
      mix0->layer_config[0].X_offset                     = shared_ram0->mix[0].layer[0].offset.x;
    9e4c:	d0a00b97 	ldw	r2,-32722(gp)
    9e50:	d0e01197 	ldw	r3,-32698(gp)
    9e54:	18c02d8b 	ldhu	r3,182(r3)
    9e58:	18ffffcc 	andi	r3,r3,65535
    9e5c:	10c00815 	stw	r3,32(r2)
      mix0->layer_config[0].Y_offset                     = shared_ram0->mix[0].layer[0].offset.y;
    9e60:	d0a00b97 	ldw	r2,-32722(gp)
    9e64:	d0e01197 	ldw	r3,-32698(gp)
    9e68:	18c02d0b 	ldhu	r3,180(r3)
    9e6c:	18ffffcc 	andi	r3,r3,65535
    9e70:	10c00915 	stw	r3,36(r2)
      mix0->layer_config[0].Static_Alpha                 = shared_ram0->mix[0].layer[0].alpha;
    9e74:	d0a00b97 	ldw	r2,-32722(gp)
    9e78:	d0e01197 	ldw	r3,-32698(gp)
    9e7c:	18c02e03 	ldbu	r3,184(r3)
    9e80:	18c03fcc 	andi	r3,r3,255
    9e84:	10c00c15 	stw	r3,48(r2)
      mix0->layer_config[0].Input_Control.Alpha_Mode     = 1;
    9e88:	d0a00b97 	ldw	r2,-32722(gp)
    9e8c:	11000a17 	ldw	r4,40(r2)
    9e90:	00fffcc4 	movi	r3,-13
    9e94:	20c6703a 	and	r3,r4,r3
    9e98:	18c00114 	ori	r3,r3,4
    9e9c:	10c00a15 	stw	r3,40(r2)
      mix0->layer_config[0].Input_Control.Enable_Consume = 0;
    9ea0:	d0a00b97 	ldw	r2,-32722(gp)
    9ea4:	11000a17 	ldw	r4,40(r2)
    9ea8:	00ffff44 	movi	r3,-3
    9eac:	20c6703a 	and	r3,r4,r3
    9eb0:	10c00a15 	stw	r3,40(r2)
      //mix0->layer_config[1].Input_Control.Enable         = shared_ram0->mix[0].layer[1].control;
      mix0->layer_config[1].Layer_position               = shared_ram0->mix[0].layer[1].position;
    9eb4:	d0a00b97 	ldw	r2,-32722(gp)
    9eb8:	d0e01197 	ldw	r3,-32698(gp)
    9ebc:	18c03043 	ldbu	r3,193(r3)
    9ec0:	18c03fcc 	andi	r3,r3,255
    9ec4:	10c01015 	stw	r3,64(r2)
      mix0->layer_config[1].X_offset                     = shared_ram0->mix[0].layer[1].offset.x;
    9ec8:	d0a00b97 	ldw	r2,-32722(gp)
    9ecc:	d0e01197 	ldw	r3,-32698(gp)
    9ed0:	18c0318b 	ldhu	r3,198(r3)
    9ed4:	18ffffcc 	andi	r3,r3,65535
    9ed8:	10c00d15 	stw	r3,52(r2)
      mix0->layer_config[1].Y_offset                     = shared_ram0->mix[0].layer[1].offset.y;
    9edc:	d0a00b97 	ldw	r2,-32722(gp)
    9ee0:	d0e01197 	ldw	r3,-32698(gp)
    9ee4:	18c0310b 	ldhu	r3,196(r3)
    9ee8:	18ffffcc 	andi	r3,r3,65535
    9eec:	10c00e15 	stw	r3,56(r2)
      mix0->layer_config[1].Static_Alpha                 = shared_ram0->mix[0].layer[1].alpha;
    9ef0:	d0a00b97 	ldw	r2,-32722(gp)
    9ef4:	d0e01197 	ldw	r3,-32698(gp)
    9ef8:	18c03203 	ldbu	r3,200(r3)
    9efc:	18c03fcc 	andi	r3,r3,255
    9f00:	10c01115 	stw	r3,68(r2)
      mix0->layer_config[1].Input_Control.Alpha_Mode     = 1;
    9f04:	d0a00b97 	ldw	r2,-32722(gp)
    9f08:	11000f17 	ldw	r4,60(r2)
    9f0c:	00fffcc4 	movi	r3,-13
    9f10:	20c6703a 	and	r3,r4,r3
    9f14:	18c00114 	ori	r3,r3,4
    9f18:	10c00f15 	stw	r3,60(r2)
      mix0->layer_config[1].Input_Control.Enable_Consume = 0;
    9f1c:	d0a00b97 	ldw	r2,-32722(gp)
    9f20:	11000f17 	ldw	r4,60(r2)
    9f24:	00ffff44 	movi	r3,-3
    9f28:	20c6703a 	and	r3,r4,r3
    9f2c:	10c00f15 	stw	r3,60(r2)
      mix0->layer_config[2].Input_Control.Enable         = shared_ram0->mix[0].layer[2].control;
    9f30:	d0a00b97 	ldw	r2,-32722(gp)
    9f34:	d0e01197 	ldw	r3,-32698(gp)
    9f38:	18c03403 	ldbu	r3,208(r3)
    9f3c:	18c0004c 	andi	r3,r3,1
    9f40:	18c03fcc 	andi	r3,r3,255
    9f44:	18c0004c 	andi	r3,r3,1
    9f48:	11401417 	ldw	r5,80(r2)
    9f4c:	013fff84 	movi	r4,-2
    9f50:	2908703a 	and	r4,r5,r4
    9f54:	20c6b03a 	or	r3,r4,r3
    9f58:	10c01415 	stw	r3,80(r2)
      mix0->layer_config[2].Layer_position               = shared_ram0->mix[0].layer[2].position;
    9f5c:	d0a00b97 	ldw	r2,-32722(gp)
    9f60:	d0e01197 	ldw	r3,-32698(gp)
    9f64:	18c03443 	ldbu	r3,209(r3)
    9f68:	18c03fcc 	andi	r3,r3,255
    9f6c:	10c01515 	stw	r3,84(r2)
      mix0->layer_config[2].X_offset                     = shared_ram0->mix[0].layer[2].offset.x;
    9f70:	d0a00b97 	ldw	r2,-32722(gp)
    9f74:	d0e01197 	ldw	r3,-32698(gp)
    9f78:	18c0358b 	ldhu	r3,214(r3)
    9f7c:	18ffffcc 	andi	r3,r3,65535
    9f80:	10c01215 	stw	r3,72(r2)
      mix0->layer_config[2].Y_offset                     = shared_ram0->mix[0].layer[2].offset.y;
    9f84:	d0a00b97 	ldw	r2,-32722(gp)
    9f88:	d0e01197 	ldw	r3,-32698(gp)
    9f8c:	18c0350b 	ldhu	r3,212(r3)
    9f90:	18ffffcc 	andi	r3,r3,65535
    9f94:	10c01315 	stw	r3,76(r2)
      mix0->layer_config[2].Static_Alpha                 = shared_ram0->mix[0].layer[2].alpha;
    9f98:	d0a00b97 	ldw	r2,-32722(gp)
    9f9c:	d0e01197 	ldw	r3,-32698(gp)
    9fa0:	18c03603 	ldbu	r3,216(r3)
    9fa4:	18c03fcc 	andi	r3,r3,255
    9fa8:	10c01615 	stw	r3,88(r2)
      mix0->layer_config[2].Input_Control.Alpha_Mode     = 2;
    9fac:	d0a00b97 	ldw	r2,-32722(gp)
    9fb0:	11001417 	ldw	r4,80(r2)
    9fb4:	00fffcc4 	movi	r3,-13
    9fb8:	20c6703a 	and	r3,r4,r3
    9fbc:	18c00214 	ori	r3,r3,8
    9fc0:	10c01415 	stw	r3,80(r2)
      mix0->layer_config[2].Input_Control.Enable_Consume = 0;
    9fc4:	d0a00b97 	ldw	r2,-32722(gp)
    9fc8:	11001417 	ldw	r4,80(r2)
    9fcc:	00ffff44 	movi	r3,-3
    9fd0:	20c6703a 	and	r3,r4,r3
    9fd4:	10c01415 	stw	r3,80(r2)
#endif

#ifdef ALT_MODULE_CLASS_video_core_0_alt_vip_cl_cvo_0
      cvo0->Control              = shared_ram0->cvo[0].control;
    9fd8:	d0a00c97 	ldw	r2,-32718(gp)
    9fdc:	d0e01197 	ldw	r3,-32698(gp)
    9fe0:	18c03817 	ldw	r3,224(r3)
    9fe4:	10c00015 	stw	r3,0(r2)
      shared_ram0->cvo[0].status = cvo0->Status;
    9fe8:	d0a01197 	ldw	r2,-32698(gp)
    9fec:	d0e00c97 	ldw	r3,-32718(gp)
    9ff0:	18c00117 	ldw	r3,4(r3)
    9ff4:	10c03915 	stw	r3,228(r2)
#endif

      if( get_adv_info( 0 ) || get_adv_info( 1 ) )
    9ff8:	0009883a 	mov	r4,zero
    9ffc:	00085600 	call	8560 <get_adv_info>
    a000:	10803fcc 	andi	r2,r2,255
    a004:	1000041e 	bne	r2,zero,a018 <main+0xedc>
    a008:	01000044 	movi	r4,1
    a00c:	00085600 	call	8560 <get_adv_info>
    a010:	10803fcc 	andi	r2,r2,255
    a014:	10000126 	beq	r2,zero,a01c <main+0xee0>
        reset_flash_adv7613();
    a018:	00088a80 	call	88a8 <reset_flash_adv7613>

      alt_u8 i;
      alt_u8 layer_control[2];
      alt_u8 layer_status[2];

      for( i = 0; i < 2; ++i ) {
    a01c:	e03ffc05 	stb	zero,-16(fp)
    a020:	0000ba06 	br	a30c <main+0x11d0>

        switch( shared_ram0->sw[0].output[i] ) {
    a024:	d0e01197 	ldw	r3,-32698(gp)
    a028:	e0bffc03 	ldbu	r2,-16(fp)
    a02c:	10800684 	addi	r2,r2,26
    a030:	1085883a 	add	r2,r2,r2
    a034:	1085883a 	add	r2,r2,r2
    a038:	1885883a 	add	r2,r3,r2
    a03c:	10800017 	ldw	r2,0(r2)
    a040:	10c00120 	cmpeqi	r3,r2,4
    a044:	18002d1e 	bne	r3,zero,a0fc <main+0xfc0>
    a048:	10c00168 	cmpgeui	r3,r2,5
    a04c:	1800031e 	bne	r3,zero,a05c <main+0xf20>
    a050:	108000a0 	cmpeqi	r2,r2,2
    a054:	10003b1e 	bne	r2,zero,a144 <main+0x1008>
    a058:	00004c06 	br	a18c <main+0x1050>
    a05c:	10c00220 	cmpeqi	r3,r2,8
    a060:	1800141e 	bne	r3,zero,a0b4 <main+0xf78>
    a064:	10800420 	cmpeqi	r2,r2,16
    a068:	10004826 	beq	r2,zero,a18c <main+0x1050>
      	  case 16:
      	    layer_control[i] = ( cvi3->Control & 0x00000001 );
    a06c:	e0bffc03 	ldbu	r2,-16(fp)
    a070:	d0e00497 	ldw	r3,-32750(gp)
    a074:	18c00017 	ldw	r3,0(r3)
    a078:	18c0004c 	andi	r3,r3,1
    a07c:	1809883a 	mov	r4,r3
    a080:	e0fffc84 	addi	r3,fp,-14
    a084:	1885883a 	add	r2,r3,r2
    a088:	11000005 	stb	r4,0(r2)
      	    layer_status[i]  = ( ( cvi3->Status & 0x00000400 ) >> 10 );
    a08c:	e0bffc03 	ldbu	r2,-16(fp)
    a090:	d0e00497 	ldw	r3,-32750(gp)
    a094:	18c00117 	ldw	r3,4(r3)
    a098:	18c1000c 	andi	r3,r3,1024
    a09c:	1806d2ba 	srli	r3,r3,10
    a0a0:	1809883a 	mov	r4,r3
    a0a4:	e0fffd04 	addi	r3,fp,-12
    a0a8:	1885883a 	add	r2,r3,r2
    a0ac:	11000005 	stb	r4,0(r2)
            break;
    a0b0:	00003f06 	br	a1b0 <main+0x1074>
      	  case 8:
      	    layer_control[i] = ( cvi2->Control & 0x00000001 );
    a0b4:	e0bffc03 	ldbu	r2,-16(fp)
    a0b8:	d0e00397 	ldw	r3,-32754(gp)
    a0bc:	18c00017 	ldw	r3,0(r3)
    a0c0:	18c0004c 	andi	r3,r3,1
    a0c4:	1809883a 	mov	r4,r3
    a0c8:	e0fffc84 	addi	r3,fp,-14
    a0cc:	1885883a 	add	r2,r3,r2
    a0d0:	11000005 	stb	r4,0(r2)
      	    layer_status[i]  = ( ( cvi2->Status & 0x00000400 ) >> 10 );
    a0d4:	e0bffc03 	ldbu	r2,-16(fp)
    a0d8:	d0e00397 	ldw	r3,-32754(gp)
    a0dc:	18c00117 	ldw	r3,4(r3)
    a0e0:	18c1000c 	andi	r3,r3,1024
    a0e4:	1806d2ba 	srli	r3,r3,10
    a0e8:	1809883a 	mov	r4,r3
    a0ec:	e0fffd04 	addi	r3,fp,-12
    a0f0:	1885883a 	add	r2,r3,r2
    a0f4:	11000005 	stb	r4,0(r2)
      	    break;
    a0f8:	00002d06 	br	a1b0 <main+0x1074>
      	  case 4:
      	    layer_control[i] = ( cvi1->Control & 0x00000001 );
    a0fc:	e0bffc03 	ldbu	r2,-16(fp)
    a100:	d0e00297 	ldw	r3,-32758(gp)
    a104:	18c00017 	ldw	r3,0(r3)
    a108:	18c0004c 	andi	r3,r3,1
    a10c:	1809883a 	mov	r4,r3
    a110:	e0fffc84 	addi	r3,fp,-14
    a114:	1885883a 	add	r2,r3,r2
    a118:	11000005 	stb	r4,0(r2)
      	    layer_status[i]  = ( ( cvi1->Status & 0x00000400 ) >> 10 );
    a11c:	e0bffc03 	ldbu	r2,-16(fp)
    a120:	d0e00297 	ldw	r3,-32758(gp)
    a124:	18c00117 	ldw	r3,4(r3)
    a128:	18c1000c 	andi	r3,r3,1024
    a12c:	1806d2ba 	srli	r3,r3,10
    a130:	1809883a 	mov	r4,r3
    a134:	e0fffd04 	addi	r3,fp,-12
    a138:	1885883a 	add	r2,r3,r2
    a13c:	11000005 	stb	r4,0(r2)
      	    break;
    a140:	00001b06 	br	a1b0 <main+0x1074>
      	  case 2:
      	    layer_control[i] = ( cvi0->Control & 0x00000001 );
    a144:	e0bffc03 	ldbu	r2,-16(fp)
    a148:	d0e00197 	ldw	r3,-32762(gp)
    a14c:	18c00017 	ldw	r3,0(r3)
    a150:	18c0004c 	andi	r3,r3,1
    a154:	1809883a 	mov	r4,r3
    a158:	e0fffc84 	addi	r3,fp,-14
    a15c:	1885883a 	add	r2,r3,r2
    a160:	11000005 	stb	r4,0(r2)
      	    layer_status[i]  = ( ( cvi0->Status & 0x00000400 ) >> 10 );
    a164:	e0bffc03 	ldbu	r2,-16(fp)
    a168:	d0e00197 	ldw	r3,-32762(gp)
    a16c:	18c00117 	ldw	r3,4(r3)
    a170:	18c1000c 	andi	r3,r3,1024
    a174:	1806d2ba 	srli	r3,r3,10
    a178:	1809883a 	mov	r4,r3
    a17c:	e0fffd04 	addi	r3,fp,-12
    a180:	1885883a 	add	r2,r3,r2
    a184:	11000005 	stb	r4,0(r2)
      	    break;
    a188:	00000906 	br	a1b0 <main+0x1074>
      	  default:
      	    layer_control[i] = 0;
    a18c:	e0bffc03 	ldbu	r2,-16(fp)
    a190:	e0fffc84 	addi	r3,fp,-14
    a194:	1885883a 	add	r2,r3,r2
    a198:	10000005 	stb	zero,0(r2)
      	    layer_status[i]  = 0;
    a19c:	e0bffc03 	ldbu	r2,-16(fp)
    a1a0:	e0fffd04 	addi	r3,fp,-12
    a1a4:	1885883a 	add	r2,r3,r2
    a1a8:	10000005 	stb	zero,0(r2)
      	    break;
    a1ac:	0001883a 	nop
        }

        if( layer_control[i] ) {
    a1b0:	e0bffc03 	ldbu	r2,-16(fp)
    a1b4:	e0fffc84 	addi	r3,fp,-14
    a1b8:	1885883a 	add	r2,r3,r2
    a1bc:	10800003 	ldbu	r2,0(r2)
    a1c0:	10803fcc 	andi	r2,r2,255
    a1c4:	10004e26 	beq	r2,zero,a300 <main+0x11c4>
          if( layer_status[i] ) {
    a1c8:	e0bffc03 	ldbu	r2,-16(fp)
    a1cc:	e0fffd04 	addi	r3,fp,-12
    a1d0:	1885883a 	add	r2,r3,r2
    a1d4:	10800003 	ldbu	r2,0(r2)
    a1d8:	10803fcc 	andi	r2,r2,255
    a1dc:	10002a26 	beq	r2,zero,a288 <main+0x114c>
            if( layer_timer[i] < LAYER_TIMEOUT )
    a1e0:	e0bffc03 	ldbu	r2,-16(fp)
    a1e4:	1087883a 	add	r3,r2,r2
    a1e8:	d0a01304 	addi	r2,gp,-32692
    a1ec:	1885883a 	add	r2,r3,r2
    a1f0:	1080000b 	ldhu	r2,0(r2)
    a1f4:	10bfffcc 	andi	r2,r2,65535
    a1f8:	108000e8 	cmpgeui	r2,r2,3
    a1fc:	10000c1e 	bne	r2,zero,a230 <main+0x10f4>
              layer_timer[i]++;
    a200:	e0bffc03 	ldbu	r2,-16(fp)
    a204:	1089883a 	add	r4,r2,r2
    a208:	d0e01304 	addi	r3,gp,-32692
    a20c:	20c7883a 	add	r3,r4,r3
    a210:	18c0000b 	ldhu	r3,0(r3)
    a214:	18c00044 	addi	r3,r3,1
    a218:	1809883a 	mov	r4,r3
    a21c:	1087883a 	add	r3,r2,r2
    a220:	d0a01304 	addi	r2,gp,-32692
    a224:	1885883a 	add	r2,r3,r2
    a228:	1100000d 	sth	r4,0(r2)
    a22c:	00003406 	br	a300 <main+0x11c4>
            else
              mix0->layer_config[i].Input_Control.Enable = shared_ram0->mix[0].layer[i].control;
    a230:	d4200b97 	ldw	r16,-32722(gp)
    a234:	e13ffc03 	ldbu	r4,-16(fp)
    a238:	d0e01197 	ldw	r3,-32698(gp)
    a23c:	e0bffc03 	ldbu	r2,-16(fp)
    a240:	108002c4 	addi	r2,r2,11
    a244:	1004913a 	slli	r2,r2,4
    a248:	1885883a 	add	r2,r3,r2
    a24c:	10800003 	ldbu	r2,0(r2)
    a250:	1080004c 	andi	r2,r2,1
    a254:	1023883a 	mov	r17,r2
    a258:	01400504 	movi	r5,20
    a25c:	000a42c0 	call	a42c <__mulsi3>
    a260:	8085883a 	add	r2,r16,r2
    a264:	10800a04 	addi	r2,r2,40
    a268:	88c03fcc 	andi	r3,r17,255
    a26c:	18c0004c 	andi	r3,r3,1
    a270:	11400017 	ldw	r5,0(r2)
    a274:	013fff84 	movi	r4,-2
    a278:	2908703a 	and	r4,r5,r4
    a27c:	20c6b03a 	or	r3,r4,r3
    a280:	10c00015 	stw	r3,0(r2)
    a284:	00001e06 	br	a300 <main+0x11c4>
          } else {
            if( layer_timer[i] > 0 )
    a288:	e0bffc03 	ldbu	r2,-16(fp)
    a28c:	1087883a 	add	r3,r2,r2
    a290:	d0a01304 	addi	r2,gp,-32692
    a294:	1885883a 	add	r2,r3,r2
    a298:	1080000b 	ldhu	r2,0(r2)
    a29c:	10bfffcc 	andi	r2,r2,65535
    a2a0:	10000c26 	beq	r2,zero,a2d4 <main+0x1198>
              layer_timer[i]--;
    a2a4:	e0bffc03 	ldbu	r2,-16(fp)
    a2a8:	1089883a 	add	r4,r2,r2
    a2ac:	d0e01304 	addi	r3,gp,-32692
    a2b0:	20c7883a 	add	r3,r4,r3
    a2b4:	18c0000b 	ldhu	r3,0(r3)
    a2b8:	18ffffc4 	addi	r3,r3,-1
    a2bc:	1809883a 	mov	r4,r3
    a2c0:	1087883a 	add	r3,r2,r2
    a2c4:	d0a01304 	addi	r2,gp,-32692
    a2c8:	1885883a 	add	r2,r3,r2
    a2cc:	1100000d 	sth	r4,0(r2)
    a2d0:	00000b06 	br	a300 <main+0x11c4>
            else
              mix0->layer_config[i].Input_Control.Enable = 0;
    a2d4:	d4200b97 	ldw	r16,-32722(gp)
    a2d8:	e0bffc03 	ldbu	r2,-16(fp)
    a2dc:	01400504 	movi	r5,20
    a2e0:	1009883a 	mov	r4,r2
    a2e4:	000a42c0 	call	a42c <__mulsi3>
    a2e8:	8085883a 	add	r2,r16,r2
    a2ec:	10800a04 	addi	r2,r2,40
    a2f0:	11000017 	ldw	r4,0(r2)
    a2f4:	00ffff84 	movi	r3,-2
    a2f8:	20c6703a 	and	r3,r4,r3
    a2fc:	10c00015 	stw	r3,0(r2)

      alt_u8 i;
      alt_u8 layer_control[2];
      alt_u8 layer_status[2];

      for( i = 0; i < 2; ++i ) {
    a300:	e0bffc03 	ldbu	r2,-16(fp)
    a304:	10800044 	addi	r2,r2,1
    a308:	e0bffc05 	stb	r2,-16(fp)
    a30c:	e0bffc03 	ldbu	r2,-16(fp)
    a310:	108000b0 	cmpltui	r2,r2,2
    a314:	103f431e 	bne	r2,zero,a024 <_gp+0xffff4dc6>
          }
        }

      }

      if( ( lcd_type == MFD_15INCH_TYPE ) && ( ~IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DP_XCVR_LINK ) ) {
    a318:	d0a01283 	ldbu	r2,-32694(gp)
    a31c:	10803fcc 	andi	r2,r2,255
    a320:	10800098 	cmpnei	r2,r2,2
    a324:	10001d1e 	bne	r2,zero,a39c <main+0x1260>
    a328:	00800074 	movhi	r2,1
    a32c:	10800037 	ldwio	r2,0(r2)
    a330:	1080800c 	andi	r2,r2,512
    a334:	1000191e 	bne	r2,zero,a39c <main+0x1260>
    	if( edp_timer < ( EDP_TIMEOUT - 1 ) ) {
    a338:	d0a012c3 	ldbu	r2,-32693(gp)
    a33c:	10803fcc 	andi	r2,r2,255
    a340:	10800128 	cmpgeui	r2,r2,4
    a344:	1000041e 	bne	r2,zero,a358 <main+0x121c>
      	  edp_timer++;
    a348:	d0a012c3 	ldbu	r2,-32693(gp)
    a34c:	10800044 	addi	r2,r2,1
    a350:	d0a012c5 	stb	r2,-32693(gp)
    a354:	00001106 	br	a39c <main+0x1260>
    	} else if( edp_timer < EDP_TIMEOUT ) {
    a358:	d0a012c3 	ldbu	r2,-32693(gp)
    a35c:	10803fcc 	andi	r2,r2,255
    a360:	10800168 	cmpgeui	r2,r2,5
    a364:	1000081e 	bne	r2,zero,a388 <main+0x124c>
    	  edp_timer++;
    a368:	d0a012c3 	ldbu	r2,-32693(gp)
    a36c:	10800044 	addi	r2,r2,1
    a370:	d0a012c5 	stb	r2,-32693(gp)
          IOWR_ALTERA_AVALON_PIO_CLEAR_BITS( PIO_0_BASE, GPIO_DP_HPD );
    a374:	00c00234 	movhi	r3,8
    a378:	00800074 	movhi	r2,1
    a37c:	10800504 	addi	r2,r2,20
    a380:	10c00035 	stwio	r3,0(r2)
    a384:	00000506 	br	a39c <main+0x1260>
        } else {
       	  edp_timer = 0;
    a388:	d02012c5 	stb	zero,-32693(gp)
          IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_DP_HPD );
    a38c:	00c00234 	movhi	r3,8
    a390:	00800074 	movhi	r2,1
    a394:	10800404 	addi	r2,r2,16
    a398:	10c00035 	stwio	r3,0(r2)
        }
      }

      usleep( 10000 );
    a39c:	0109c404 	movi	r4,10000
    a3a0:	000c7740 	call	c774 <usleep>
      case MFD_10INCH_TYPE:
        gpio_set( GPIO_OUT1_EN_N | GPIO_LCD_BKLT_EN1 );
        break;
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
    a3a4:	00800074 	movhi	r2,1
    a3a8:	10800037 	ldwio	r2,0(r2)
    a3ac:	1081000c 	andi	r2,r2,1024
    a3b0:	103b6a26 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
    a3b4:	00800074 	movhi	r2,1
    a3b8:	10800037 	ldwio	r2,0(r2)
    a3bc:	1082000c 	andi	r2,r2,2048
      case MFD_10INCH_TYPE:
        gpio_set( GPIO_OUT1_EN_N | GPIO_LCD_BKLT_EN1 );
        break;
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
    a3c0:	103b6626 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
    a3c4:	00800074 	movhi	r2,1
    a3c8:	10800037 	ldwio	r2,0(r2)
    a3cc:	1084000c 	andi	r2,r2,4096
        gpio_set( GPIO_OUT1_EN_N | GPIO_LCD_BKLT_EN1 );
        break;
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
    a3d0:	103b6226 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
    a3d4:	00800074 	movhi	r2,1
    a3d8:	10800037 	ldwio	r2,0(r2)
    a3dc:	1088000c 	andi	r2,r2,8192
        break;
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
    a3e0:	103b5e26 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_INIT_DONE    ) &&
    a3e4:	00800074 	movhi	r2,1
    a3e8:	10800037 	ldwio	r2,0(r2)
    a3ec:	1080006c 	andhi	r2,r2,1
    }

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
    a3f0:	103b5a26 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_INIT_DONE    ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_INIT_DONE    ) &&
    a3f4:	00800074 	movhi	r2,1
    a3f8:	10800037 	ldwio	r2,0(r2)
    a3fc:	108000ac 	andhi	r2,r2,2

    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_INIT_DONE    ) &&
    a400:	103b5626 	beq	r2,zero,915c <_gp+0xffff3efe>
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_INIT_DONE    ) &&
	       ( lcd_type == ( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_LCD_SIZE_MASK ) >> GPIO_LCD_SIZE_SHIFT ) ) ) {
    a404:	d0a01283 	ldbu	r2,-32694(gp)
    a408:	10c03fcc 	andi	r3,r2,255
    a40c:	00800074 	movhi	r2,1
    a410:	10800037 	ldwio	r2,0(r2)
    a414:	1080032c 	andhi	r2,r2,12
    a418:	1005d4ba 	srai	r2,r2,18
    while( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED       ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_CAL_SUCCESS  ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_INIT_DONE    ) &&
	       ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_INIT_DONE    ) &&
    a41c:	18bd6926 	beq	r3,r2,99c4 <_gp+0xffff4766>
    a420:	003b4e06 	br	915c <_gp+0xffff3efe>

    if( ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_BOT_LOCKED ) &&
        ( IORD_ALTERA_AVALON_PIO_DATA( PIO_0_BASE ) & GPIO_DDR_TOP_LOCKED ) )
      IOWR_ALTERA_AVALON_PIO_SET_BITS( PIO_0_BASE, GPIO_DDR_BOT_GLOBAL_RESET | GPIO_DDR_TOP_GLOBAL_RESET );
    else
      continue;
    a424:	0001883a 	nop

      usleep( 10000 );

    }

  }
    a428:	003b4c06 	br	915c <_gp+0xffff3efe>

0000a42c <__mulsi3>:
    a42c:	0005883a 	mov	r2,zero
    a430:	20000726 	beq	r4,zero,a450 <__mulsi3+0x24>
    a434:	20c0004c 	andi	r3,r4,1
    a438:	2008d07a 	srli	r4,r4,1
    a43c:	18000126 	beq	r3,zero,a444 <__mulsi3+0x18>
    a440:	1145883a 	add	r2,r2,r5
    a444:	294b883a 	add	r5,r5,r5
    a448:	203ffa1e 	bne	r4,zero,a434 <_gp+0xffff51d6>
    a44c:	f800283a 	ret
    a450:	f800283a 	ret

0000a454 <__adddf3>:
    a454:	02c00434 	movhi	r11,16
    a458:	5affffc4 	addi	r11,r11,-1
    a45c:	2806d7fa 	srli	r3,r5,31
    a460:	2ad4703a 	and	r10,r5,r11
    a464:	3ad2703a 	and	r9,r7,r11
    a468:	3804d53a 	srli	r2,r7,20
    a46c:	3018d77a 	srli	r12,r6,29
    a470:	280ad53a 	srli	r5,r5,20
    a474:	501490fa 	slli	r10,r10,3
    a478:	2010d77a 	srli	r8,r4,29
    a47c:	481290fa 	slli	r9,r9,3
    a480:	380ed7fa 	srli	r7,r7,31
    a484:	defffb04 	addi	sp,sp,-20
    a488:	de00012e 	bgeu	sp,et,a490 <__adddf3+0x3c>
    a48c:	003b68fa 	trap	3
    a490:	dc800215 	stw	r18,8(sp)
    a494:	dc400115 	stw	r17,4(sp)
    a498:	dc000015 	stw	r16,0(sp)
    a49c:	dfc00415 	stw	ra,16(sp)
    a4a0:	dcc00315 	stw	r19,12(sp)
    a4a4:	1c803fcc 	andi	r18,r3,255
    a4a8:	2c01ffcc 	andi	r16,r5,2047
    a4ac:	5210b03a 	or	r8,r10,r8
    a4b0:	202290fa 	slli	r17,r4,3
    a4b4:	1081ffcc 	andi	r2,r2,2047
    a4b8:	4b12b03a 	or	r9,r9,r12
    a4bc:	300c90fa 	slli	r6,r6,3
    a4c0:	91c07526 	beq	r18,r7,a698 <__adddf3+0x244>
    a4c4:	8087c83a 	sub	r3,r16,r2
    a4c8:	00c0ab0e 	bge	zero,r3,a778 <__adddf3+0x324>
    a4cc:	10002a1e 	bne	r2,zero,a578 <__adddf3+0x124>
    a4d0:	4984b03a 	or	r2,r9,r6
    a4d4:	1000961e 	bne	r2,zero,a730 <__adddf3+0x2dc>
    a4d8:	888001cc 	andi	r2,r17,7
    a4dc:	10000726 	beq	r2,zero,a4fc <__adddf3+0xa8>
    a4e0:	888003cc 	andi	r2,r17,15
    a4e4:	00c00104 	movi	r3,4
    a4e8:	10c00426 	beq	r2,r3,a4fc <__adddf3+0xa8>
    a4ec:	88c7883a 	add	r3,r17,r3
    a4f0:	1c63803a 	cmpltu	r17,r3,r17
    a4f4:	4451883a 	add	r8,r8,r17
    a4f8:	1823883a 	mov	r17,r3
    a4fc:	4080202c 	andhi	r2,r8,128
    a500:	10005926 	beq	r2,zero,a668 <__adddf3+0x214>
    a504:	84000044 	addi	r16,r16,1
    a508:	0081ffc4 	movi	r2,2047
    a50c:	8080ba26 	beq	r16,r2,a7f8 <__adddf3+0x3a4>
    a510:	00bfe034 	movhi	r2,65408
    a514:	10bfffc4 	addi	r2,r2,-1
    a518:	4090703a 	and	r8,r8,r2
    a51c:	4004977a 	slli	r2,r8,29
    a520:	4010927a 	slli	r8,r8,9
    a524:	8822d0fa 	srli	r17,r17,3
    a528:	8401ffcc 	andi	r16,r16,2047
    a52c:	4010d33a 	srli	r8,r8,12
    a530:	9007883a 	mov	r3,r18
    a534:	1444b03a 	or	r2,r2,r17
    a538:	8401ffcc 	andi	r16,r16,2047
    a53c:	8020953a 	slli	r16,r16,20
    a540:	18c03fcc 	andi	r3,r3,255
    a544:	01000434 	movhi	r4,16
    a548:	213fffc4 	addi	r4,r4,-1
    a54c:	180697fa 	slli	r3,r3,31
    a550:	4110703a 	and	r8,r8,r4
    a554:	4410b03a 	or	r8,r8,r16
    a558:	40c6b03a 	or	r3,r8,r3
    a55c:	dfc00417 	ldw	ra,16(sp)
    a560:	dcc00317 	ldw	r19,12(sp)
    a564:	dc800217 	ldw	r18,8(sp)
    a568:	dc400117 	ldw	r17,4(sp)
    a56c:	dc000017 	ldw	r16,0(sp)
    a570:	dec00504 	addi	sp,sp,20
    a574:	f800283a 	ret
    a578:	0081ffc4 	movi	r2,2047
    a57c:	80bfd626 	beq	r16,r2,a4d8 <_gp+0xffff527a>
    a580:	4a402034 	orhi	r9,r9,128
    a584:	00800e04 	movi	r2,56
    a588:	10c09f16 	blt	r2,r3,a808 <__adddf3+0x3b4>
    a58c:	008007c4 	movi	r2,31
    a590:	10c0c216 	blt	r2,r3,a89c <__adddf3+0x448>
    a594:	00800804 	movi	r2,32
    a598:	10c5c83a 	sub	r2,r2,r3
    a59c:	488a983a 	sll	r5,r9,r2
    a5a0:	30c8d83a 	srl	r4,r6,r3
    a5a4:	3084983a 	sll	r2,r6,r2
    a5a8:	48c6d83a 	srl	r3,r9,r3
    a5ac:	290cb03a 	or	r6,r5,r4
    a5b0:	1004c03a 	cmpne	r2,r2,zero
    a5b4:	308cb03a 	or	r6,r6,r2
    a5b8:	898dc83a 	sub	r6,r17,r6
    a5bc:	89a3803a 	cmpltu	r17,r17,r6
    a5c0:	40d1c83a 	sub	r8,r8,r3
    a5c4:	4451c83a 	sub	r8,r8,r17
    a5c8:	3023883a 	mov	r17,r6
    a5cc:	4080202c 	andhi	r2,r8,128
    a5d0:	10002326 	beq	r2,zero,a660 <__adddf3+0x20c>
    a5d4:	04c02034 	movhi	r19,128
    a5d8:	9cffffc4 	addi	r19,r19,-1
    a5dc:	44e6703a 	and	r19,r8,r19
    a5e0:	98007626 	beq	r19,zero,a7bc <__adddf3+0x368>
    a5e4:	9809883a 	mov	r4,r19
    a5e8:	000b7c40 	call	b7c4 <__clzsi2>
    a5ec:	10fffe04 	addi	r3,r2,-8
    a5f0:	010007c4 	movi	r4,31
    a5f4:	20c07716 	blt	r4,r3,a7d4 <__adddf3+0x380>
    a5f8:	00800804 	movi	r2,32
    a5fc:	10c5c83a 	sub	r2,r2,r3
    a600:	8884d83a 	srl	r2,r17,r2
    a604:	98d0983a 	sll	r8,r19,r3
    a608:	88e2983a 	sll	r17,r17,r3
    a60c:	1204b03a 	or	r2,r2,r8
    a610:	1c007416 	blt	r3,r16,a7e4 <__adddf3+0x390>
    a614:	1c21c83a 	sub	r16,r3,r16
    a618:	82000044 	addi	r8,r16,1
    a61c:	00c007c4 	movi	r3,31
    a620:	1a009116 	blt	r3,r8,a868 <__adddf3+0x414>
    a624:	00c00804 	movi	r3,32
    a628:	1a07c83a 	sub	r3,r3,r8
    a62c:	8a08d83a 	srl	r4,r17,r8
    a630:	88e2983a 	sll	r17,r17,r3
    a634:	10c6983a 	sll	r3,r2,r3
    a638:	1210d83a 	srl	r8,r2,r8
    a63c:	8804c03a 	cmpne	r2,r17,zero
    a640:	1906b03a 	or	r3,r3,r4
    a644:	18a2b03a 	or	r17,r3,r2
    a648:	0021883a 	mov	r16,zero
    a64c:	003fa206 	br	a4d8 <_gp+0xffff527a>
    a650:	1890b03a 	or	r8,r3,r2
    a654:	40017d26 	beq	r8,zero,ac4c <__adddf3+0x7f8>
    a658:	1011883a 	mov	r8,r2
    a65c:	1823883a 	mov	r17,r3
    a660:	888001cc 	andi	r2,r17,7
    a664:	103f9e1e 	bne	r2,zero,a4e0 <_gp+0xffff5282>
    a668:	4004977a 	slli	r2,r8,29
    a66c:	8822d0fa 	srli	r17,r17,3
    a670:	4010d0fa 	srli	r8,r8,3
    a674:	9007883a 	mov	r3,r18
    a678:	1444b03a 	or	r2,r2,r17
    a67c:	0101ffc4 	movi	r4,2047
    a680:	81002426 	beq	r16,r4,a714 <__adddf3+0x2c0>
    a684:	8120703a 	and	r16,r16,r4
    a688:	01000434 	movhi	r4,16
    a68c:	213fffc4 	addi	r4,r4,-1
    a690:	4110703a 	and	r8,r8,r4
    a694:	003fa806 	br	a538 <_gp+0xffff52da>
    a698:	8089c83a 	sub	r4,r16,r2
    a69c:	01005e0e 	bge	zero,r4,a818 <__adddf3+0x3c4>
    a6a0:	10002b26 	beq	r2,zero,a750 <__adddf3+0x2fc>
    a6a4:	0081ffc4 	movi	r2,2047
    a6a8:	80bf8b26 	beq	r16,r2,a4d8 <_gp+0xffff527a>
    a6ac:	4a402034 	orhi	r9,r9,128
    a6b0:	00800e04 	movi	r2,56
    a6b4:	1100a40e 	bge	r2,r4,a948 <__adddf3+0x4f4>
    a6b8:	498cb03a 	or	r6,r9,r6
    a6bc:	300ac03a 	cmpne	r5,r6,zero
    a6c0:	0013883a 	mov	r9,zero
    a6c4:	2c4b883a 	add	r5,r5,r17
    a6c8:	2c63803a 	cmpltu	r17,r5,r17
    a6cc:	4a11883a 	add	r8,r9,r8
    a6d0:	8a11883a 	add	r8,r17,r8
    a6d4:	2823883a 	mov	r17,r5
    a6d8:	4080202c 	andhi	r2,r8,128
    a6dc:	103fe026 	beq	r2,zero,a660 <_gp+0xffff5402>
    a6e0:	84000044 	addi	r16,r16,1
    a6e4:	0081ffc4 	movi	r2,2047
    a6e8:	8080d226 	beq	r16,r2,aa34 <__adddf3+0x5e0>
    a6ec:	00bfe034 	movhi	r2,65408
    a6f0:	10bfffc4 	addi	r2,r2,-1
    a6f4:	4090703a 	and	r8,r8,r2
    a6f8:	880ad07a 	srli	r5,r17,1
    a6fc:	400897fa 	slli	r4,r8,31
    a700:	88c0004c 	andi	r3,r17,1
    a704:	28e2b03a 	or	r17,r5,r3
    a708:	4010d07a 	srli	r8,r8,1
    a70c:	2462b03a 	or	r17,r4,r17
    a710:	003f7106 	br	a4d8 <_gp+0xffff527a>
    a714:	4088b03a 	or	r4,r8,r2
    a718:	20014526 	beq	r4,zero,ac30 <__adddf3+0x7dc>
    a71c:	01000434 	movhi	r4,16
    a720:	42000234 	orhi	r8,r8,8
    a724:	213fffc4 	addi	r4,r4,-1
    a728:	4110703a 	and	r8,r8,r4
    a72c:	003f8206 	br	a538 <_gp+0xffff52da>
    a730:	18ffffc4 	addi	r3,r3,-1
    a734:	1800491e 	bne	r3,zero,a85c <__adddf3+0x408>
    a738:	898bc83a 	sub	r5,r17,r6
    a73c:	8963803a 	cmpltu	r17,r17,r5
    a740:	4251c83a 	sub	r8,r8,r9
    a744:	4451c83a 	sub	r8,r8,r17
    a748:	2823883a 	mov	r17,r5
    a74c:	003f9f06 	br	a5cc <_gp+0xffff536e>
    a750:	4984b03a 	or	r2,r9,r6
    a754:	103f6026 	beq	r2,zero,a4d8 <_gp+0xffff527a>
    a758:	213fffc4 	addi	r4,r4,-1
    a75c:	2000931e 	bne	r4,zero,a9ac <__adddf3+0x558>
    a760:	898d883a 	add	r6,r17,r6
    a764:	3463803a 	cmpltu	r17,r6,r17
    a768:	4251883a 	add	r8,r8,r9
    a76c:	8a11883a 	add	r8,r17,r8
    a770:	3023883a 	mov	r17,r6
    a774:	003fd806 	br	a6d8 <_gp+0xffff547a>
    a778:	1800541e 	bne	r3,zero,a8cc <__adddf3+0x478>
    a77c:	80800044 	addi	r2,r16,1
    a780:	1081ffcc 	andi	r2,r2,2047
    a784:	00c00044 	movi	r3,1
    a788:	1880a00e 	bge	r3,r2,aa0c <__adddf3+0x5b8>
    a78c:	8989c83a 	sub	r4,r17,r6
    a790:	8905803a 	cmpltu	r2,r17,r4
    a794:	4267c83a 	sub	r19,r8,r9
    a798:	98a7c83a 	sub	r19,r19,r2
    a79c:	9880202c 	andhi	r2,r19,128
    a7a0:	10006326 	beq	r2,zero,a930 <__adddf3+0x4dc>
    a7a4:	3463c83a 	sub	r17,r6,r17
    a7a8:	4a07c83a 	sub	r3,r9,r8
    a7ac:	344d803a 	cmpltu	r6,r6,r17
    a7b0:	19a7c83a 	sub	r19,r3,r6
    a7b4:	3825883a 	mov	r18,r7
    a7b8:	983f8a1e 	bne	r19,zero,a5e4 <_gp+0xffff5386>
    a7bc:	8809883a 	mov	r4,r17
    a7c0:	000b7c40 	call	b7c4 <__clzsi2>
    a7c4:	10800804 	addi	r2,r2,32
    a7c8:	10fffe04 	addi	r3,r2,-8
    a7cc:	010007c4 	movi	r4,31
    a7d0:	20ff890e 	bge	r4,r3,a5f8 <_gp+0xffff539a>
    a7d4:	10bff604 	addi	r2,r2,-40
    a7d8:	8884983a 	sll	r2,r17,r2
    a7dc:	0023883a 	mov	r17,zero
    a7e0:	1c3f8c0e 	bge	r3,r16,a614 <_gp+0xffff53b6>
    a7e4:	023fe034 	movhi	r8,65408
    a7e8:	423fffc4 	addi	r8,r8,-1
    a7ec:	80e1c83a 	sub	r16,r16,r3
    a7f0:	1210703a 	and	r8,r2,r8
    a7f4:	003f3806 	br	a4d8 <_gp+0xffff527a>
    a7f8:	9007883a 	mov	r3,r18
    a7fc:	0011883a 	mov	r8,zero
    a800:	0005883a 	mov	r2,zero
    a804:	003f4c06 	br	a538 <_gp+0xffff52da>
    a808:	498cb03a 	or	r6,r9,r6
    a80c:	300cc03a 	cmpne	r6,r6,zero
    a810:	0007883a 	mov	r3,zero
    a814:	003f6806 	br	a5b8 <_gp+0xffff535a>
    a818:	20009c1e 	bne	r4,zero,aa8c <__adddf3+0x638>
    a81c:	80800044 	addi	r2,r16,1
    a820:	1141ffcc 	andi	r5,r2,2047
    a824:	01000044 	movi	r4,1
    a828:	2140670e 	bge	r4,r5,a9c8 <__adddf3+0x574>
    a82c:	0101ffc4 	movi	r4,2047
    a830:	11007f26 	beq	r2,r4,aa30 <__adddf3+0x5dc>
    a834:	898d883a 	add	r6,r17,r6
    a838:	4247883a 	add	r3,r8,r9
    a83c:	3451803a 	cmpltu	r8,r6,r17
    a840:	40d1883a 	add	r8,r8,r3
    a844:	402297fa 	slli	r17,r8,31
    a848:	300cd07a 	srli	r6,r6,1
    a84c:	4010d07a 	srli	r8,r8,1
    a850:	1021883a 	mov	r16,r2
    a854:	89a2b03a 	or	r17,r17,r6
    a858:	003f1f06 	br	a4d8 <_gp+0xffff527a>
    a85c:	0081ffc4 	movi	r2,2047
    a860:	80bf481e 	bne	r16,r2,a584 <_gp+0xffff5326>
    a864:	003f1c06 	br	a4d8 <_gp+0xffff527a>
    a868:	843ff844 	addi	r16,r16,-31
    a86c:	01000804 	movi	r4,32
    a870:	1406d83a 	srl	r3,r2,r16
    a874:	41005026 	beq	r8,r4,a9b8 <__adddf3+0x564>
    a878:	01001004 	movi	r4,64
    a87c:	2211c83a 	sub	r8,r4,r8
    a880:	1204983a 	sll	r2,r2,r8
    a884:	88a2b03a 	or	r17,r17,r2
    a888:	8822c03a 	cmpne	r17,r17,zero
    a88c:	1c62b03a 	or	r17,r3,r17
    a890:	0011883a 	mov	r8,zero
    a894:	0021883a 	mov	r16,zero
    a898:	003f7106 	br	a660 <_gp+0xffff5402>
    a89c:	193ff804 	addi	r4,r3,-32
    a8a0:	00800804 	movi	r2,32
    a8a4:	4908d83a 	srl	r4,r9,r4
    a8a8:	18804526 	beq	r3,r2,a9c0 <__adddf3+0x56c>
    a8ac:	00801004 	movi	r2,64
    a8b0:	10c5c83a 	sub	r2,r2,r3
    a8b4:	4886983a 	sll	r3,r9,r2
    a8b8:	198cb03a 	or	r6,r3,r6
    a8bc:	300cc03a 	cmpne	r6,r6,zero
    a8c0:	218cb03a 	or	r6,r4,r6
    a8c4:	0007883a 	mov	r3,zero
    a8c8:	003f3b06 	br	a5b8 <_gp+0xffff535a>
    a8cc:	80002a26 	beq	r16,zero,a978 <__adddf3+0x524>
    a8d0:	0101ffc4 	movi	r4,2047
    a8d4:	11006826 	beq	r2,r4,aa78 <__adddf3+0x624>
    a8d8:	00c7c83a 	sub	r3,zero,r3
    a8dc:	42002034 	orhi	r8,r8,128
    a8e0:	01000e04 	movi	r4,56
    a8e4:	20c07c16 	blt	r4,r3,aad8 <__adddf3+0x684>
    a8e8:	010007c4 	movi	r4,31
    a8ec:	20c0da16 	blt	r4,r3,ac58 <__adddf3+0x804>
    a8f0:	01000804 	movi	r4,32
    a8f4:	20c9c83a 	sub	r4,r4,r3
    a8f8:	4114983a 	sll	r10,r8,r4
    a8fc:	88cad83a 	srl	r5,r17,r3
    a900:	8908983a 	sll	r4,r17,r4
    a904:	40c6d83a 	srl	r3,r8,r3
    a908:	5162b03a 	or	r17,r10,r5
    a90c:	2008c03a 	cmpne	r4,r4,zero
    a910:	8922b03a 	or	r17,r17,r4
    a914:	3463c83a 	sub	r17,r6,r17
    a918:	48c7c83a 	sub	r3,r9,r3
    a91c:	344d803a 	cmpltu	r6,r6,r17
    a920:	1991c83a 	sub	r8,r3,r6
    a924:	1021883a 	mov	r16,r2
    a928:	3825883a 	mov	r18,r7
    a92c:	003f2706 	br	a5cc <_gp+0xffff536e>
    a930:	24d0b03a 	or	r8,r4,r19
    a934:	40001b1e 	bne	r8,zero,a9a4 <__adddf3+0x550>
    a938:	0005883a 	mov	r2,zero
    a93c:	0007883a 	mov	r3,zero
    a940:	0021883a 	mov	r16,zero
    a944:	003f4d06 	br	a67c <_gp+0xffff541e>
    a948:	008007c4 	movi	r2,31
    a94c:	11003c16 	blt	r2,r4,aa40 <__adddf3+0x5ec>
    a950:	00800804 	movi	r2,32
    a954:	1105c83a 	sub	r2,r2,r4
    a958:	488e983a 	sll	r7,r9,r2
    a95c:	310ad83a 	srl	r5,r6,r4
    a960:	3084983a 	sll	r2,r6,r2
    a964:	4912d83a 	srl	r9,r9,r4
    a968:	394ab03a 	or	r5,r7,r5
    a96c:	1004c03a 	cmpne	r2,r2,zero
    a970:	288ab03a 	or	r5,r5,r2
    a974:	003f5306 	br	a6c4 <_gp+0xffff5466>
    a978:	4448b03a 	or	r4,r8,r17
    a97c:	20003e26 	beq	r4,zero,aa78 <__adddf3+0x624>
    a980:	00c6303a 	nor	r3,zero,r3
    a984:	18003a1e 	bne	r3,zero,aa70 <__adddf3+0x61c>
    a988:	3463c83a 	sub	r17,r6,r17
    a98c:	4a07c83a 	sub	r3,r9,r8
    a990:	344d803a 	cmpltu	r6,r6,r17
    a994:	1991c83a 	sub	r8,r3,r6
    a998:	1021883a 	mov	r16,r2
    a99c:	3825883a 	mov	r18,r7
    a9a0:	003f0a06 	br	a5cc <_gp+0xffff536e>
    a9a4:	2023883a 	mov	r17,r4
    a9a8:	003f0d06 	br	a5e0 <_gp+0xffff5382>
    a9ac:	0081ffc4 	movi	r2,2047
    a9b0:	80bf3f1e 	bne	r16,r2,a6b0 <_gp+0xffff5452>
    a9b4:	003ec806 	br	a4d8 <_gp+0xffff527a>
    a9b8:	0005883a 	mov	r2,zero
    a9bc:	003fb106 	br	a884 <_gp+0xffff5626>
    a9c0:	0007883a 	mov	r3,zero
    a9c4:	003fbc06 	br	a8b8 <_gp+0xffff565a>
    a9c8:	4444b03a 	or	r2,r8,r17
    a9cc:	8000871e 	bne	r16,zero,abec <__adddf3+0x798>
    a9d0:	1000ba26 	beq	r2,zero,acbc <__adddf3+0x868>
    a9d4:	4984b03a 	or	r2,r9,r6
    a9d8:	103ebf26 	beq	r2,zero,a4d8 <_gp+0xffff527a>
    a9dc:	8985883a 	add	r2,r17,r6
    a9e0:	4247883a 	add	r3,r8,r9
    a9e4:	1451803a 	cmpltu	r8,r2,r17
    a9e8:	40d1883a 	add	r8,r8,r3
    a9ec:	40c0202c 	andhi	r3,r8,128
    a9f0:	1023883a 	mov	r17,r2
    a9f4:	183f1a26 	beq	r3,zero,a660 <_gp+0xffff5402>
    a9f8:	00bfe034 	movhi	r2,65408
    a9fc:	10bfffc4 	addi	r2,r2,-1
    aa00:	2021883a 	mov	r16,r4
    aa04:	4090703a 	and	r8,r8,r2
    aa08:	003eb306 	br	a4d8 <_gp+0xffff527a>
    aa0c:	4444b03a 	or	r2,r8,r17
    aa10:	8000291e 	bne	r16,zero,aab8 <__adddf3+0x664>
    aa14:	10004b1e 	bne	r2,zero,ab44 <__adddf3+0x6f0>
    aa18:	4990b03a 	or	r8,r9,r6
    aa1c:	40008b26 	beq	r8,zero,ac4c <__adddf3+0x7f8>
    aa20:	4811883a 	mov	r8,r9
    aa24:	3023883a 	mov	r17,r6
    aa28:	3825883a 	mov	r18,r7
    aa2c:	003eaa06 	br	a4d8 <_gp+0xffff527a>
    aa30:	1021883a 	mov	r16,r2
    aa34:	0011883a 	mov	r8,zero
    aa38:	0005883a 	mov	r2,zero
    aa3c:	003f0f06 	br	a67c <_gp+0xffff541e>
    aa40:	217ff804 	addi	r5,r4,-32
    aa44:	00800804 	movi	r2,32
    aa48:	494ad83a 	srl	r5,r9,r5
    aa4c:	20807d26 	beq	r4,r2,ac44 <__adddf3+0x7f0>
    aa50:	00801004 	movi	r2,64
    aa54:	1109c83a 	sub	r4,r2,r4
    aa58:	4912983a 	sll	r9,r9,r4
    aa5c:	498cb03a 	or	r6,r9,r6
    aa60:	300cc03a 	cmpne	r6,r6,zero
    aa64:	298ab03a 	or	r5,r5,r6
    aa68:	0013883a 	mov	r9,zero
    aa6c:	003f1506 	br	a6c4 <_gp+0xffff5466>
    aa70:	0101ffc4 	movi	r4,2047
    aa74:	113f9a1e 	bne	r2,r4,a8e0 <_gp+0xffff5682>
    aa78:	4811883a 	mov	r8,r9
    aa7c:	3023883a 	mov	r17,r6
    aa80:	1021883a 	mov	r16,r2
    aa84:	3825883a 	mov	r18,r7
    aa88:	003e9306 	br	a4d8 <_gp+0xffff527a>
    aa8c:	8000161e 	bne	r16,zero,aae8 <__adddf3+0x694>
    aa90:	444ab03a 	or	r5,r8,r17
    aa94:	28005126 	beq	r5,zero,abdc <__adddf3+0x788>
    aa98:	0108303a 	nor	r4,zero,r4
    aa9c:	20004d1e 	bne	r4,zero,abd4 <__adddf3+0x780>
    aaa0:	89a3883a 	add	r17,r17,r6
    aaa4:	4253883a 	add	r9,r8,r9
    aaa8:	898d803a 	cmpltu	r6,r17,r6
    aaac:	3251883a 	add	r8,r6,r9
    aab0:	1021883a 	mov	r16,r2
    aab4:	003f0806 	br	a6d8 <_gp+0xffff547a>
    aab8:	1000301e 	bne	r2,zero,ab7c <__adddf3+0x728>
    aabc:	4984b03a 	or	r2,r9,r6
    aac0:	10007126 	beq	r2,zero,ac88 <__adddf3+0x834>
    aac4:	4811883a 	mov	r8,r9
    aac8:	3023883a 	mov	r17,r6
    aacc:	3825883a 	mov	r18,r7
    aad0:	0401ffc4 	movi	r16,2047
    aad4:	003e8006 	br	a4d8 <_gp+0xffff527a>
    aad8:	4462b03a 	or	r17,r8,r17
    aadc:	8822c03a 	cmpne	r17,r17,zero
    aae0:	0007883a 	mov	r3,zero
    aae4:	003f8b06 	br	a914 <_gp+0xffff56b6>
    aae8:	0141ffc4 	movi	r5,2047
    aaec:	11403b26 	beq	r2,r5,abdc <__adddf3+0x788>
    aaf0:	0109c83a 	sub	r4,zero,r4
    aaf4:	42002034 	orhi	r8,r8,128
    aaf8:	01400e04 	movi	r5,56
    aafc:	29006716 	blt	r5,r4,ac9c <__adddf3+0x848>
    ab00:	014007c4 	movi	r5,31
    ab04:	29007016 	blt	r5,r4,acc8 <__adddf3+0x874>
    ab08:	01400804 	movi	r5,32
    ab0c:	290bc83a 	sub	r5,r5,r4
    ab10:	4154983a 	sll	r10,r8,r5
    ab14:	890ed83a 	srl	r7,r17,r4
    ab18:	894a983a 	sll	r5,r17,r5
    ab1c:	4108d83a 	srl	r4,r8,r4
    ab20:	51e2b03a 	or	r17,r10,r7
    ab24:	280ac03a 	cmpne	r5,r5,zero
    ab28:	8962b03a 	or	r17,r17,r5
    ab2c:	89a3883a 	add	r17,r17,r6
    ab30:	2253883a 	add	r9,r4,r9
    ab34:	898d803a 	cmpltu	r6,r17,r6
    ab38:	3251883a 	add	r8,r6,r9
    ab3c:	1021883a 	mov	r16,r2
    ab40:	003ee506 	br	a6d8 <_gp+0xffff547a>
    ab44:	4984b03a 	or	r2,r9,r6
    ab48:	103e6326 	beq	r2,zero,a4d8 <_gp+0xffff527a>
    ab4c:	8987c83a 	sub	r3,r17,r6
    ab50:	88c9803a 	cmpltu	r4,r17,r3
    ab54:	4245c83a 	sub	r2,r8,r9
    ab58:	1105c83a 	sub	r2,r2,r4
    ab5c:	1100202c 	andhi	r4,r2,128
    ab60:	203ebb26 	beq	r4,zero,a650 <_gp+0xffff53f2>
    ab64:	3463c83a 	sub	r17,r6,r17
    ab68:	4a07c83a 	sub	r3,r9,r8
    ab6c:	344d803a 	cmpltu	r6,r6,r17
    ab70:	1991c83a 	sub	r8,r3,r6
    ab74:	3825883a 	mov	r18,r7
    ab78:	003e5706 	br	a4d8 <_gp+0xffff527a>
    ab7c:	4984b03a 	or	r2,r9,r6
    ab80:	10002e26 	beq	r2,zero,ac3c <__adddf3+0x7e8>
    ab84:	4004d0fa 	srli	r2,r8,3
    ab88:	8822d0fa 	srli	r17,r17,3
    ab8c:	4010977a 	slli	r8,r8,29
    ab90:	10c0022c 	andhi	r3,r2,8
    ab94:	4462b03a 	or	r17,r8,r17
    ab98:	18000826 	beq	r3,zero,abbc <__adddf3+0x768>
    ab9c:	4808d0fa 	srli	r4,r9,3
    aba0:	20c0022c 	andhi	r3,r4,8
    aba4:	1800051e 	bne	r3,zero,abbc <__adddf3+0x768>
    aba8:	300cd0fa 	srli	r6,r6,3
    abac:	4806977a 	slli	r3,r9,29
    abb0:	2005883a 	mov	r2,r4
    abb4:	3825883a 	mov	r18,r7
    abb8:	19a2b03a 	or	r17,r3,r6
    abbc:	8810d77a 	srli	r8,r17,29
    abc0:	100490fa 	slli	r2,r2,3
    abc4:	882290fa 	slli	r17,r17,3
    abc8:	0401ffc4 	movi	r16,2047
    abcc:	4090b03a 	or	r8,r8,r2
    abd0:	003e4106 	br	a4d8 <_gp+0xffff527a>
    abd4:	0141ffc4 	movi	r5,2047
    abd8:	117fc71e 	bne	r2,r5,aaf8 <_gp+0xffff589a>
    abdc:	4811883a 	mov	r8,r9
    abe0:	3023883a 	mov	r17,r6
    abe4:	1021883a 	mov	r16,r2
    abe8:	003e3b06 	br	a4d8 <_gp+0xffff527a>
    abec:	10002f26 	beq	r2,zero,acac <__adddf3+0x858>
    abf0:	4984b03a 	or	r2,r9,r6
    abf4:	10001126 	beq	r2,zero,ac3c <__adddf3+0x7e8>
    abf8:	4004d0fa 	srli	r2,r8,3
    abfc:	8822d0fa 	srli	r17,r17,3
    ac00:	4010977a 	slli	r8,r8,29
    ac04:	10c0022c 	andhi	r3,r2,8
    ac08:	4462b03a 	or	r17,r8,r17
    ac0c:	183feb26 	beq	r3,zero,abbc <_gp+0xffff595e>
    ac10:	4808d0fa 	srli	r4,r9,3
    ac14:	20c0022c 	andhi	r3,r4,8
    ac18:	183fe81e 	bne	r3,zero,abbc <_gp+0xffff595e>
    ac1c:	300cd0fa 	srli	r6,r6,3
    ac20:	4806977a 	slli	r3,r9,29
    ac24:	2005883a 	mov	r2,r4
    ac28:	19a2b03a 	or	r17,r3,r6
    ac2c:	003fe306 	br	abbc <_gp+0xffff595e>
    ac30:	0011883a 	mov	r8,zero
    ac34:	0005883a 	mov	r2,zero
    ac38:	003e3f06 	br	a538 <_gp+0xffff52da>
    ac3c:	0401ffc4 	movi	r16,2047
    ac40:	003e2506 	br	a4d8 <_gp+0xffff527a>
    ac44:	0013883a 	mov	r9,zero
    ac48:	003f8406 	br	aa5c <_gp+0xffff57fe>
    ac4c:	0005883a 	mov	r2,zero
    ac50:	0007883a 	mov	r3,zero
    ac54:	003e8906 	br	a67c <_gp+0xffff541e>
    ac58:	197ff804 	addi	r5,r3,-32
    ac5c:	01000804 	movi	r4,32
    ac60:	414ad83a 	srl	r5,r8,r5
    ac64:	19002426 	beq	r3,r4,acf8 <__adddf3+0x8a4>
    ac68:	01001004 	movi	r4,64
    ac6c:	20c7c83a 	sub	r3,r4,r3
    ac70:	40c6983a 	sll	r3,r8,r3
    ac74:	1c46b03a 	or	r3,r3,r17
    ac78:	1806c03a 	cmpne	r3,r3,zero
    ac7c:	28e2b03a 	or	r17,r5,r3
    ac80:	0007883a 	mov	r3,zero
    ac84:	003f2306 	br	a914 <_gp+0xffff56b6>
    ac88:	0007883a 	mov	r3,zero
    ac8c:	5811883a 	mov	r8,r11
    ac90:	00bfffc4 	movi	r2,-1
    ac94:	0401ffc4 	movi	r16,2047
    ac98:	003e7806 	br	a67c <_gp+0xffff541e>
    ac9c:	4462b03a 	or	r17,r8,r17
    aca0:	8822c03a 	cmpne	r17,r17,zero
    aca4:	0009883a 	mov	r4,zero
    aca8:	003fa006 	br	ab2c <_gp+0xffff58ce>
    acac:	4811883a 	mov	r8,r9
    acb0:	3023883a 	mov	r17,r6
    acb4:	0401ffc4 	movi	r16,2047
    acb8:	003e0706 	br	a4d8 <_gp+0xffff527a>
    acbc:	4811883a 	mov	r8,r9
    acc0:	3023883a 	mov	r17,r6
    acc4:	003e0406 	br	a4d8 <_gp+0xffff527a>
    acc8:	21fff804 	addi	r7,r4,-32
    accc:	01400804 	movi	r5,32
    acd0:	41ced83a 	srl	r7,r8,r7
    acd4:	21400a26 	beq	r4,r5,ad00 <__adddf3+0x8ac>
    acd8:	01401004 	movi	r5,64
    acdc:	2909c83a 	sub	r4,r5,r4
    ace0:	4108983a 	sll	r4,r8,r4
    ace4:	2448b03a 	or	r4,r4,r17
    ace8:	2008c03a 	cmpne	r4,r4,zero
    acec:	3922b03a 	or	r17,r7,r4
    acf0:	0009883a 	mov	r4,zero
    acf4:	003f8d06 	br	ab2c <_gp+0xffff58ce>
    acf8:	0007883a 	mov	r3,zero
    acfc:	003fdd06 	br	ac74 <_gp+0xffff5a16>
    ad00:	0009883a 	mov	r4,zero
    ad04:	003ff706 	br	ace4 <_gp+0xffff5a86>

0000ad08 <__divdf3>:
    ad08:	defff004 	addi	sp,sp,-64
    ad0c:	de00012e 	bgeu	sp,et,ad14 <__divdf3+0xc>
    ad10:	003b68fa 	trap	3
    ad14:	dc800815 	stw	r18,32(sp)
    ad18:	2824d53a 	srli	r18,r5,20
    ad1c:	dd800c15 	stw	r22,48(sp)
    ad20:	282cd7fa 	srli	r22,r5,31
    ad24:	dc000615 	stw	r16,24(sp)
    ad28:	04000434 	movhi	r16,16
    ad2c:	843fffc4 	addi	r16,r16,-1
    ad30:	dfc00f15 	stw	ra,60(sp)
    ad34:	df000e15 	stw	fp,56(sp)
    ad38:	ddc00d15 	stw	r23,52(sp)
    ad3c:	dd400b15 	stw	r21,44(sp)
    ad40:	dd000a15 	stw	r20,40(sp)
    ad44:	dcc00915 	stw	r19,36(sp)
    ad48:	dc400715 	stw	r17,28(sp)
    ad4c:	9481ffcc 	andi	r18,r18,2047
    ad50:	2c20703a 	and	r16,r5,r16
    ad54:	b2003fcc 	andi	r8,r22,255
    ad58:	90006126 	beq	r18,zero,aee0 <__divdf3+0x1d8>
    ad5c:	0081ffc4 	movi	r2,2047
    ad60:	202b883a 	mov	r21,r4
    ad64:	90803726 	beq	r18,r2,ae44 <__divdf3+0x13c>
    ad68:	80800434 	orhi	r2,r16,16
    ad6c:	100490fa 	slli	r2,r2,3
    ad70:	2020d77a 	srli	r16,r4,29
    ad74:	202a90fa 	slli	r21,r4,3
    ad78:	94bf0044 	addi	r18,r18,-1023
    ad7c:	80a0b03a 	or	r16,r16,r2
    ad80:	0013883a 	mov	r9,zero
    ad84:	000b883a 	mov	r5,zero
    ad88:	3806d53a 	srli	r3,r7,20
    ad8c:	382ed7fa 	srli	r23,r7,31
    ad90:	04400434 	movhi	r17,16
    ad94:	8c7fffc4 	addi	r17,r17,-1
    ad98:	18c1ffcc 	andi	r3,r3,2047
    ad9c:	3029883a 	mov	r20,r6
    ada0:	3c62703a 	and	r17,r7,r17
    ada4:	bf003fcc 	andi	fp,r23,255
    ada8:	18006e26 	beq	r3,zero,af64 <__divdf3+0x25c>
    adac:	0081ffc4 	movi	r2,2047
    adb0:	18806626 	beq	r3,r2,af4c <__divdf3+0x244>
    adb4:	88800434 	orhi	r2,r17,16
    adb8:	100490fa 	slli	r2,r2,3
    adbc:	3022d77a 	srli	r17,r6,29
    adc0:	302890fa 	slli	r20,r6,3
    adc4:	18ff0044 	addi	r3,r3,-1023
    adc8:	88a2b03a 	or	r17,r17,r2
    adcc:	000f883a 	mov	r7,zero
    add0:	b5e6f03a 	xor	r19,r22,r23
    add4:	3a4cb03a 	or	r6,r7,r9
    add8:	008003c4 	movi	r2,15
    addc:	9809883a 	mov	r4,r19
    ade0:	90c7c83a 	sub	r3,r18,r3
    ade4:	9cc03fcc 	andi	r19,r19,255
    ade8:	11809636 	bltu	r2,r6,b044 <__divdf3+0x33c>
    adec:	300c90ba 	slli	r6,r6,2
    adf0:	00800074 	movhi	r2,1
    adf4:	10ab8104 	addi	r2,r2,-20988
    adf8:	308d883a 	add	r6,r6,r2
    adfc:	30800017 	ldw	r2,0(r6)
    ae00:	1000683a 	jmp	r2
    ae04:	0000b044 	movi	zero,705
    ae08:	0000ae7c 	xorhi	zero,zero,697
    ae0c:	0000b034 	movhi	zero,704
    ae10:	0000ae70 	cmpltui	zero,zero,697
    ae14:	0000b034 	movhi	zero,704
    ae18:	0000b008 	cmpgei	zero,zero,704
    ae1c:	0000b034 	movhi	zero,704
    ae20:	0000ae70 	cmpltui	zero,zero,697
    ae24:	0000ae7c 	xorhi	zero,zero,697
    ae28:	0000ae7c 	xorhi	zero,zero,697
    ae2c:	0000b008 	cmpgei	zero,zero,704
    ae30:	0000ae70 	cmpltui	zero,zero,697
    ae34:	0000ae60 	cmpeqi	zero,zero,697
    ae38:	0000ae60 	cmpeqi	zero,zero,697
    ae3c:	0000ae60 	cmpeqi	zero,zero,697
    ae40:	0000b3cc 	andi	zero,zero,719
    ae44:	2404b03a 	or	r2,r4,r16
    ae48:	10006c1e 	bne	r2,zero,affc <__divdf3+0x2f4>
    ae4c:	02400204 	movi	r9,8
    ae50:	0021883a 	mov	r16,zero
    ae54:	002b883a 	mov	r21,zero
    ae58:	01400084 	movi	r5,2
    ae5c:	003fca06 	br	ad88 <_gp+0xffff5b2a>
    ae60:	8023883a 	mov	r17,r16
    ae64:	a829883a 	mov	r20,r21
    ae68:	4039883a 	mov	fp,r8
    ae6c:	280f883a 	mov	r7,r5
    ae70:	00800084 	movi	r2,2
    ae74:	3881601e 	bne	r7,r2,b3f8 <__divdf3+0x6f0>
    ae78:	e027883a 	mov	r19,fp
    ae7c:	9900004c 	andi	r4,r19,1
    ae80:	0081ffc4 	movi	r2,2047
    ae84:	0021883a 	mov	r16,zero
    ae88:	002b883a 	mov	r21,zero
    ae8c:	1004953a 	slli	r2,r2,20
    ae90:	20c03fcc 	andi	r3,r4,255
    ae94:	01400434 	movhi	r5,16
    ae98:	297fffc4 	addi	r5,r5,-1
    ae9c:	180697fa 	slli	r3,r3,31
    aea0:	8160703a 	and	r16,r16,r5
    aea4:	80a0b03a 	or	r16,r16,r2
    aea8:	80c6b03a 	or	r3,r16,r3
    aeac:	a805883a 	mov	r2,r21
    aeb0:	dfc00f17 	ldw	ra,60(sp)
    aeb4:	df000e17 	ldw	fp,56(sp)
    aeb8:	ddc00d17 	ldw	r23,52(sp)
    aebc:	dd800c17 	ldw	r22,48(sp)
    aec0:	dd400b17 	ldw	r21,44(sp)
    aec4:	dd000a17 	ldw	r20,40(sp)
    aec8:	dcc00917 	ldw	r19,36(sp)
    aecc:	dc800817 	ldw	r18,32(sp)
    aed0:	dc400717 	ldw	r17,28(sp)
    aed4:	dc000617 	ldw	r16,24(sp)
    aed8:	dec01004 	addi	sp,sp,64
    aedc:	f800283a 	ret
    aee0:	2404b03a 	or	r2,r4,r16
    aee4:	2023883a 	mov	r17,r4
    aee8:	10003f26 	beq	r2,zero,afe8 <__divdf3+0x2e0>
    aeec:	80015e26 	beq	r16,zero,b468 <__divdf3+0x760>
    aef0:	8009883a 	mov	r4,r16
    aef4:	d9800215 	stw	r6,8(sp)
    aef8:	d9c00515 	stw	r7,20(sp)
    aefc:	da000415 	stw	r8,16(sp)
    af00:	000b7c40 	call	b7c4 <__clzsi2>
    af04:	d9800217 	ldw	r6,8(sp)
    af08:	d9c00517 	ldw	r7,20(sp)
    af0c:	da000417 	ldw	r8,16(sp)
    af10:	113ffd44 	addi	r4,r2,-11
    af14:	00c00704 	movi	r3,28
    af18:	19014f16 	blt	r3,r4,b458 <__divdf3+0x750>
    af1c:	00c00744 	movi	r3,29
    af20:	157ffe04 	addi	r21,r2,-8
    af24:	1907c83a 	sub	r3,r3,r4
    af28:	8560983a 	sll	r16,r16,r21
    af2c:	88c6d83a 	srl	r3,r17,r3
    af30:	8d6a983a 	sll	r21,r17,r21
    af34:	1c20b03a 	or	r16,r3,r16
    af38:	1080fcc4 	addi	r2,r2,1011
    af3c:	00a5c83a 	sub	r18,zero,r2
    af40:	0013883a 	mov	r9,zero
    af44:	000b883a 	mov	r5,zero
    af48:	003f8f06 	br	ad88 <_gp+0xffff5b2a>
    af4c:	3444b03a 	or	r2,r6,r17
    af50:	1000231e 	bne	r2,zero,afe0 <__divdf3+0x2d8>
    af54:	0023883a 	mov	r17,zero
    af58:	0029883a 	mov	r20,zero
    af5c:	01c00084 	movi	r7,2
    af60:	003f9b06 	br	add0 <_gp+0xffff5b72>
    af64:	3444b03a 	or	r2,r6,r17
    af68:	10001926 	beq	r2,zero,afd0 <__divdf3+0x2c8>
    af6c:	88014b26 	beq	r17,zero,b49c <__divdf3+0x794>
    af70:	8809883a 	mov	r4,r17
    af74:	d9400115 	stw	r5,4(sp)
    af78:	d9800215 	stw	r6,8(sp)
    af7c:	da000415 	stw	r8,16(sp)
    af80:	da400315 	stw	r9,12(sp)
    af84:	000b7c40 	call	b7c4 <__clzsi2>
    af88:	d9400117 	ldw	r5,4(sp)
    af8c:	d9800217 	ldw	r6,8(sp)
    af90:	da000417 	ldw	r8,16(sp)
    af94:	da400317 	ldw	r9,12(sp)
    af98:	113ffd44 	addi	r4,r2,-11
    af9c:	00c00704 	movi	r3,28
    afa0:	19013a16 	blt	r3,r4,b48c <__divdf3+0x784>
    afa4:	00c00744 	movi	r3,29
    afa8:	153ffe04 	addi	r20,r2,-8
    afac:	1907c83a 	sub	r3,r3,r4
    afb0:	8d22983a 	sll	r17,r17,r20
    afb4:	30c6d83a 	srl	r3,r6,r3
    afb8:	3528983a 	sll	r20,r6,r20
    afbc:	1c62b03a 	or	r17,r3,r17
    afc0:	1080fcc4 	addi	r2,r2,1011
    afc4:	0087c83a 	sub	r3,zero,r2
    afc8:	000f883a 	mov	r7,zero
    afcc:	003f8006 	br	add0 <_gp+0xffff5b72>
    afd0:	0023883a 	mov	r17,zero
    afd4:	0029883a 	mov	r20,zero
    afd8:	01c00044 	movi	r7,1
    afdc:	003f7c06 	br	add0 <_gp+0xffff5b72>
    afe0:	01c000c4 	movi	r7,3
    afe4:	003f7a06 	br	add0 <_gp+0xffff5b72>
    afe8:	02400104 	movi	r9,4
    afec:	0021883a 	mov	r16,zero
    aff0:	002b883a 	mov	r21,zero
    aff4:	01400044 	movi	r5,1
    aff8:	003f6306 	br	ad88 <_gp+0xffff5b2a>
    affc:	02400304 	movi	r9,12
    b000:	014000c4 	movi	r5,3
    b004:	003f6006 	br	ad88 <_gp+0xffff5b2a>
    b008:	04000434 	movhi	r16,16
    b00c:	0009883a 	mov	r4,zero
    b010:	843fffc4 	addi	r16,r16,-1
    b014:	057fffc4 	movi	r21,-1
    b018:	0081ffc4 	movi	r2,2047
    b01c:	003f9b06 	br	ae8c <_gp+0xffff5c2e>
    b020:	00c00044 	movi	r3,1
    b024:	1887c83a 	sub	r3,r3,r2
    b028:	01000e04 	movi	r4,56
    b02c:	20c1530e 	bge	r4,r3,b57c <__divdf3+0x874>
    b030:	9900004c 	andi	r4,r19,1
    b034:	0005883a 	mov	r2,zero
    b038:	0021883a 	mov	r16,zero
    b03c:	002b883a 	mov	r21,zero
    b040:	003f9206 	br	ae8c <_gp+0xffff5c2e>
    b044:	8c012e36 	bltu	r17,r16,b500 <__divdf3+0x7f8>
    b048:	84412c26 	beq	r16,r17,b4fc <__divdf3+0x7f4>
    b04c:	a82f883a 	mov	r23,r21
    b050:	18ffffc4 	addi	r3,r3,-1
    b054:	002b883a 	mov	r21,zero
    b058:	a004d63a 	srli	r2,r20,24
    b05c:	8822923a 	slli	r17,r17,8
    b060:	a028923a 	slli	r20,r20,8
    b064:	8009883a 	mov	r4,r16
    b068:	88acb03a 	or	r22,r17,r2
    b06c:	dd000015 	stw	r20,0(sp)
    b070:	b028d43a 	srli	r20,r22,16
    b074:	d8c00215 	stw	r3,8(sp)
    b078:	b4bfffcc 	andi	r18,r22,65535
    b07c:	a00b883a 	mov	r5,r20
    b080:	000b9200 	call	b920 <__udivsi3>
    b084:	100b883a 	mov	r5,r2
    b088:	9009883a 	mov	r4,r18
    b08c:	1023883a 	mov	r17,r2
    b090:	000a42c0 	call	a42c <__mulsi3>
    b094:	8009883a 	mov	r4,r16
    b098:	a00b883a 	mov	r5,r20
    b09c:	1039883a 	mov	fp,r2
    b0a0:	000b9840 	call	b984 <__umodsi3>
    b0a4:	1004943a 	slli	r2,r2,16
    b0a8:	b808d43a 	srli	r4,r23,16
    b0ac:	d8c00217 	ldw	r3,8(sp)
    b0b0:	2084b03a 	or	r2,r4,r2
    b0b4:	1700062e 	bgeu	r2,fp,b0d0 <__divdf3+0x3c8>
    b0b8:	1585883a 	add	r2,r2,r22
    b0bc:	893fffc4 	addi	r4,r17,-1
    b0c0:	15811d36 	bltu	r2,r22,b538 <__divdf3+0x830>
    b0c4:	17011c2e 	bgeu	r2,fp,b538 <__divdf3+0x830>
    b0c8:	8c7fff84 	addi	r17,r17,-2
    b0cc:	1585883a 	add	r2,r2,r22
    b0d0:	1739c83a 	sub	fp,r2,fp
    b0d4:	a00b883a 	mov	r5,r20
    b0d8:	e009883a 	mov	r4,fp
    b0dc:	d8c00215 	stw	r3,8(sp)
    b0e0:	000b9200 	call	b920 <__udivsi3>
    b0e4:	100b883a 	mov	r5,r2
    b0e8:	9009883a 	mov	r4,r18
    b0ec:	1021883a 	mov	r16,r2
    b0f0:	000a42c0 	call	a42c <__mulsi3>
    b0f4:	a00b883a 	mov	r5,r20
    b0f8:	e009883a 	mov	r4,fp
    b0fc:	d8800415 	stw	r2,16(sp)
    b100:	000b9840 	call	b984 <__umodsi3>
    b104:	1004943a 	slli	r2,r2,16
    b108:	da000417 	ldw	r8,16(sp)
    b10c:	bdffffcc 	andi	r23,r23,65535
    b110:	b884b03a 	or	r2,r23,r2
    b114:	d8c00217 	ldw	r3,8(sp)
    b118:	1200062e 	bgeu	r2,r8,b134 <__divdf3+0x42c>
    b11c:	1585883a 	add	r2,r2,r22
    b120:	813fffc4 	addi	r4,r16,-1
    b124:	15810236 	bltu	r2,r22,b530 <__divdf3+0x828>
    b128:	1201012e 	bgeu	r2,r8,b530 <__divdf3+0x828>
    b12c:	843fff84 	addi	r16,r16,-2
    b130:	1585883a 	add	r2,r2,r22
    b134:	8822943a 	slli	r17,r17,16
    b138:	d9800017 	ldw	r6,0(sp)
    b13c:	1211c83a 	sub	r8,r2,r8
    b140:	8c22b03a 	or	r17,r17,r16
    b144:	373fffcc 	andi	fp,r6,65535
    b148:	8abfffcc 	andi	r10,r17,65535
    b14c:	8820d43a 	srli	r16,r17,16
    b150:	5009883a 	mov	r4,r10
    b154:	e00b883a 	mov	r5,fp
    b158:	302ed43a 	srli	r23,r6,16
    b15c:	d8c00215 	stw	r3,8(sp)
    b160:	da000415 	stw	r8,16(sp)
    b164:	da800115 	stw	r10,4(sp)
    b168:	000a42c0 	call	a42c <__mulsi3>
    b16c:	800b883a 	mov	r5,r16
    b170:	e009883a 	mov	r4,fp
    b174:	d8800515 	stw	r2,20(sp)
    b178:	000a42c0 	call	a42c <__mulsi3>
    b17c:	8009883a 	mov	r4,r16
    b180:	b80b883a 	mov	r5,r23
    b184:	d8800315 	stw	r2,12(sp)
    b188:	000a42c0 	call	a42c <__mulsi3>
    b18c:	da800117 	ldw	r10,4(sp)
    b190:	b80b883a 	mov	r5,r23
    b194:	1021883a 	mov	r16,r2
    b198:	5009883a 	mov	r4,r10
    b19c:	000a42c0 	call	a42c <__mulsi3>
    b1a0:	d9c00517 	ldw	r7,20(sp)
    b1a4:	da400317 	ldw	r9,12(sp)
    b1a8:	d8c00217 	ldw	r3,8(sp)
    b1ac:	3808d43a 	srli	r4,r7,16
    b1b0:	1245883a 	add	r2,r2,r9
    b1b4:	da000417 	ldw	r8,16(sp)
    b1b8:	2085883a 	add	r2,r4,r2
    b1bc:	1240022e 	bgeu	r2,r9,b1c8 <__divdf3+0x4c0>
    b1c0:	01000074 	movhi	r4,1
    b1c4:	8121883a 	add	r16,r16,r4
    b1c8:	1008d43a 	srli	r4,r2,16
    b1cc:	1004943a 	slli	r2,r2,16
    b1d0:	39ffffcc 	andi	r7,r7,65535
    b1d4:	2409883a 	add	r4,r4,r16
    b1d8:	11c5883a 	add	r2,r2,r7
    b1dc:	4100bb36 	bltu	r8,r4,b4cc <__divdf3+0x7c4>
    b1e0:	4100d726 	beq	r8,r4,b540 <__divdf3+0x838>
    b1e4:	4109c83a 	sub	r4,r8,r4
    b1e8:	a8a1c83a 	sub	r16,r21,r2
    b1ec:	ac2b803a 	cmpltu	r21,r21,r16
    b1f0:	256bc83a 	sub	r21,r4,r21
    b1f4:	b540d926 	beq	r22,r21,b55c <__divdf3+0x854>
    b1f8:	a00b883a 	mov	r5,r20
    b1fc:	a809883a 	mov	r4,r21
    b200:	d8c00215 	stw	r3,8(sp)
    b204:	000b9200 	call	b920 <__udivsi3>
    b208:	100b883a 	mov	r5,r2
    b20c:	9009883a 	mov	r4,r18
    b210:	d8800515 	stw	r2,20(sp)
    b214:	000a42c0 	call	a42c <__mulsi3>
    b218:	a809883a 	mov	r4,r21
    b21c:	a00b883a 	mov	r5,r20
    b220:	d8800415 	stw	r2,16(sp)
    b224:	000b9840 	call	b984 <__umodsi3>
    b228:	1004943a 	slli	r2,r2,16
    b22c:	8008d43a 	srli	r4,r16,16
    b230:	da000417 	ldw	r8,16(sp)
    b234:	d8c00217 	ldw	r3,8(sp)
    b238:	2084b03a 	or	r2,r4,r2
    b23c:	d9c00517 	ldw	r7,20(sp)
    b240:	1200062e 	bgeu	r2,r8,b25c <__divdf3+0x554>
    b244:	1585883a 	add	r2,r2,r22
    b248:	393fffc4 	addi	r4,r7,-1
    b24c:	1580c536 	bltu	r2,r22,b564 <__divdf3+0x85c>
    b250:	1200c42e 	bgeu	r2,r8,b564 <__divdf3+0x85c>
    b254:	39ffff84 	addi	r7,r7,-2
    b258:	1585883a 	add	r2,r2,r22
    b25c:	122bc83a 	sub	r21,r2,r8
    b260:	a00b883a 	mov	r5,r20
    b264:	a809883a 	mov	r4,r21
    b268:	d8c00215 	stw	r3,8(sp)
    b26c:	d9c00515 	stw	r7,20(sp)
    b270:	000b9200 	call	b920 <__udivsi3>
    b274:	9009883a 	mov	r4,r18
    b278:	100b883a 	mov	r5,r2
    b27c:	d8800415 	stw	r2,16(sp)
    b280:	000a42c0 	call	a42c <__mulsi3>
    b284:	a809883a 	mov	r4,r21
    b288:	a00b883a 	mov	r5,r20
    b28c:	1025883a 	mov	r18,r2
    b290:	000b9840 	call	b984 <__umodsi3>
    b294:	1004943a 	slli	r2,r2,16
    b298:	813fffcc 	andi	r4,r16,65535
    b29c:	d8c00217 	ldw	r3,8(sp)
    b2a0:	20a0b03a 	or	r16,r4,r2
    b2a4:	d9c00517 	ldw	r7,20(sp)
    b2a8:	da000417 	ldw	r8,16(sp)
    b2ac:	8480062e 	bgeu	r16,r18,b2c8 <__divdf3+0x5c0>
    b2b0:	85a1883a 	add	r16,r16,r22
    b2b4:	40bfffc4 	addi	r2,r8,-1
    b2b8:	8580ac36 	bltu	r16,r22,b56c <__divdf3+0x864>
    b2bc:	8480ab2e 	bgeu	r16,r18,b56c <__divdf3+0x864>
    b2c0:	423fff84 	addi	r8,r8,-2
    b2c4:	85a1883a 	add	r16,r16,r22
    b2c8:	3804943a 	slli	r2,r7,16
    b2cc:	84a1c83a 	sub	r16,r16,r18
    b2d0:	e009883a 	mov	r4,fp
    b2d4:	1228b03a 	or	r20,r2,r8
    b2d8:	a1ffffcc 	andi	r7,r20,65535
    b2dc:	a024d43a 	srli	r18,r20,16
    b2e0:	380b883a 	mov	r5,r7
    b2e4:	d8c00215 	stw	r3,8(sp)
    b2e8:	d9c00515 	stw	r7,20(sp)
    b2ec:	000a42c0 	call	a42c <__mulsi3>
    b2f0:	900b883a 	mov	r5,r18
    b2f4:	e009883a 	mov	r4,fp
    b2f8:	102b883a 	mov	r21,r2
    b2fc:	000a42c0 	call	a42c <__mulsi3>
    b300:	900b883a 	mov	r5,r18
    b304:	b809883a 	mov	r4,r23
    b308:	1039883a 	mov	fp,r2
    b30c:	000a42c0 	call	a42c <__mulsi3>
    b310:	d9c00517 	ldw	r7,20(sp)
    b314:	b80b883a 	mov	r5,r23
    b318:	1025883a 	mov	r18,r2
    b31c:	3809883a 	mov	r4,r7
    b320:	000a42c0 	call	a42c <__mulsi3>
    b324:	a808d43a 	srli	r4,r21,16
    b328:	1705883a 	add	r2,r2,fp
    b32c:	d8c00217 	ldw	r3,8(sp)
    b330:	2085883a 	add	r2,r4,r2
    b334:	1700022e 	bgeu	r2,fp,b340 <__divdf3+0x638>
    b338:	01000074 	movhi	r4,1
    b33c:	9125883a 	add	r18,r18,r4
    b340:	1008d43a 	srli	r4,r2,16
    b344:	1004943a 	slli	r2,r2,16
    b348:	ad7fffcc 	andi	r21,r21,65535
    b34c:	2489883a 	add	r4,r4,r18
    b350:	1545883a 	add	r2,r2,r21
    b354:	81003836 	bltu	r16,r4,b438 <__divdf3+0x730>
    b358:	81003626 	beq	r16,r4,b434 <__divdf3+0x72c>
    b35c:	a5000054 	ori	r20,r20,1
    b360:	1880ffc4 	addi	r2,r3,1023
    b364:	00bf2e0e 	bge	zero,r2,b020 <_gp+0xffff5dc2>
    b368:	a10001cc 	andi	r4,r20,7
    b36c:	20000726 	beq	r4,zero,b38c <__divdf3+0x684>
    b370:	a10003cc 	andi	r4,r20,15
    b374:	01400104 	movi	r5,4
    b378:	21400426 	beq	r4,r5,b38c <__divdf3+0x684>
    b37c:	a149883a 	add	r4,r20,r5
    b380:	2529803a 	cmpltu	r20,r4,r20
    b384:	8d23883a 	add	r17,r17,r20
    b388:	2029883a 	mov	r20,r4
    b38c:	8900402c 	andhi	r4,r17,256
    b390:	20000426 	beq	r4,zero,b3a4 <__divdf3+0x69c>
    b394:	18810004 	addi	r2,r3,1024
    b398:	00ffc034 	movhi	r3,65280
    b39c:	18ffffc4 	addi	r3,r3,-1
    b3a0:	88e2703a 	and	r17,r17,r3
    b3a4:	00c1ff84 	movi	r3,2046
    b3a8:	18beb416 	blt	r3,r2,ae7c <_gp+0xffff5c1e>
    b3ac:	a028d0fa 	srli	r20,r20,3
    b3b0:	882a977a 	slli	r21,r17,29
    b3b4:	8820927a 	slli	r16,r17,9
    b3b8:	1081ffcc 	andi	r2,r2,2047
    b3bc:	ad2ab03a 	or	r21,r21,r20
    b3c0:	8020d33a 	srli	r16,r16,12
    b3c4:	9900004c 	andi	r4,r19,1
    b3c8:	003eb006 	br	ae8c <_gp+0xffff5c2e>
    b3cc:	8080022c 	andhi	r2,r16,8
    b3d0:	10001226 	beq	r2,zero,b41c <__divdf3+0x714>
    b3d4:	8880022c 	andhi	r2,r17,8
    b3d8:	1000101e 	bne	r2,zero,b41c <__divdf3+0x714>
    b3dc:	00800434 	movhi	r2,16
    b3e0:	8c000234 	orhi	r16,r17,8
    b3e4:	10bfffc4 	addi	r2,r2,-1
    b3e8:	b809883a 	mov	r4,r23
    b3ec:	80a0703a 	and	r16,r16,r2
    b3f0:	a02b883a 	mov	r21,r20
    b3f4:	003f0806 	br	b018 <_gp+0xffff5dba>
    b3f8:	008000c4 	movi	r2,3
    b3fc:	3880b126 	beq	r7,r2,b6c4 <__divdf3+0x9bc>
    b400:	00800044 	movi	r2,1
    b404:	38805b1e 	bne	r7,r2,b574 <__divdf3+0x86c>
    b408:	e009883a 	mov	r4,fp
    b40c:	0005883a 	mov	r2,zero
    b410:	0021883a 	mov	r16,zero
    b414:	002b883a 	mov	r21,zero
    b418:	003e9c06 	br	ae8c <_gp+0xffff5c2e>
    b41c:	00800434 	movhi	r2,16
    b420:	84000234 	orhi	r16,r16,8
    b424:	10bfffc4 	addi	r2,r2,-1
    b428:	b009883a 	mov	r4,r22
    b42c:	80a0703a 	and	r16,r16,r2
    b430:	003ef906 	br	b018 <_gp+0xffff5dba>
    b434:	103fca26 	beq	r2,zero,b360 <_gp+0xffff6102>
    b438:	b421883a 	add	r16,r22,r16
    b43c:	a17fffc4 	addi	r5,r20,-1
    b440:	8580422e 	bgeu	r16,r22,b54c <__divdf3+0x844>
    b444:	2829883a 	mov	r20,r5
    b448:	813fc41e 	bne	r16,r4,b35c <_gp+0xffff60fe>
    b44c:	d9800017 	ldw	r6,0(sp)
    b450:	30bfc21e 	bne	r6,r2,b35c <_gp+0xffff60fe>
    b454:	003fc206 	br	b360 <_gp+0xffff6102>
    b458:	143ff604 	addi	r16,r2,-40
    b45c:	8c20983a 	sll	r16,r17,r16
    b460:	002b883a 	mov	r21,zero
    b464:	003eb406 	br	af38 <_gp+0xffff5cda>
    b468:	d9800215 	stw	r6,8(sp)
    b46c:	d9c00515 	stw	r7,20(sp)
    b470:	da000415 	stw	r8,16(sp)
    b474:	000b7c40 	call	b7c4 <__clzsi2>
    b478:	10800804 	addi	r2,r2,32
    b47c:	da000417 	ldw	r8,16(sp)
    b480:	d9c00517 	ldw	r7,20(sp)
    b484:	d9800217 	ldw	r6,8(sp)
    b488:	003ea106 	br	af10 <_gp+0xffff5cb2>
    b48c:	147ff604 	addi	r17,r2,-40
    b490:	3462983a 	sll	r17,r6,r17
    b494:	0029883a 	mov	r20,zero
    b498:	003ec906 	br	afc0 <_gp+0xffff5d62>
    b49c:	3009883a 	mov	r4,r6
    b4a0:	d9400115 	stw	r5,4(sp)
    b4a4:	d9800215 	stw	r6,8(sp)
    b4a8:	da000415 	stw	r8,16(sp)
    b4ac:	da400315 	stw	r9,12(sp)
    b4b0:	000b7c40 	call	b7c4 <__clzsi2>
    b4b4:	10800804 	addi	r2,r2,32
    b4b8:	da400317 	ldw	r9,12(sp)
    b4bc:	da000417 	ldw	r8,16(sp)
    b4c0:	d9800217 	ldw	r6,8(sp)
    b4c4:	d9400117 	ldw	r5,4(sp)
    b4c8:	003eb306 	br	af98 <_gp+0xffff5d3a>
    b4cc:	d9800017 	ldw	r6,0(sp)
    b4d0:	a9ab883a 	add	r21,r21,r6
    b4d4:	a98b803a 	cmpltu	r5,r21,r6
    b4d8:	2d8b883a 	add	r5,r5,r22
    b4dc:	2a11883a 	add	r8,r5,r8
    b4e0:	897fffc4 	addi	r5,r17,-1
    b4e4:	b2000c2e 	bgeu	r22,r8,b518 <__divdf3+0x810>
    b4e8:	41003f36 	bltu	r8,r4,b5e8 <__divdf3+0x8e0>
    b4ec:	22006c26 	beq	r4,r8,b6a0 <__divdf3+0x998>
    b4f0:	4109c83a 	sub	r4,r8,r4
    b4f4:	2823883a 	mov	r17,r5
    b4f8:	003f3b06 	br	b1e8 <_gp+0xffff5f8a>
    b4fc:	ad3ed336 	bltu	r21,r20,b04c <_gp+0xffff5dee>
    b500:	a804d07a 	srli	r2,r21,1
    b504:	802e97fa 	slli	r23,r16,31
    b508:	a82a97fa 	slli	r21,r21,31
    b50c:	8020d07a 	srli	r16,r16,1
    b510:	b8aeb03a 	or	r23,r23,r2
    b514:	003ed006 	br	b058 <_gp+0xffff5dfa>
    b518:	b23ff51e 	bne	r22,r8,b4f0 <_gp+0xffff6292>
    b51c:	d9800017 	ldw	r6,0(sp)
    b520:	a9bff12e 	bgeu	r21,r6,b4e8 <_gp+0xffff628a>
    b524:	b109c83a 	sub	r4,r22,r4
    b528:	2823883a 	mov	r17,r5
    b52c:	003f2e06 	br	b1e8 <_gp+0xffff5f8a>
    b530:	2021883a 	mov	r16,r4
    b534:	003eff06 	br	b134 <_gp+0xffff5ed6>
    b538:	2023883a 	mov	r17,r4
    b53c:	003ee406 	br	b0d0 <_gp+0xffff5e72>
    b540:	a8bfe236 	bltu	r21,r2,b4cc <_gp+0xffff626e>
    b544:	0009883a 	mov	r4,zero
    b548:	003f2706 	br	b1e8 <_gp+0xffff5f8a>
    b54c:	81002d36 	bltu	r16,r4,b604 <__divdf3+0x8fc>
    b550:	24005626 	beq	r4,r16,b6ac <__divdf3+0x9a4>
    b554:	2829883a 	mov	r20,r5
    b558:	003f8006 	br	b35c <_gp+0xffff60fe>
    b55c:	053fffc4 	movi	r20,-1
    b560:	003f7f06 	br	b360 <_gp+0xffff6102>
    b564:	200f883a 	mov	r7,r4
    b568:	003f3c06 	br	b25c <_gp+0xffff5ffe>
    b56c:	1011883a 	mov	r8,r2
    b570:	003f5506 	br	b2c8 <_gp+0xffff606a>
    b574:	e027883a 	mov	r19,fp
    b578:	003f7906 	br	b360 <_gp+0xffff6102>
    b57c:	010007c4 	movi	r4,31
    b580:	20c02816 	blt	r4,r3,b624 <__divdf3+0x91c>
    b584:	00800804 	movi	r2,32
    b588:	10c5c83a 	sub	r2,r2,r3
    b58c:	888a983a 	sll	r5,r17,r2
    b590:	a0c8d83a 	srl	r4,r20,r3
    b594:	a084983a 	sll	r2,r20,r2
    b598:	88e2d83a 	srl	r17,r17,r3
    b59c:	2906b03a 	or	r3,r5,r4
    b5a0:	1004c03a 	cmpne	r2,r2,zero
    b5a4:	1886b03a 	or	r3,r3,r2
    b5a8:	188001cc 	andi	r2,r3,7
    b5ac:	10000726 	beq	r2,zero,b5cc <__divdf3+0x8c4>
    b5b0:	188003cc 	andi	r2,r3,15
    b5b4:	01000104 	movi	r4,4
    b5b8:	11000426 	beq	r2,r4,b5cc <__divdf3+0x8c4>
    b5bc:	1805883a 	mov	r2,r3
    b5c0:	10c00104 	addi	r3,r2,4
    b5c4:	1885803a 	cmpltu	r2,r3,r2
    b5c8:	88a3883a 	add	r17,r17,r2
    b5cc:	8880202c 	andhi	r2,r17,128
    b5d0:	10002926 	beq	r2,zero,b678 <__divdf3+0x970>
    b5d4:	9900004c 	andi	r4,r19,1
    b5d8:	00800044 	movi	r2,1
    b5dc:	0021883a 	mov	r16,zero
    b5e0:	002b883a 	mov	r21,zero
    b5e4:	003e2906 	br	ae8c <_gp+0xffff5c2e>
    b5e8:	d9800017 	ldw	r6,0(sp)
    b5ec:	8c7fff84 	addi	r17,r17,-2
    b5f0:	a9ab883a 	add	r21,r21,r6
    b5f4:	a98b803a 	cmpltu	r5,r21,r6
    b5f8:	2d8b883a 	add	r5,r5,r22
    b5fc:	2a11883a 	add	r8,r5,r8
    b600:	003ef806 	br	b1e4 <_gp+0xffff5f86>
    b604:	d9800017 	ldw	r6,0(sp)
    b608:	318f883a 	add	r7,r6,r6
    b60c:	398b803a 	cmpltu	r5,r7,r6
    b610:	2d8d883a 	add	r6,r5,r22
    b614:	81a1883a 	add	r16,r16,r6
    b618:	a17fff84 	addi	r5,r20,-2
    b61c:	d9c00015 	stw	r7,0(sp)
    b620:	003f8806 	br	b444 <_gp+0xffff61e6>
    b624:	013ff844 	movi	r4,-31
    b628:	2085c83a 	sub	r2,r4,r2
    b62c:	8888d83a 	srl	r4,r17,r2
    b630:	00800804 	movi	r2,32
    b634:	18802126 	beq	r3,r2,b6bc <__divdf3+0x9b4>
    b638:	04001004 	movi	r16,64
    b63c:	80c7c83a 	sub	r3,r16,r3
    b640:	88e0983a 	sll	r16,r17,r3
    b644:	8504b03a 	or	r2,r16,r20
    b648:	1004c03a 	cmpne	r2,r2,zero
    b64c:	2084b03a 	or	r2,r4,r2
    b650:	144001cc 	andi	r17,r2,7
    b654:	88000d1e 	bne	r17,zero,b68c <__divdf3+0x984>
    b658:	0021883a 	mov	r16,zero
    b65c:	102ad0fa 	srli	r21,r2,3
    b660:	9900004c 	andi	r4,r19,1
    b664:	0005883a 	mov	r2,zero
    b668:	ac6ab03a 	or	r21,r21,r17
    b66c:	003e0706 	br	ae8c <_gp+0xffff5c2e>
    b670:	1007883a 	mov	r3,r2
    b674:	0023883a 	mov	r17,zero
    b678:	8820927a 	slli	r16,r17,9
    b67c:	1805883a 	mov	r2,r3
    b680:	8822977a 	slli	r17,r17,29
    b684:	8020d33a 	srli	r16,r16,12
    b688:	003ff406 	br	b65c <_gp+0xffff63fe>
    b68c:	10c003cc 	andi	r3,r2,15
    b690:	01000104 	movi	r4,4
    b694:	193ff626 	beq	r3,r4,b670 <_gp+0xffff6412>
    b698:	0023883a 	mov	r17,zero
    b69c:	003fc806 	br	b5c0 <_gp+0xffff6362>
    b6a0:	a8bfd136 	bltu	r21,r2,b5e8 <_gp+0xffff638a>
    b6a4:	2823883a 	mov	r17,r5
    b6a8:	003fa606 	br	b544 <_gp+0xffff62e6>
    b6ac:	d9800017 	ldw	r6,0(sp)
    b6b0:	30bfd436 	bltu	r6,r2,b604 <_gp+0xffff63a6>
    b6b4:	2829883a 	mov	r20,r5
    b6b8:	003f6406 	br	b44c <_gp+0xffff61ee>
    b6bc:	0021883a 	mov	r16,zero
    b6c0:	003fe006 	br	b644 <_gp+0xffff63e6>
    b6c4:	00800434 	movhi	r2,16
    b6c8:	8c000234 	orhi	r16,r17,8
    b6cc:	10bfffc4 	addi	r2,r2,-1
    b6d0:	e009883a 	mov	r4,fp
    b6d4:	80a0703a 	and	r16,r16,r2
    b6d8:	a02b883a 	mov	r21,r20
    b6dc:	003e4e06 	br	b018 <_gp+0xffff5dba>

0000b6e0 <__floatsidf>:
    b6e0:	defffd04 	addi	sp,sp,-12
    b6e4:	de00012e 	bgeu	sp,et,b6ec <__floatsidf+0xc>
    b6e8:	003b68fa 	trap	3
    b6ec:	dfc00215 	stw	ra,8(sp)
    b6f0:	dc400115 	stw	r17,4(sp)
    b6f4:	dc000015 	stw	r16,0(sp)
    b6f8:	20002b26 	beq	r4,zero,b7a8 <__floatsidf+0xc8>
    b6fc:	2023883a 	mov	r17,r4
    b700:	2020d7fa 	srli	r16,r4,31
    b704:	20002d16 	blt	r4,zero,b7bc <__floatsidf+0xdc>
    b708:	8809883a 	mov	r4,r17
    b70c:	000b7c40 	call	b7c4 <__clzsi2>
    b710:	01410784 	movi	r5,1054
    b714:	288bc83a 	sub	r5,r5,r2
    b718:	01010cc4 	movi	r4,1075
    b71c:	2149c83a 	sub	r4,r4,r5
    b720:	00c007c4 	movi	r3,31
    b724:	1900160e 	bge	r3,r4,b780 <__floatsidf+0xa0>
    b728:	00c104c4 	movi	r3,1043
    b72c:	1947c83a 	sub	r3,r3,r5
    b730:	88c6983a 	sll	r3,r17,r3
    b734:	00800434 	movhi	r2,16
    b738:	10bfffc4 	addi	r2,r2,-1
    b73c:	1886703a 	and	r3,r3,r2
    b740:	2941ffcc 	andi	r5,r5,2047
    b744:	800d883a 	mov	r6,r16
    b748:	0005883a 	mov	r2,zero
    b74c:	280a953a 	slli	r5,r5,20
    b750:	31803fcc 	andi	r6,r6,255
    b754:	01000434 	movhi	r4,16
    b758:	300c97fa 	slli	r6,r6,31
    b75c:	213fffc4 	addi	r4,r4,-1
    b760:	1906703a 	and	r3,r3,r4
    b764:	1946b03a 	or	r3,r3,r5
    b768:	1986b03a 	or	r3,r3,r6
    b76c:	dfc00217 	ldw	ra,8(sp)
    b770:	dc400117 	ldw	r17,4(sp)
    b774:	dc000017 	ldw	r16,0(sp)
    b778:	dec00304 	addi	sp,sp,12
    b77c:	f800283a 	ret
    b780:	00c002c4 	movi	r3,11
    b784:	1887c83a 	sub	r3,r3,r2
    b788:	88c6d83a 	srl	r3,r17,r3
    b78c:	8904983a 	sll	r2,r17,r4
    b790:	01000434 	movhi	r4,16
    b794:	213fffc4 	addi	r4,r4,-1
    b798:	2941ffcc 	andi	r5,r5,2047
    b79c:	1906703a 	and	r3,r3,r4
    b7a0:	800d883a 	mov	r6,r16
    b7a4:	003fe906 	br	b74c <_gp+0xffff64ee>
    b7a8:	000d883a 	mov	r6,zero
    b7ac:	000b883a 	mov	r5,zero
    b7b0:	0007883a 	mov	r3,zero
    b7b4:	0005883a 	mov	r2,zero
    b7b8:	003fe406 	br	b74c <_gp+0xffff64ee>
    b7bc:	0123c83a 	sub	r17,zero,r4
    b7c0:	003fd106 	br	b708 <_gp+0xffff64aa>

0000b7c4 <__clzsi2>:
    b7c4:	00bfffd4 	movui	r2,65535
    b7c8:	11000536 	bltu	r2,r4,b7e0 <__clzsi2+0x1c>
    b7cc:	00803fc4 	movi	r2,255
    b7d0:	11000f36 	bltu	r2,r4,b810 <__clzsi2+0x4c>
    b7d4:	00800804 	movi	r2,32
    b7d8:	0007883a 	mov	r3,zero
    b7dc:	00000506 	br	b7f4 <__clzsi2+0x30>
    b7e0:	00804034 	movhi	r2,256
    b7e4:	10bfffc4 	addi	r2,r2,-1
    b7e8:	11000c2e 	bgeu	r2,r4,b81c <__clzsi2+0x58>
    b7ec:	00800204 	movi	r2,8
    b7f0:	00c00604 	movi	r3,24
    b7f4:	20c8d83a 	srl	r4,r4,r3
    b7f8:	00c00074 	movhi	r3,1
    b7fc:	18f3bc04 	addi	r3,r3,-12560
    b800:	1909883a 	add	r4,r3,r4
    b804:	20c00003 	ldbu	r3,0(r4)
    b808:	10c5c83a 	sub	r2,r2,r3
    b80c:	f800283a 	ret
    b810:	00800604 	movi	r2,24
    b814:	00c00204 	movi	r3,8
    b818:	003ff606 	br	b7f4 <_gp+0xffff6596>
    b81c:	00800404 	movi	r2,16
    b820:	1007883a 	mov	r3,r2
    b824:	003ff306 	br	b7f4 <_gp+0xffff6596>

0000b828 <__divsi3>:
    b828:	20001b16 	blt	r4,zero,b898 <__divsi3+0x70>
    b82c:	000f883a 	mov	r7,zero
    b830:	28001616 	blt	r5,zero,b88c <__divsi3+0x64>
    b834:	200d883a 	mov	r6,r4
    b838:	29001a2e 	bgeu	r5,r4,b8a4 <__divsi3+0x7c>
    b83c:	00800804 	movi	r2,32
    b840:	00c00044 	movi	r3,1
    b844:	00000106 	br	b84c <__divsi3+0x24>
    b848:	10000d26 	beq	r2,zero,b880 <__divsi3+0x58>
    b84c:	294b883a 	add	r5,r5,r5
    b850:	10bfffc4 	addi	r2,r2,-1
    b854:	18c7883a 	add	r3,r3,r3
    b858:	293ffb36 	bltu	r5,r4,b848 <_gp+0xffff65ea>
    b85c:	0005883a 	mov	r2,zero
    b860:	18000726 	beq	r3,zero,b880 <__divsi3+0x58>
    b864:	0005883a 	mov	r2,zero
    b868:	31400236 	bltu	r6,r5,b874 <__divsi3+0x4c>
    b86c:	314dc83a 	sub	r6,r6,r5
    b870:	10c4b03a 	or	r2,r2,r3
    b874:	1806d07a 	srli	r3,r3,1
    b878:	280ad07a 	srli	r5,r5,1
    b87c:	183ffa1e 	bne	r3,zero,b868 <_gp+0xffff660a>
    b880:	38000126 	beq	r7,zero,b888 <__divsi3+0x60>
    b884:	0085c83a 	sub	r2,zero,r2
    b888:	f800283a 	ret
    b88c:	014bc83a 	sub	r5,zero,r5
    b890:	39c0005c 	xori	r7,r7,1
    b894:	003fe706 	br	b834 <_gp+0xffff65d6>
    b898:	0109c83a 	sub	r4,zero,r4
    b89c:	01c00044 	movi	r7,1
    b8a0:	003fe306 	br	b830 <_gp+0xffff65d2>
    b8a4:	00c00044 	movi	r3,1
    b8a8:	003fee06 	br	b864 <_gp+0xffff6606>

0000b8ac <__modsi3>:
    b8ac:	20001716 	blt	r4,zero,b90c <__modsi3+0x60>
    b8b0:	000f883a 	mov	r7,zero
    b8b4:	2005883a 	mov	r2,r4
    b8b8:	28001216 	blt	r5,zero,b904 <__modsi3+0x58>
    b8bc:	2900162e 	bgeu	r5,r4,b918 <__modsi3+0x6c>
    b8c0:	01800804 	movi	r6,32
    b8c4:	00c00044 	movi	r3,1
    b8c8:	00000106 	br	b8d0 <__modsi3+0x24>
    b8cc:	30000a26 	beq	r6,zero,b8f8 <__modsi3+0x4c>
    b8d0:	294b883a 	add	r5,r5,r5
    b8d4:	31bfffc4 	addi	r6,r6,-1
    b8d8:	18c7883a 	add	r3,r3,r3
    b8dc:	293ffb36 	bltu	r5,r4,b8cc <_gp+0xffff666e>
    b8e0:	18000526 	beq	r3,zero,b8f8 <__modsi3+0x4c>
    b8e4:	1806d07a 	srli	r3,r3,1
    b8e8:	11400136 	bltu	r2,r5,b8f0 <__modsi3+0x44>
    b8ec:	1145c83a 	sub	r2,r2,r5
    b8f0:	280ad07a 	srli	r5,r5,1
    b8f4:	183ffb1e 	bne	r3,zero,b8e4 <_gp+0xffff6686>
    b8f8:	38000126 	beq	r7,zero,b900 <__modsi3+0x54>
    b8fc:	0085c83a 	sub	r2,zero,r2
    b900:	f800283a 	ret
    b904:	014bc83a 	sub	r5,zero,r5
    b908:	003fec06 	br	b8bc <_gp+0xffff665e>
    b90c:	0109c83a 	sub	r4,zero,r4
    b910:	01c00044 	movi	r7,1
    b914:	003fe706 	br	b8b4 <_gp+0xffff6656>
    b918:	00c00044 	movi	r3,1
    b91c:	003ff106 	br	b8e4 <_gp+0xffff6686>

0000b920 <__udivsi3>:
    b920:	200d883a 	mov	r6,r4
    b924:	2900152e 	bgeu	r5,r4,b97c <__udivsi3+0x5c>
    b928:	28001416 	blt	r5,zero,b97c <__udivsi3+0x5c>
    b92c:	00800804 	movi	r2,32
    b930:	00c00044 	movi	r3,1
    b934:	00000206 	br	b940 <__udivsi3+0x20>
    b938:	10000e26 	beq	r2,zero,b974 <__udivsi3+0x54>
    b93c:	28000516 	blt	r5,zero,b954 <__udivsi3+0x34>
    b940:	294b883a 	add	r5,r5,r5
    b944:	10bfffc4 	addi	r2,r2,-1
    b948:	18c7883a 	add	r3,r3,r3
    b94c:	293ffa36 	bltu	r5,r4,b938 <_gp+0xffff66da>
    b950:	18000826 	beq	r3,zero,b974 <__udivsi3+0x54>
    b954:	0005883a 	mov	r2,zero
    b958:	31400236 	bltu	r6,r5,b964 <__udivsi3+0x44>
    b95c:	314dc83a 	sub	r6,r6,r5
    b960:	10c4b03a 	or	r2,r2,r3
    b964:	1806d07a 	srli	r3,r3,1
    b968:	280ad07a 	srli	r5,r5,1
    b96c:	183ffa1e 	bne	r3,zero,b958 <_gp+0xffff66fa>
    b970:	f800283a 	ret
    b974:	0005883a 	mov	r2,zero
    b978:	f800283a 	ret
    b97c:	00c00044 	movi	r3,1
    b980:	003ff406 	br	b954 <_gp+0xffff66f6>

0000b984 <__umodsi3>:
    b984:	2005883a 	mov	r2,r4
    b988:	2900122e 	bgeu	r5,r4,b9d4 <__umodsi3+0x50>
    b98c:	28001116 	blt	r5,zero,b9d4 <__umodsi3+0x50>
    b990:	01800804 	movi	r6,32
    b994:	00c00044 	movi	r3,1
    b998:	00000206 	br	b9a4 <__umodsi3+0x20>
    b99c:	30000c26 	beq	r6,zero,b9d0 <__umodsi3+0x4c>
    b9a0:	28000516 	blt	r5,zero,b9b8 <__umodsi3+0x34>
    b9a4:	294b883a 	add	r5,r5,r5
    b9a8:	31bfffc4 	addi	r6,r6,-1
    b9ac:	18c7883a 	add	r3,r3,r3
    b9b0:	293ffa36 	bltu	r5,r4,b99c <_gp+0xffff673e>
    b9b4:	18000626 	beq	r3,zero,b9d0 <__umodsi3+0x4c>
    b9b8:	1806d07a 	srli	r3,r3,1
    b9bc:	11400136 	bltu	r2,r5,b9c4 <__umodsi3+0x40>
    b9c0:	1145c83a 	sub	r2,r2,r5
    b9c4:	280ad07a 	srli	r5,r5,1
    b9c8:	183ffb1e 	bne	r3,zero,b9b8 <_gp+0xffff675a>
    b9cc:	f800283a 	ret
    b9d0:	f800283a 	ret
    b9d4:	00c00044 	movi	r3,1
    b9d8:	003ff706 	br	b9b8 <_gp+0xffff675a>

0000b9dc <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
    b9dc:	01800074 	movhi	r6,1
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
    b9e0:	31808004 	addi	r6,r6,512

0000b9e4 <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
    b9e4:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
    b9e8:	01c00826 	beq	zero,r7,ba0c <end_tx>

0000b9ec <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
    b9ec:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
    b9f0:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
    b9f4:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
    b9f8:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
    b9fc:	283ffb26 	beq	r5,zero,b9ec <_gp+0xffff678e>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
    ba00:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
    ba04:	21000044 	addi	r4,r4,1
	br tx_next_char
    ba08:	003ff606 	br	b9e4 <_gp+0xffff6786>

0000ba0c <end_tx>:
end_tx:	
        ret
    ba0c:	f800283a 	ret

0000ba10 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
    ba10:	defffd04 	addi	sp,sp,-12
    ba14:	de00012e 	bgeu	sp,et,ba1c <alt_log_txchar+0xc>
    ba18:	003b68fa 	trap	3
    ba1c:	df000215 	stw	fp,8(sp)
    ba20:	df000204 	addi	fp,sp,8
    ba24:	e13ffe15 	stw	r4,-8(fp)
    ba28:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
    ba2c:	0001883a 	nop
    ba30:	e0bfff17 	ldw	r2,-4(fp)
    ba34:	10800104 	addi	r2,r2,4
    ba38:	10800037 	ldwio	r2,0(r2)
    ba3c:	10bfffec 	andhi	r2,r2,65535
    ba40:	103ffb26 	beq	r2,zero,ba30 <_gp+0xffff67d2>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
    ba44:	e0bfff17 	ldw	r2,-4(fp)
    ba48:	e0fffe17 	ldw	r3,-8(fp)
    ba4c:	10c00035 	stwio	r3,0(r2)
}
    ba50:	0001883a 	nop
    ba54:	e037883a 	mov	sp,fp
    ba58:	df000017 	ldw	fp,0(sp)
    ba5c:	dec00104 	addi	sp,sp,4
    ba60:	f800283a 	ret

0000ba64 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
    ba64:	defffb04 	addi	sp,sp,-20
    ba68:	de00012e 	bgeu	sp,et,ba70 <alt_log_repchar+0xc>
    ba6c:	003b68fa 	trap	3
    ba70:	dfc00415 	stw	ra,16(sp)
    ba74:	df000315 	stw	fp,12(sp)
    ba78:	df000304 	addi	fp,sp,12
    ba7c:	2005883a 	mov	r2,r4
    ba80:	e17ffe15 	stw	r5,-8(fp)
    ba84:	e1bfff15 	stw	r6,-4(fp)
    ba88:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
    ba8c:	00000506 	br	baa4 <alt_log_repchar+0x40>
    alt_log_txchar(c,(char*) base);
    ba90:	e0bffd07 	ldb	r2,-12(fp)
    ba94:	e0ffff17 	ldw	r3,-4(fp)
    ba98:	180b883a 	mov	r5,r3
    ba9c:	1009883a 	mov	r4,r2
    baa0:	000ba100 	call	ba10 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
    baa4:	e0bffe17 	ldw	r2,-8(fp)
    baa8:	10ffffc4 	addi	r3,r2,-1
    baac:	e0fffe15 	stw	r3,-8(fp)
    bab0:	00bff716 	blt	zero,r2,ba90 <_gp+0xffff6832>
    alt_log_txchar(c,(char*) base);
}
    bab4:	0001883a 	nop
    bab8:	e037883a 	mov	sp,fp
    babc:	dfc00117 	ldw	ra,4(sp)
    bac0:	df000017 	ldw	fp,0(sp)
    bac4:	dec00204 	addi	sp,sp,8
    bac8:	f800283a 	ret

0000bacc <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
    bacc:	deffe904 	addi	sp,sp,-92
    bad0:	de00012e 	bgeu	sp,et,bad8 <alt_log_private_printf+0xc>
    bad4:	003b68fa 	trap	3
    bad8:	dfc01615 	stw	ra,88(sp)
    badc:	df001515 	stw	fp,84(sp)
    bae0:	dc001415 	stw	r16,80(sp)
    bae4:	df001504 	addi	fp,sp,84
    bae8:	e13ffc15 	stw	r4,-16(fp)
    baec:	e17ffd15 	stw	r5,-12(fp)
    baf0:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
    baf4:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
    baf8:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
    bafc:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
    bb00:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
    bb04:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
    bb08:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
    bb0c:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
    bb10:	e0bffc17 	ldw	r2,-16(fp)
    bb14:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
    bb18:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
    bb1c:	00014f06 	br	c05c <alt_log_private_printf+0x590>
    {
    switch(state)
    bb20:	e0bfec17 	ldw	r2,-80(fp)
    bb24:	10c00060 	cmpeqi	r3,r2,1
    bb28:	18001b1e 	bne	r3,zero,bb98 <alt_log_private_printf+0xcc>
    bb2c:	10c000a0 	cmpeqi	r3,r2,2
    bb30:	18002d1e 	bne	r3,zero,bbe8 <alt_log_private_printf+0x11c>
    bb34:	10000126 	beq	r2,zero,bb3c <alt_log_private_printf+0x70>
    bb38:	00014806 	br	c05c <alt_log_private_printf+0x590>
      {
      case pfState_chars:
        if(c == '%')
    bb3c:	e0bffb07 	ldb	r2,-20(fp)
    bb40:	10800958 	cmpnei	r2,r2,37
    bb44:	10000e1e 	bne	r2,zero,bb80 <alt_log_private_printf+0xb4>
        {
          fmtLeadingZero = 0;
    bb48:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
    bb4c:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
    bb50:	00800284 	movi	r2,10
    bb54:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
    bb58:	00800044 	movi	r2,1
    bb5c:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
    bb60:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
    bb64:	00bfffc4 	movi	r2,-1
    bb68:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
    bb6c:	00bfffc4 	movi	r2,-1
    bb70:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
    bb74:	00800044 	movi	r2,1
    bb78:	e0bfec15 	stw	r2,-80(fp)
    bb7c:	00013706 	br	c05c <alt_log_private_printf+0x590>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
    bb80:	e0bffb07 	ldb	r2,-20(fp)
    bb84:	e0fffd17 	ldw	r3,-12(fp)
    bb88:	180b883a 	mov	r5,r3
    bb8c:	1009883a 	mov	r4,r2
    bb90:	000ba100 	call	ba10 <alt_log_txchar>
        }
        break;
    bb94:	00013106 	br	c05c <alt_log_private_printf+0x590>

      case pfState_firstFmtChar:
        if(c == '0')
    bb98:	e0bffb07 	ldb	r2,-20(fp)
    bb9c:	10800c18 	cmpnei	r2,r2,48
    bba0:	1000051e 	bne	r2,zero,bbb8 <alt_log_private_printf+0xec>
        {
          fmtLeadingZero = 1;
    bba4:	00800044 	movi	r2,1
    bba8:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
    bbac:	00800084 	movi	r2,2
    bbb0:	e0bfec15 	stw	r2,-80(fp)
    bbb4:	00012906 	br	c05c <alt_log_private_printf+0x590>
        }
        else if(c == '%')
    bbb8:	e0bffb07 	ldb	r2,-20(fp)
    bbbc:	10800958 	cmpnei	r2,r2,37
    bbc0:	1000071e 	bne	r2,zero,bbe0 <alt_log_private_printf+0x114>
        {
          alt_log_txchar(c,(char*)base);
    bbc4:	e0bffb07 	ldb	r2,-20(fp)
    bbc8:	e0fffd17 	ldw	r3,-12(fp)
    bbcc:	180b883a 	mov	r5,r3
    bbd0:	1009883a 	mov	r4,r2
    bbd4:	000ba100 	call	ba10 <alt_log_txchar>
          state = pfState_chars;
    bbd8:	e03fec15 	stw	zero,-80(fp)
    bbdc:	00011f06 	br	c05c <alt_log_private_printf+0x590>
        }
        else
        {
          state = pfState_otherFmtChar;
    bbe0:	00800084 	movi	r2,2
    bbe4:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
    bbe8:	e0bffb07 	ldb	r2,-20(fp)
    bbec:	10800b98 	cmpnei	r2,r2,46
    bbf0:	1000021e 	bne	r2,zero,bbfc <alt_log_private_printf+0x130>
        {
          fmtAfterDecimal = 0;
    bbf4:	e03ff015 	stw	zero,-64(fp)
    bbf8:	00011706 	br	c058 <alt_log_private_printf+0x58c>
        }
        else if('0' <= c && c <= '9')
    bbfc:	e0bffb07 	ldb	r2,-20(fp)
    bc00:	10800c10 	cmplti	r2,r2,48
    bc04:	10001d1e 	bne	r2,zero,bc7c <alt_log_private_printf+0x1b0>
    bc08:	e0bffb07 	ldb	r2,-20(fp)
    bc0c:	10800e88 	cmpgei	r2,r2,58
    bc10:	10001a1e 	bne	r2,zero,bc7c <alt_log_private_printf+0x1b0>
        {
          c -= '0';
    bc14:	e0bffb03 	ldbu	r2,-20(fp)
    bc18:	10bff404 	addi	r2,r2,-48
    bc1c:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
    bc20:	e0bff017 	ldw	r2,-64(fp)
    bc24:	10000d0e 	bge	r2,zero,bc5c <alt_log_private_printf+0x190>
          {
            if(fmtBeforeDecimal < 0)
    bc28:	e0bfef17 	ldw	r2,-68(fp)
    bc2c:	1000020e 	bge	r2,zero,bc38 <alt_log_private_printf+0x16c>
            {
              fmtBeforeDecimal = 0;
    bc30:	e03fef15 	stw	zero,-68(fp)
    bc34:	00000406 	br	bc48 <alt_log_private_printf+0x17c>
            }
            else
            {
              fmtBeforeDecimal *= 10;
    bc38:	01400284 	movi	r5,10
    bc3c:	e13fef17 	ldw	r4,-68(fp)
    bc40:	000a42c0 	call	a42c <__mulsi3>
    bc44:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
    bc48:	e0bffb07 	ldb	r2,-20(fp)
    bc4c:	e0ffef17 	ldw	r3,-68(fp)
    bc50:	1885883a 	add	r2,r3,r2
    bc54:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
    bc58:	0000ff06 	br	c058 <alt_log_private_printf+0x58c>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
    bc5c:	01400284 	movi	r5,10
    bc60:	e13ff017 	ldw	r4,-64(fp)
    bc64:	000a42c0 	call	a42c <__mulsi3>
    bc68:	1007883a 	mov	r3,r2
    bc6c:	e0bffb07 	ldb	r2,-20(fp)
    bc70:	1885883a 	add	r2,r3,r2
    bc74:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
    bc78:	0000f706 	br	c058 <alt_log_private_printf+0x58c>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
    bc7c:	e0bffb07 	ldb	r2,-20(fp)
    bc80:	10801b18 	cmpnei	r2,r2,108
    bc84:	1000031e 	bne	r2,zero,bc94 <alt_log_private_printf+0x1c8>
        {
          fmtLong = 1;
    bc88:	00800044 	movi	r2,1
    bc8c:	e0bfee15 	stw	r2,-72(fp)
    bc90:	0000f106 	br	c058 <alt_log_private_printf+0x58c>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
    bc94:	e0bffb07 	ldb	r2,-20(fp)
    bc98:	10bfea04 	addi	r2,r2,-88
    bc9c:	10c00868 	cmpgeui	r3,r2,33
    bca0:	1800ec1e 	bne	r3,zero,c054 <alt_log_private_printf+0x588>
    bca4:	100690ba 	slli	r3,r2,2
    bca8:	00800074 	movhi	r2,1
    bcac:	10af2f04 	addi	r2,r2,-17220
    bcb0:	1885883a 	add	r2,r3,r2
    bcb4:	10800017 	ldw	r2,0(r2)
    bcb8:	1000683a 	jmp	r2
    bcbc:	0000bf80 	call	bf8 <__alt_mem_shared_ram_0+0xbf8>
    bcc0:	0000c054 	movui	zero,769
    bcc4:	0000c054 	movui	zero,769
    bcc8:	0000c054 	movui	zero,769
    bccc:	0000c054 	movui	zero,769
    bcd0:	0000c054 	movui	zero,769
    bcd4:	0000c054 	movui	zero,769
    bcd8:	0000c054 	movui	zero,769
    bcdc:	0000c054 	movui	zero,769
    bce0:	0000c054 	movui	zero,769
    bce4:	0000c054 	movui	zero,769
    bce8:	0000bf98 	cmpnei	zero,zero,766
    bcec:	0000bd40 	call	bd4 <__alt_mem_shared_ram_0+0xbd4>
    bcf0:	0000c054 	movui	zero,769
    bcf4:	0000c054 	movui	zero,769
    bcf8:	0000c054 	movui	zero,769
    bcfc:	0000c054 	movui	zero,769
    bd00:	0000bd40 	call	bd4 <__alt_mem_shared_ram_0+0xbd4>
    bd04:	0000c054 	movui	zero,769
    bd08:	0000c054 	movui	zero,769
    bd0c:	0000c054 	movui	zero,769
    bd10:	0000c054 	movui	zero,769
    bd14:	0000c054 	movui	zero,769
    bd18:	0000bf60 	cmpeqi	zero,zero,765
    bd1c:	0000c054 	movui	zero,769
    bd20:	0000c054 	movui	zero,769
    bd24:	0000c054 	movui	zero,769
    bd28:	0000bfd4 	movui	zero,767
    bd2c:	0000c054 	movui	zero,769
    bd30:	0000bf58 	cmpnei	zero,zero,765
    bd34:	0000c054 	movui	zero,769
    bd38:	0000c054 	movui	zero,769
    bd3c:	0000bf70 	cmpltui	zero,zero,765
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
    bd40:	e0bfee17 	ldw	r2,-72(fp)
    bd44:	10000e26 	beq	r2,zero,bd80 <alt_log_private_printf+0x2b4>
                {
                  if (fmtSigned)
    bd48:	e0bff217 	ldw	r2,-56(fp)
    bd4c:	10000626 	beq	r2,zero,bd68 <alt_log_private_printf+0x29c>
                  {
                    v = va_arg(args,long);
    bd50:	e0bffe17 	ldw	r2,-8(fp)
    bd54:	10c00104 	addi	r3,r2,4
    bd58:	e0fffe15 	stw	r3,-8(fp)
    bd5c:	10800017 	ldw	r2,0(r2)
    bd60:	e0bff415 	stw	r2,-48(fp)
    bd64:	00001306 	br	bdb4 <alt_log_private_printf+0x2e8>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
    bd68:	e0bffe17 	ldw	r2,-8(fp)
    bd6c:	10c00104 	addi	r3,r2,4
    bd70:	e0fffe15 	stw	r3,-8(fp)
    bd74:	10800017 	ldw	r2,0(r2)
    bd78:	e0bff415 	stw	r2,-48(fp)
    bd7c:	00000d06 	br	bdb4 <alt_log_private_printf+0x2e8>
                  }
                }
                else
                {
                  if (fmtSigned)
    bd80:	e0bff217 	ldw	r2,-56(fp)
    bd84:	10000626 	beq	r2,zero,bda0 <alt_log_private_printf+0x2d4>
                  {
                    v = va_arg(args,int);
    bd88:	e0bffe17 	ldw	r2,-8(fp)
    bd8c:	10c00104 	addi	r3,r2,4
    bd90:	e0fffe15 	stw	r3,-8(fp)
    bd94:	10800017 	ldw	r2,0(r2)
    bd98:	e0bff415 	stw	r2,-48(fp)
    bd9c:	00000506 	br	bdb4 <alt_log_private_printf+0x2e8>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
    bda0:	e0bffe17 	ldw	r2,-8(fp)
    bda4:	10c00104 	addi	r3,r2,4
    bda8:	e0fffe15 	stw	r3,-8(fp)
    bdac:	10800017 	ldw	r2,0(r2)
    bdb0:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
    bdb4:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
    bdb8:	e0bff217 	ldw	r2,-56(fp)
    bdbc:	10000726 	beq	r2,zero,bddc <alt_log_private_printf+0x310>
    bdc0:	e0bff417 	ldw	r2,-48(fp)
    bdc4:	1000050e 	bge	r2,zero,bddc <alt_log_private_printf+0x310>
                  {
                  v = ~v + 1;
    bdc8:	e0bff417 	ldw	r2,-48(fp)
    bdcc:	0085c83a 	sub	r2,zero,r2
    bdd0:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
    bdd4:	00800044 	movi	r2,1
    bdd8:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
    bddc:	e0bff417 	ldw	r2,-48(fp)
    bde0:	e0bff615 	stw	r2,-40(fp)
                p = 1;
    bde4:	00800044 	movi	r2,1
    bde8:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
    bdec:	00800044 	movi	r2,1
    bdf0:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
    bdf4:	00000806 	br	be18 <alt_log_private_printf+0x34c>
                  {
                  digitCount++;
    bdf8:	e0bff817 	ldw	r2,-32(fp)
    bdfc:	10800044 	addi	r2,r2,1
    be00:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
    be04:	e0bff117 	ldw	r2,-60(fp)
    be08:	100b883a 	mov	r5,r2
    be0c:	e13ff517 	ldw	r4,-44(fp)
    be10:	000a42c0 	call	a42c <__mulsi3>
    be14:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
    be18:	e0bff117 	ldw	r2,-60(fp)
    be1c:	100b883a 	mov	r5,r2
    be20:	e13ff617 	ldw	r4,-40(fp)
    be24:	000b9200 	call	b920 <__udivsi3>
    be28:	e0bff615 	stw	r2,-40(fp)
    be2c:	e0bff617 	ldw	r2,-40(fp)
    be30:	103ff11e 	bne	r2,zero,bdf8 <_gp+0xffff6b9a>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
    be34:	e0ffef17 	ldw	r3,-68(fp)
    be38:	e0bff817 	ldw	r2,-32(fp)
    be3c:	1885c83a 	sub	r2,r3,r2
    be40:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
    be44:	e0bfed17 	ldw	r2,-76(fp)
    be48:	10000e26 	beq	r2,zero,be84 <alt_log_private_printf+0x3b8>
                  {
                  if(sign)
    be4c:	e0bff717 	ldw	r2,-36(fp)
    be50:	10000726 	beq	r2,zero,be70 <alt_log_private_printf+0x3a4>
                    {
                    alt_log_txchar('-',(char*)base);
    be54:	e0bffd17 	ldw	r2,-12(fp)
    be58:	100b883a 	mov	r5,r2
    be5c:	01000b44 	movi	r4,45
    be60:	000ba100 	call	ba10 <alt_log_txchar>
                    fmtBeforeDecimal--;
    be64:	e0bfef17 	ldw	r2,-68(fp)
    be68:	10bfffc4 	addi	r2,r2,-1
    be6c:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
    be70:	e1bffd17 	ldw	r6,-12(fp)
    be74:	e17fef17 	ldw	r5,-68(fp)
    be78:	01000c04 	movi	r4,48
    be7c:	000ba640 	call	ba64 <alt_log_repchar>
    be80:	00003106 	br	bf48 <alt_log_private_printf+0x47c>
                  }
                else
                  {
                    if(sign)
    be84:	e0bff717 	ldw	r2,-36(fp)
    be88:	10000326 	beq	r2,zero,be98 <alt_log_private_printf+0x3cc>
                    {
                      fmtBeforeDecimal--;
    be8c:	e0bfef17 	ldw	r2,-68(fp)
    be90:	10bfffc4 	addi	r2,r2,-1
    be94:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
    be98:	e1bffd17 	ldw	r6,-12(fp)
    be9c:	e17fef17 	ldw	r5,-68(fp)
    bea0:	01000804 	movi	r4,32
    bea4:	000ba640 	call	ba64 <alt_log_repchar>
                    if(sign)
    bea8:	e0bff717 	ldw	r2,-36(fp)
    beac:	10002626 	beq	r2,zero,bf48 <alt_log_private_printf+0x47c>
                    {
                      alt_log_txchar('-',(char*)base);
    beb0:	e0bffd17 	ldw	r2,-12(fp)
    beb4:	100b883a 	mov	r5,r2
    beb8:	01000b44 	movi	r4,45
    bebc:	000ba100 	call	ba10 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
    bec0:	00002106 	br	bf48 <alt_log_private_printf+0x47c>
                  {
                  unsigned char d;

                  d = v / p;
    bec4:	e17ff517 	ldw	r5,-44(fp)
    bec8:	e13ff417 	ldw	r4,-48(fp)
    becc:	000b9200 	call	b920 <__udivsi3>
    bed0:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
    bed4:	e0bff903 	ldbu	r2,-28(fp)
    bed8:	10800c04 	addi	r2,r2,48
    bedc:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
    bee0:	e0bff903 	ldbu	r2,-28(fp)
    bee4:	10800eb0 	cmpltui	r2,r2,58
    bee8:	1000081e 	bne	r2,zero,bf0c <alt_log_private_printf+0x440>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
    beec:	e0bff317 	ldw	r2,-52(fp)
    bef0:	10000226 	beq	r2,zero,befc <alt_log_private_printf+0x430>
    bef4:	008001c4 	movi	r2,7
    bef8:	00000106 	br	bf00 <alt_log_private_printf+0x434>
    befc:	008009c4 	movi	r2,39
    bf00:	e0fff903 	ldbu	r3,-28(fp)
    bf04:	10c5883a 	add	r2,r2,r3
    bf08:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
    bf0c:	e0bff903 	ldbu	r2,-28(fp)
    bf10:	e0fffd17 	ldw	r3,-12(fp)
    bf14:	180b883a 	mov	r5,r3
    bf18:	1009883a 	mov	r4,r2
    bf1c:	000ba100 	call	ba10 <alt_log_txchar>

                  v = v % p;
    bf20:	e0bff417 	ldw	r2,-48(fp)
    bf24:	e17ff517 	ldw	r5,-44(fp)
    bf28:	1009883a 	mov	r4,r2
    bf2c:	000b9840 	call	b984 <__umodsi3>
    bf30:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
    bf34:	e0bff117 	ldw	r2,-60(fp)
    bf38:	100b883a 	mov	r5,r2
    bf3c:	e13ff517 	ldw	r4,-44(fp)
    bf40:	000b9200 	call	b920 <__udivsi3>
    bf44:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
    bf48:	e0bff517 	ldw	r2,-44(fp)
    bf4c:	103fdd1e 	bne	r2,zero,bec4 <_gp+0xffff6c66>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
    bf50:	e03fec15 	stw	zero,-80(fp)
              break;
    bf54:	00003f06 	br	c054 <alt_log_private_printf+0x588>

            case 'u':
              fmtSigned = 0;
    bf58:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
    bf5c:	003f7806 	br	bd40 <_gp+0xffff6ae2>
            case 'o':
              fmtSigned = 0;
    bf60:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
    bf64:	00800204 	movi	r2,8
    bf68:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
    bf6c:	003f7406 	br	bd40 <_gp+0xffff6ae2>
            case 'x':
              fmtSigned = 0;
    bf70:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
    bf74:	00800404 	movi	r2,16
    bf78:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
    bf7c:	003f7006 	br	bd40 <_gp+0xffff6ae2>
            case 'X':
              fmtSigned = 0;
    bf80:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
    bf84:	00800404 	movi	r2,16
    bf88:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
    bf8c:	00800044 	movi	r2,1
    bf90:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
    bf94:	003f6a06 	br	bd40 <_gp+0xffff6ae2>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
    bf98:	e0bfef17 	ldw	r2,-68(fp)
    bf9c:	10bfffc4 	addi	r2,r2,-1
    bfa0:	e1bffd17 	ldw	r6,-12(fp)
    bfa4:	100b883a 	mov	r5,r2
    bfa8:	01000804 	movi	r4,32
    bfac:	000ba640 	call	ba64 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
    bfb0:	e0bffe17 	ldw	r2,-8(fp)
    bfb4:	10c00104 	addi	r3,r2,4
    bfb8:	e0fffe15 	stw	r3,-8(fp)
    bfbc:	10800017 	ldw	r2,0(r2)
    bfc0:	e0fffd17 	ldw	r3,-12(fp)
    bfc4:	180b883a 	mov	r5,r3
    bfc8:	1009883a 	mov	r4,r2
    bfcc:	000ba100 	call	ba10 <alt_log_txchar>
              break;
    bfd0:	00002006 	br	c054 <alt_log_private_printf+0x588>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
    bfd4:	e0bffe17 	ldw	r2,-8(fp)
    bfd8:	10c00104 	addi	r3,r2,4
    bfdc:	e0fffe15 	stw	r3,-8(fp)
    bfe0:	10800017 	ldw	r2,0(r2)
    bfe4:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
    bfe8:	e43fef17 	ldw	r16,-68(fp)
    bfec:	e13ffa17 	ldw	r4,-24(fp)
    bff0:	000c9a00 	call	c9a0 <strlen>
    bff4:	8085c83a 	sub	r2,r16,r2
    bff8:	e1bffd17 	ldw	r6,-12(fp)
    bffc:	100b883a 	mov	r5,r2
    c000:	01000804 	movi	r4,32
    c004:	000ba640 	call	ba64 <alt_log_repchar>

                while(*s)
    c008:	00000b06 	br	c038 <alt_log_private_printf+0x56c>
                  alt_log_txchar(*s++,(char*)base);
    c00c:	e0bffa17 	ldw	r2,-24(fp)
    c010:	10c00044 	addi	r3,r2,1
    c014:	e0fffa15 	stw	r3,-24(fp)
    c018:	10800003 	ldbu	r2,0(r2)
    c01c:	10803fcc 	andi	r2,r2,255
    c020:	1080201c 	xori	r2,r2,128
    c024:	10bfe004 	addi	r2,r2,-128
    c028:	e0fffd17 	ldw	r3,-12(fp)
    c02c:	180b883a 	mov	r5,r3
    c030:	1009883a 	mov	r4,r2
    c034:	000ba100 	call	ba10 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
    c038:	e0bffa17 	ldw	r2,-24(fp)
    c03c:	10800003 	ldbu	r2,0(r2)
    c040:	10803fcc 	andi	r2,r2,255
    c044:	1080201c 	xori	r2,r2,128
    c048:	10bfe004 	addi	r2,r2,-128
    c04c:	103fef1e 	bne	r2,zero,c00c <_gp+0xffff6dae>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
    c050:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
    c054:	e03fec15 	stw	zero,-80(fp)
          }
        break;
    c058:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
    c05c:	e0bfeb17 	ldw	r2,-84(fp)
    c060:	10c00044 	addi	r3,r2,1
    c064:	e0ffeb15 	stw	r3,-84(fp)
    c068:	10800003 	ldbu	r2,0(r2)
    c06c:	e0bffb05 	stb	r2,-20(fp)
    c070:	e0bffb07 	ldb	r2,-20(fp)
    c074:	103eaa1e 	bne	r2,zero,bb20 <_gp+0xffff68c2>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
    c078:	0001883a 	nop
    c07c:	e6ffff04 	addi	sp,fp,-4
    c080:	dfc00217 	ldw	ra,8(sp)
    c084:	df000117 	ldw	fp,4(sp)
    c088:	dc000017 	ldw	r16,0(sp)
    c08c:	dec00304 	addi	sp,sp,12
    c090:	f800283a 	ret

0000c094 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
    c094:	defff904 	addi	sp,sp,-28
    c098:	de00012e 	bgeu	sp,et,c0a0 <alt_log_printf_proc+0xc>
    c09c:	003b68fa 	trap	3
    c0a0:	dfc00315 	stw	ra,12(sp)
    c0a4:	df000215 	stw	fp,8(sp)
    c0a8:	df000204 	addi	fp,sp,8
    c0ac:	e13fff15 	stw	r4,-4(fp)
    c0b0:	e1400215 	stw	r5,8(fp)
    c0b4:	e1800315 	stw	r6,12(fp)
    c0b8:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
    c0bc:	e0800204 	addi	r2,fp,8
    c0c0:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
    c0c4:	e0bffe17 	ldw	r2,-8(fp)
    c0c8:	100d883a 	mov	r6,r2
    c0cc:	01400074 	movhi	r5,1
    c0d0:	29408004 	addi	r5,r5,512
    c0d4:	e13fff17 	ldw	r4,-4(fp)
    c0d8:	000bacc0 	call	bacc <alt_log_private_printf>
    return (0);
    c0dc:	0005883a 	mov	r2,zero
}
    c0e0:	e037883a 	mov	sp,fp
    c0e4:	dfc00117 	ldw	ra,4(sp)
    c0e8:	df000017 	ldw	fp,0(sp)
    c0ec:	dec00504 	addi	sp,sp,20
    c0f0:	f800283a 	ret

0000c0f4 <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
    c0f4:	defffb04 	addi	sp,sp,-20
    c0f8:	de00012e 	bgeu	sp,et,c100 <altera_avalon_jtag_uart_report_log+0xc>
    c0fc:	003b68fa 	trap	3
    c100:	dfc00415 	stw	ra,16(sp)
    c104:	df000315 	stw	fp,12(sp)
    c108:	df000304 	addi	fp,sp,12
    c10c:	e13fff15 	stw	r4,-4(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
    c110:	d0a014c3 	ldbu	r2,-32685(gp)
    c114:	10803fcc 	andi	r2,r2,255
    c118:	10001026 	beq	r2,zero,c15c <altera_avalon_jtag_uart_report_log+0x68>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
    c11c:	e0bfff17 	ldw	r2,-4(fp)
    c120:	e0bffd15 	stw	r2,-12(fp)
        const char* header="JTAG Alarm:";
    c124:	00800074 	movhi	r2,1
    c128:	10b3fc04 	addi	r2,r2,-12304
    c12c:	e0bffe15 	stw	r2,-8(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
    c130:	e0bffd17 	ldw	r2,-12(fp)
    c134:	10800017 	ldw	r2,0(r2)
    c138:	e1bffe17 	ldw	r6,-8(fp)
    c13c:	100b883a 	mov	r5,r2
    c140:	e13ffd17 	ldw	r4,-12(fp)
    c144:	000c1740 	call	c174 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c148:	d0a01a97 	ldw	r2,-32662(gp)
        return ALT_LOG_JTAG_UART_TICKS;
    c14c:	01400284 	movi	r5,10
    c150:	1009883a 	mov	r4,r2
    c154:	000b9200 	call	b920 <__udivsi3>
    c158:	00000106 	br	c160 <altera_avalon_jtag_uart_report_log+0x6c>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
    c15c:	0005883a 	mov	r2,zero
    }
}
    c160:	e037883a 	mov	sp,fp
    c164:	dfc00117 	ldw	ra,4(sp)
    c168:	df000017 	ldw	fp,0(sp)
    c16c:	dec00204 	addi	sp,sp,8
    c170:	f800283a 	ret

0000c174 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
    c174:	defff004 	addi	sp,sp,-64
    c178:	de00012e 	bgeu	sp,et,c180 <alt_log_jtag_uart_print_control_reg+0xc>
    c17c:	003b68fa 	trap	3
    c180:	dfc00f15 	stw	ra,60(sp)
    c184:	df000e15 	stw	fp,56(sp)
    c188:	df000e04 	addi	fp,sp,56
    c18c:	e13ffd15 	stw	r4,-12(fp)
    c190:	e17ffe15 	stw	r5,-8(fp)
    c194:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c198:	e0bffe17 	ldw	r2,-8(fp)
    c19c:	10800104 	addi	r2,r2,4
    c1a0:	10800037 	ldwio	r2,0(r2)
    c1a4:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
    c1a8:	e0bff617 	ldw	r2,-40(fp)
    c1ac:	1004d43a 	srli	r2,r2,16
    c1b0:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
    c1b4:	e0bff617 	ldw	r2,-40(fp)
    c1b8:	1080008c 	andi	r2,r2,2
    c1bc:	1004d07a 	srli	r2,r2,1
    c1c0:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
    c1c4:	e0bff617 	ldw	r2,-40(fp)
    c1c8:	1080004c 	andi	r2,r2,1
    c1cc:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
    c1d0:	e0bff617 	ldw	r2,-40(fp)
    c1d4:	1080400c 	andi	r2,r2,256
    c1d8:	1004d23a 	srli	r2,r2,8
    c1dc:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
    c1e0:	e0bff617 	ldw	r2,-40(fp)
    c1e4:	1080800c 	andi	r2,r2,512
    c1e8:	1004d27a 	srli	r2,r2,9
    c1ec:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
    c1f0:	e0bff617 	ldw	r2,-40(fp)
    c1f4:	1081000c 	andi	r2,r2,1024
    c1f8:	1004d2ba 	srli	r2,r2,10
    c1fc:	e0bffc15 	stw	r2,-16(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_AC_OFST;
         
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
    c200:	e0bff917 	ldw	r2,-28(fp)
    c204:	d8800315 	stw	r2,12(sp)
    c208:	e0bff817 	ldw	r2,-32(fp)
    c20c:	d8800215 	stw	r2,8(sp)
    c210:	e0bffa17 	ldw	r2,-24(fp)
    c214:	d8800115 	stw	r2,4(sp)
    c218:	e0bffb17 	ldw	r2,-20(fp)
    c21c:	d8800015 	stw	r2,0(sp)
    c220:	e1fffc17 	ldw	r7,-16(fp)
    c224:	e1bff717 	ldw	r6,-36(fp)
    c228:	e17fff17 	ldw	r5,-4(fp)
    c22c:	01000074 	movhi	r4,1
    c230:	2133ff04 	addi	r4,r4,-12292
    c234:	000c0940 	call	c094 <alt_log_printf_proc>
    ALT_LOG_PRINTF(
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
    c238:	0001883a 	nop

}
    c23c:	e037883a 	mov	sp,fp
    c240:	dfc00117 	ldw	ra,4(sp)
    c244:	df000017 	ldw	fp,0(sp)
    c248:	dec00204 	addi	sp,sp,8
    c24c:	f800283a 	ret

0000c250 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
    c250:	defffb04 	addi	sp,sp,-20
    c254:	de00012e 	bgeu	sp,et,c25c <alt_log_jtag_uart_startup_info+0xc>
    c258:	003b68fa 	trap	3
    c25c:	dfc00415 	stw	ra,16(sp)
    c260:	df000315 	stw	fp,12(sp)
    c264:	df000304 	addi	fp,sp,12
    c268:	e13ffe15 	stw	r4,-8(fp)
    c26c:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
    c270:	00800074 	movhi	r2,1
    c274:	10b40d04 	addi	r2,r2,-12236
    c278:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
    c27c:	e1bffd17 	ldw	r6,-12(fp)
    c280:	e17fff17 	ldw	r5,-4(fp)
    c284:	e13ffe17 	ldw	r4,-8(fp)
    c288:	000c1740 	call	c174 <alt_log_jtag_uart_print_control_reg>
     return;
    c28c:	0001883a 	nop
}
    c290:	e037883a 	mov	sp,fp
    c294:	dfc00117 	ldw	ra,4(sp)
    c298:	df000017 	ldw	fp,0(sp)
    c29c:	dec00204 	addi	sp,sp,8
    c2a0:	f800283a 	ret

0000c2a4 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
    c2a4:	defffb04 	addi	sp,sp,-20
    c2a8:	de00012e 	bgeu	sp,et,c2b0 <alt_log_jtag_uart_isr_proc+0xc>
    c2ac:	003b68fa 	trap	3
    c2b0:	dfc00415 	stw	ra,16(sp)
    c2b4:	df000315 	stw	fp,12(sp)
    c2b8:	df000304 	addi	fp,sp,12
    c2bc:	e13ffe15 	stw	r4,-8(fp)
    c2c0:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
    c2c4:	d0a01503 	ldbu	r2,-32684(gp)
    c2c8:	10803fcc 	andi	r2,r2,255
    c2cc:	10000826 	beq	r2,zero,c2f0 <alt_log_jtag_uart_isr_proc+0x4c>
        const char* header="JTAG IRQ:";
    c2d0:	00800074 	movhi	r2,1
    c2d4:	10b41204 	addi	r2,r2,-12216
    c2d8:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
    c2dc:	e1bffd17 	ldw	r6,-12(fp)
    c2e0:	e17ffe17 	ldw	r5,-8(fp)
    c2e4:	e13fff17 	ldw	r4,-4(fp)
    c2e8:	000c1740 	call	c174 <alt_log_jtag_uart_print_control_reg>
    }
    return;
    c2ec:	0001883a 	nop
    c2f0:	0001883a 	nop
}
    c2f4:	e037883a 	mov	sp,fp
    c2f8:	dfc00117 	ldw	ra,4(sp)
    c2fc:	df000017 	ldw	fp,0(sp)
    c300:	dec00204 	addi	sp,sp,8
    c304:	f800283a 	ret

0000c308 <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
    c308:	defffa04 	addi	sp,sp,-24
    c30c:	de00012e 	bgeu	sp,et,c314 <alt_log_write+0xc>
    c310:	003b68fa 	trap	3
    c314:	dfc00515 	stw	ra,20(sp)
    c318:	df000415 	stw	fp,16(sp)
    c31c:	df000404 	addi	fp,sp,16
    c320:	e13ffe15 	stw	r4,-8(fp)
    c324:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
    c328:	d0a01483 	ldbu	r2,-32686(gp)
    c32c:	10803fcc 	andi	r2,r2,255
    c330:	10004026 	beq	r2,zero,c434 <alt_log_write+0x12c>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
    c334:	e0bfff17 	ldw	r2,-4(fp)
    c338:	10c00430 	cmpltui	r3,r2,16
    c33c:	1800011e 	bne	r3,zero,c344 <alt_log_write+0x3c>
    c340:	008003c4 	movi	r2,15
    c344:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
    c348:	e0bffd17 	ldw	r2,-12(fp)
    c34c:	10800088 	cmpgei	r2,r2,2
    c350:	10003726 	beq	r2,zero,c430 <alt_log_write+0x128>

        strncpy (alt_log_write_buf,ptr,length);
    c354:	e0bffd17 	ldw	r2,-12(fp)
    c358:	100d883a 	mov	r6,r2
    c35c:	e17ffe17 	ldw	r5,-8(fp)
    c360:	01000074 	movhi	r4,1
    c364:	2134b404 	addi	r4,r4,-11568
    c368:	000c9bc0 	call	c9bc <strncpy>
    alt_log_write_buf[length-1]='\n';
    c36c:	e0bffd17 	ldw	r2,-12(fp)
    c370:	10ffffc4 	addi	r3,r2,-1
    c374:	00800074 	movhi	r2,1
    c378:	10b4b404 	addi	r2,r2,-11568
    c37c:	10c5883a 	add	r2,r2,r3
    c380:	00c00284 	movi	r3,10
    c384:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    c388:	00800074 	movhi	r2,1
    c38c:	10b4b404 	addi	r2,r2,-11568
    c390:	e0fffd17 	ldw	r3,-12(fp)
    c394:	10c5883a 	add	r2,r2,r3
    c398:	00c00344 	movi	r3,13
    c39c:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
    c3a0:	e0bffd17 	ldw	r2,-12(fp)
    c3a4:	10c00044 	addi	r3,r2,1
    c3a8:	00800074 	movhi	r2,1
    c3ac:	10b4b404 	addi	r2,r2,-11568
    c3b0:	10c5883a 	add	r2,r2,r3
    c3b4:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
    c3b8:	e03ffc15 	stw	zero,-16(fp)
    c3bc:	00001306 	br	c40c <alt_log_write+0x104>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
    c3c0:	00800074 	movhi	r2,1
    c3c4:	10b4b404 	addi	r2,r2,-11568
    c3c8:	e0fffc17 	ldw	r3,-16(fp)
    c3cc:	10c5883a 	add	r2,r2,r3
    c3d0:	10800003 	ldbu	r2,0(r2)
    c3d4:	10803fcc 	andi	r2,r2,255
    c3d8:	1080201c 	xori	r2,r2,128
    c3dc:	10bfe004 	addi	r2,r2,-128
    c3e0:	10800118 	cmpnei	r2,r2,4
    c3e4:	1000061e 	bne	r2,zero,c400 <alt_log_write+0xf8>
            alt_log_write_buf[temp_cnt]='D';
    c3e8:	00800074 	movhi	r2,1
    c3ec:	10b4b404 	addi	r2,r2,-11568
    c3f0:	e0fffc17 	ldw	r3,-16(fp)
    c3f4:	10c5883a 	add	r2,r2,r3
    c3f8:	00c01104 	movi	r3,68
    c3fc:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
    c400:	e0bffc17 	ldw	r2,-16(fp)
    c404:	10800044 	addi	r2,r2,1
    c408:	e0bffc15 	stw	r2,-16(fp)
    c40c:	e0fffc17 	ldw	r3,-16(fp)
    c410:	e0bffd17 	ldw	r2,-12(fp)
    c414:	18bfea16 	blt	r3,r2,c3c0 <_gp+0xffff7162>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    c418:	01400074 	movhi	r5,1
    c41c:	2974b404 	addi	r5,r5,-11568
    c420:	01000074 	movhi	r4,1
    c424:	21341504 	addi	r4,r4,-12204
    c428:	000c0940 	call	c094 <alt_log_printf_proc>
    c42c:	00000106 	br	c434 <alt_log_write+0x12c>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
    c430:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
    c434:	e037883a 	mov	sp,fp
    c438:	dfc00117 	ldw	ra,4(sp)
    c43c:	df000017 	ldw	fp,0(sp)
    c440:	dec00204 	addi	sp,sp,8
    c444:	f800283a 	ret

0000c448 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
    c448:	defffe04 	addi	sp,sp,-8
    c44c:	de00012e 	bgeu	sp,et,c454 <alt_log_system_clock+0xc>
    c450:	003b68fa 	trap	3
    c454:	dfc00115 	stw	ra,4(sp)
    c458:	df000015 	stw	fp,0(sp)
    c45c:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
    c460:	d0a00e83 	ldbu	r2,-32710(gp)
    c464:	10803fcc 	andi	r2,r2,255
    c468:	10000e26 	beq	r2,zero,c4a4 <alt_log_system_clock+0x5c>
    alt_log_sys_clk_count++;
    c46c:	d0a01697 	ldw	r2,-32678(gp)
    c470:	10800044 	addi	r2,r2,1
    c474:	d0a01695 	stw	r2,-32678(gp)
    c478:	d0a01a97 	ldw	r2,-32662(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
    c47c:	d0e01697 	ldw	r3,-32678(gp)
    c480:	10c0082e 	bgeu	r2,r3,c4a4 <alt_log_system_clock+0x5c>
            alt_log_sys_clk_count = 0;
    c484:	d0201695 	stw	zero,-32678(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
    c488:	d0a01597 	ldw	r2,-32682(gp)
    c48c:	10c00044 	addi	r3,r2,1
    c490:	d0e01595 	stw	r3,-32682(gp)
    c494:	100b883a 	mov	r5,r2
    c498:	01000074 	movhi	r4,1
    c49c:	21341904 	addi	r4,r4,-12188
    c4a0:	000c0940 	call	c094 <alt_log_printf_proc>
        }
    }
}
    c4a4:	0001883a 	nop
    c4a8:	e037883a 	mov	sp,fp
    c4ac:	dfc00117 	ldw	ra,4(sp)
    c4b0:	df000017 	ldw	fp,0(sp)
    c4b4:	dec00204 	addi	sp,sp,8
    c4b8:	f800283a 	ret

0000c4bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    c4bc:	defffe04 	addi	sp,sp,-8
    c4c0:	de00012e 	bgeu	sp,et,c4c8 <alt_main+0xc>
    c4c4:	003b68fa 	trap	3
    c4c8:	dfc00115 	stw	ra,4(sp)
    c4cc:	df000015 	stw	fp,0(sp)
    c4d0:	d839883a 	mov	fp,sp
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
    c4d4:	d0a00d97 	ldw	r2,-32714(gp)
    c4d8:	10800058 	cmpnei	r2,r2,1
    c4dc:	1000031e 	bne	r2,zero,c4ec <alt_main+0x30>
    c4e0:	01000074 	movhi	r4,1
    c4e4:	21341f04 	addi	r4,r4,-12164
    c4e8:	000c0940 	call	c094 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    c4ec:	0009883a 	mov	r4,zero
    c4f0:	000c7ac0 	call	c7ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
    c4f4:	d0a00d97 	ldw	r2,-32714(gp)
    c4f8:	10800058 	cmpnei	r2,r2,1
    c4fc:	1000031e 	bne	r2,zero,c50c <alt_main+0x50>
    c500:	01000074 	movhi	r4,1
    c504:	21342d04 	addi	r4,r4,-12108
    c508:	000c0940 	call	c094 <alt_log_printf_proc>
  ALT_OS_INIT();
    c50c:	0001883a 	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
    c510:	d0a00d97 	ldw	r2,-32714(gp)
    c514:	10800058 	cmpnei	r2,r2,1
    c518:	1000031e 	bne	r2,zero,c528 <alt_main+0x6c>
    c51c:	01000074 	movhi	r4,1
    c520:	21343b04 	addi	r4,r4,-12052
    c524:	000c0940 	call	c094 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
    c528:	d0a00d97 	ldw	r2,-32714(gp)
    c52c:	10800058 	cmpnei	r2,r2,1
    c530:	1000031e 	bne	r2,zero,c540 <alt_main+0x84>
    c534:	01000074 	movhi	r4,1
    c538:	21344904 	addi	r4,r4,-11996
    c53c:	000c0940 	call	c094 <alt_log_printf_proc>
  alt_sys_init();
    c540:	000c7ec0 	call	c7ec <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
    c544:	d0a00d97 	ldw	r2,-32714(gp)
    c548:	10800058 	cmpnei	r2,r2,1
    c54c:	1000031e 	bne	r2,zero,c55c <alt_main+0xa0>
    c550:	01000074 	movhi	r4,1
    c554:	21345304 	addi	r4,r4,-11956
    c558:	000c0940 	call	c094 <alt_log_printf_proc>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
    c55c:	d0a00d97 	ldw	r2,-32714(gp)
    c560:	10800058 	cmpnei	r2,r2,1
    c564:	1000031e 	bne	r2,zero,c574 <alt_main+0xb8>
    c568:	01000074 	movhi	r4,1
    c56c:	21345c04 	addi	r4,r4,-11920
    c570:	000c0940 	call	c094 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    c574:	d0a01797 	ldw	r2,-32674(gp)
    c578:	d0e01897 	ldw	r3,-32670(gp)
    c57c:	d1201997 	ldw	r4,-32666(gp)
    c580:	200d883a 	mov	r6,r4
    c584:	180b883a 	mov	r5,r3
    c588:	1009883a 	mov	r4,r2
    c58c:	000913c0 	call	913c <main>
  result = main (alt_argc, alt_argv, alt_envp);
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
    c590:	d0a00d97 	ldw	r2,-32714(gp)
    c594:	10800058 	cmpnei	r2,r2,1
    c598:	1000031e 	bne	r2,zero,c5a8 <alt_main+0xec>
    c59c:	01000074 	movhi	r4,1
    c5a0:	21346404 	addi	r4,r4,-11888
    c5a4:	000c0940 	call	c094 <alt_log_printf_proc>
}
    c5a8:	0001883a 	nop
    c5ac:	e037883a 	mov	sp,fp
    c5b0:	dfc00117 	ldw	ra,4(sp)
    c5b4:	df000017 	ldw	fp,0(sp)
    c5b8:	dec00204 	addi	sp,sp,8
    c5bc:	f800283a 	ret

0000c5c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c5c0:	defffa04 	addi	sp,sp,-24
    c5c4:	de00012e 	bgeu	sp,et,c5cc <alt_alarm_stop+0xc>
    c5c8:	003b68fa 	trap	3
    c5cc:	df000515 	stw	fp,20(sp)
    c5d0:	df000504 	addi	fp,sp,20
    c5d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5d8:	0005303a 	rdctl	r2,status
    c5dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5e0:	e0fffc17 	ldw	r3,-16(fp)
    c5e4:	00bfff84 	movi	r2,-2
    c5e8:	1884703a 	and	r2,r3,r2
    c5ec:	1001703a 	wrctl	status,r2
  
  return context;
    c5f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c5f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c5f8:	e0bfff17 	ldw	r2,-4(fp)
    c5fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c600:	e0bffd17 	ldw	r2,-12(fp)
    c604:	10800017 	ldw	r2,0(r2)
    c608:	e0fffd17 	ldw	r3,-12(fp)
    c60c:	18c00117 	ldw	r3,4(r3)
    c610:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c614:	e0bffd17 	ldw	r2,-12(fp)
    c618:	10800117 	ldw	r2,4(r2)
    c61c:	e0fffd17 	ldw	r3,-12(fp)
    c620:	18c00017 	ldw	r3,0(r3)
    c624:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c628:	e0bffd17 	ldw	r2,-12(fp)
    c62c:	e0fffd17 	ldw	r3,-12(fp)
    c630:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c634:	e0bffd17 	ldw	r2,-12(fp)
    c638:	e0fffd17 	ldw	r3,-12(fp)
    c63c:	10c00015 	stw	r3,0(r2)
    c640:	e0bffb17 	ldw	r2,-20(fp)
    c644:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c648:	e0bffe17 	ldw	r2,-8(fp)
    c64c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c650:	0001883a 	nop
    c654:	e037883a 	mov	sp,fp
    c658:	df000017 	ldw	fp,0(sp)
    c65c:	dec00104 	addi	sp,sp,4
    c660:	f800283a 	ret

0000c664 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c664:	defffb04 	addi	sp,sp,-20
    c668:	de00012e 	bgeu	sp,et,c670 <alt_tick+0xc>
    c66c:	003b68fa 	trap	3
    c670:	dfc00415 	stw	ra,16(sp)
    c674:	df000315 	stw	fp,12(sp)
    c678:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c67c:	d0a00f97 	ldw	r2,-32706(gp)
    c680:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c684:	d0a01b97 	ldw	r2,-32658(gp)
    c688:	10800044 	addi	r2,r2,1
    c68c:	d0a01b95 	stw	r2,-32658(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c690:	00002e06 	br	c74c <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
    c694:	e0bffd17 	ldw	r2,-12(fp)
    c698:	10800017 	ldw	r2,0(r2)
    c69c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c6a0:	e0bffd17 	ldw	r2,-12(fp)
    c6a4:	10800403 	ldbu	r2,16(r2)
    c6a8:	10803fcc 	andi	r2,r2,255
    c6ac:	10000426 	beq	r2,zero,c6c0 <alt_tick+0x5c>
    c6b0:	d0a01b97 	ldw	r2,-32658(gp)
    c6b4:	1000021e 	bne	r2,zero,c6c0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    c6b8:	e0bffd17 	ldw	r2,-12(fp)
    c6bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c6c0:	e0bffd17 	ldw	r2,-12(fp)
    c6c4:	10800217 	ldw	r2,8(r2)
    c6c8:	d0e01b97 	ldw	r3,-32658(gp)
    c6cc:	18801d36 	bltu	r3,r2,c744 <alt_tick+0xe0>
    c6d0:	e0bffd17 	ldw	r2,-12(fp)
    c6d4:	10800403 	ldbu	r2,16(r2)
    c6d8:	10803fcc 	andi	r2,r2,255
    c6dc:	1000191e 	bne	r2,zero,c744 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
    c6e0:	e0bffd17 	ldw	r2,-12(fp)
    c6e4:	10800317 	ldw	r2,12(r2)
    c6e8:	e0fffd17 	ldw	r3,-12(fp)
    c6ec:	18c00517 	ldw	r3,20(r3)
    c6f0:	1809883a 	mov	r4,r3
    c6f4:	103ee83a 	callr	r2
    c6f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c6fc:	e0bfff17 	ldw	r2,-4(fp)
    c700:	1000031e 	bne	r2,zero,c710 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
    c704:	e13ffd17 	ldw	r4,-12(fp)
    c708:	000c5c00 	call	c5c0 <alt_alarm_stop>
    c70c:	00000d06 	br	c744 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
    c710:	e0bffd17 	ldw	r2,-12(fp)
    c714:	10c00217 	ldw	r3,8(r2)
    c718:	e0bfff17 	ldw	r2,-4(fp)
    c71c:	1887883a 	add	r3,r3,r2
    c720:	e0bffd17 	ldw	r2,-12(fp)
    c724:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c728:	e0bffd17 	ldw	r2,-12(fp)
    c72c:	10c00217 	ldw	r3,8(r2)
    c730:	d0a01b97 	ldw	r2,-32658(gp)
    c734:	1880032e 	bgeu	r3,r2,c744 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
    c738:	e0bffd17 	ldw	r2,-12(fp)
    c73c:	00c00044 	movi	r3,1
    c740:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c744:	e0bffe17 	ldw	r2,-8(fp)
    c748:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c74c:	e0fffd17 	ldw	r3,-12(fp)
    c750:	d0a00f84 	addi	r2,gp,-32706
    c754:	18bfcf1e 	bne	r3,r2,c694 <_gp+0xffff7436>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c758:	0001883a 	nop
}
    c75c:	0001883a 	nop
    c760:	e037883a 	mov	sp,fp
    c764:	dfc00117 	ldw	ra,4(sp)
    c768:	df000017 	ldw	fp,0(sp)
    c76c:	dec00204 	addi	sp,sp,8
    c770:	f800283a 	ret

0000c774 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    c774:	defffd04 	addi	sp,sp,-12
    c778:	de00012e 	bgeu	sp,et,c780 <usleep+0xc>
    c77c:	003b68fa 	trap	3
    c780:	dfc00215 	stw	ra,8(sp)
    c784:	df000115 	stw	fp,4(sp)
    c788:	df000104 	addi	fp,sp,4
    c78c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    c790:	e13fff17 	ldw	r4,-4(fp)
    c794:	000c8140 	call	c814 <alt_busy_sleep>
}
    c798:	e037883a 	mov	sp,fp
    c79c:	dfc00117 	ldw	ra,4(sp)
    c7a0:	df000017 	ldw	fp,0(sp)
    c7a4:	dec00204 	addi	sp,sp,8
    c7a8:	f800283a 	ret

0000c7ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c7ac:	defffd04 	addi	sp,sp,-12
    c7b0:	de00012e 	bgeu	sp,et,c7b8 <alt_irq_init+0xc>
    c7b4:	003b68fa 	trap	3
    c7b8:	dfc00215 	stw	ra,8(sp)
    c7bc:	df000115 	stw	fp,4(sp)
    c7c0:	df000104 	addi	fp,sp,4
    c7c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    c7c8:	000c9740 	call	c974 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c7cc:	00800044 	movi	r2,1
    c7d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c7d4:	0001883a 	nop
    c7d8:	e037883a 	mov	sp,fp
    c7dc:	dfc00117 	ldw	ra,4(sp)
    c7e0:	df000017 	ldw	fp,0(sp)
    c7e4:	dec00204 	addi	sp,sp,8
    c7e8:	f800283a 	ret

0000c7ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c7ec:	deffff04 	addi	sp,sp,-4
    c7f0:	de00012e 	bgeu	sp,et,c7f8 <alt_sys_init+0xc>
    c7f4:	003b68fa 	trap	3
    c7f8:	df000015 	stw	fp,0(sp)
    c7fc:	d839883a 	mov	fp,sp
}
    c800:	0001883a 	nop
    c804:	e037883a 	mov	sp,fp
    c808:	df000017 	ldw	fp,0(sp)
    c80c:	dec00104 	addi	sp,sp,4
    c810:	f800283a 	ret

0000c814 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    c814:	defffa04 	addi	sp,sp,-24
    c818:	de00012e 	bgeu	sp,et,c820 <alt_busy_sleep+0xc>
    c81c:	003b68fa 	trap	3
    c820:	dfc00515 	stw	ra,20(sp)
    c824:	df000415 	stw	fp,16(sp)
    c828:	df000404 	addi	fp,sp,16
    c82c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    c830:	00800244 	movi	r2,9
    c834:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    c838:	014003f4 	movhi	r5,15
    c83c:	29509004 	addi	r5,r5,16960
    c840:	e13ffd17 	ldw	r4,-12(fp)
    c844:	000a42c0 	call	a42c <__mulsi3>
    c848:	100b883a 	mov	r5,r2
    c84c:	01013174 	movhi	r4,1221
    c850:	212d0004 	addi	r4,r4,-19456
    c854:	000b9200 	call	b920 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    c858:	100b883a 	mov	r5,r2
    c85c:	01200034 	movhi	r4,32768
    c860:	213fffc4 	addi	r4,r4,-1
    c864:	000b9200 	call	b920 <__udivsi3>
    c868:	100b883a 	mov	r5,r2
    c86c:	e13fff17 	ldw	r4,-4(fp)
    c870:	000b9200 	call	b920 <__udivsi3>
    c874:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    c878:	e0bffe17 	ldw	r2,-8(fp)
    c87c:	10002a26 	beq	r2,zero,c928 <alt_busy_sleep+0x114>
  {
    for(i=0;i<big_loops;i++)
    c880:	e03ffc15 	stw	zero,-16(fp)
    c884:	00001706 	br	c8e4 <alt_busy_sleep+0xd0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c888:	00a00034 	movhi	r2,32768
    c88c:	10bfffc4 	addi	r2,r2,-1
    c890:	10bfffc4 	addi	r2,r2,-1
    c894:	103ffe1e 	bne	r2,zero,c890 <_gp+0xffff7632>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    c898:	014003f4 	movhi	r5,15
    c89c:	29509004 	addi	r5,r5,16960
    c8a0:	e13ffd17 	ldw	r4,-12(fp)
    c8a4:	000a42c0 	call	a42c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c8a8:	100b883a 	mov	r5,r2
    c8ac:	01013174 	movhi	r4,1221
    c8b0:	212d0004 	addi	r4,r4,-19456
    c8b4:	000b9200 	call	b920 <__udivsi3>
    c8b8:	100b883a 	mov	r5,r2
    c8bc:	01200034 	movhi	r4,32768
    c8c0:	213fffc4 	addi	r4,r4,-1
    c8c4:	000b9200 	call	b920 <__udivsi3>
    c8c8:	1007883a 	mov	r3,r2
    c8cc:	e0bfff17 	ldw	r2,-4(fp)
    c8d0:	10c5c83a 	sub	r2,r2,r3
    c8d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    c8d8:	e0bffc17 	ldw	r2,-16(fp)
    c8dc:	10800044 	addi	r2,r2,1
    c8e0:	e0bffc15 	stw	r2,-16(fp)
    c8e4:	e0fffc17 	ldw	r3,-16(fp)
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	18bfe616 	blt	r3,r2,c888 <_gp+0xffff762a>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    c8f0:	014003f4 	movhi	r5,15
    c8f4:	29509004 	addi	r5,r5,16960
    c8f8:	e13ffd17 	ldw	r4,-12(fp)
    c8fc:	000a42c0 	call	a42c <__mulsi3>
    c900:	100b883a 	mov	r5,r2
    c904:	01013174 	movhi	r4,1221
    c908:	212d0004 	addi	r4,r4,-19456
    c90c:	000b9200 	call	b920 <__udivsi3>
    c910:	e17fff17 	ldw	r5,-4(fp)
    c914:	1009883a 	mov	r4,r2
    c918:	000a42c0 	call	a42c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c91c:	10bfffc4 	addi	r2,r2,-1
    c920:	103ffe1e 	bne	r2,zero,c91c <_gp+0xffff76be>
    c924:	00000d06 	br	c95c <alt_busy_sleep+0x148>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    c928:	014003f4 	movhi	r5,15
    c92c:	29509004 	addi	r5,r5,16960
    c930:	e13ffd17 	ldw	r4,-12(fp)
    c934:	000a42c0 	call	a42c <__mulsi3>
    c938:	100b883a 	mov	r5,r2
    c93c:	01013174 	movhi	r4,1221
    c940:	212d0004 	addi	r4,r4,-19456
    c944:	000b9200 	call	b920 <__udivsi3>
    c948:	e17fff17 	ldw	r5,-4(fp)
    c94c:	1009883a 	mov	r4,r2
    c950:	000a42c0 	call	a42c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c954:	10bfffc4 	addi	r2,r2,-1
    c958:	00bffe16 	blt	zero,r2,c954 <_gp+0xffff76f6>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    c95c:	0005883a 	mov	r2,zero
}
    c960:	e037883a 	mov	sp,fp
    c964:	dfc00117 	ldw	ra,4(sp)
    c968:	df000017 	ldw	fp,0(sp)
    c96c:	dec00204 	addi	sp,sp,8
    c970:	f800283a 	ret

0000c974 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c974:	deffff04 	addi	sp,sp,-4
    c978:	de00012e 	bgeu	sp,et,c980 <altera_nios2_gen2_irq_init+0xc>
    c97c:	003b68fa 	trap	3
    c980:	df000015 	stw	fp,0(sp)
    c984:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c988:	000170fa 	wrctl	ienable,zero
}
    c98c:	0001883a 	nop
    c990:	e037883a 	mov	sp,fp
    c994:	df000017 	ldw	fp,0(sp)
    c998:	dec00104 	addi	sp,sp,4
    c99c:	f800283a 	ret

0000c9a0 <strlen>:
    c9a0:	2005883a 	mov	r2,r4
    c9a4:	10c00007 	ldb	r3,0(r2)
    c9a8:	18000226 	beq	r3,zero,c9b4 <strlen+0x14>
    c9ac:	10800044 	addi	r2,r2,1
    c9b0:	003ffc06 	br	c9a4 <_gp+0xffff7746>
    c9b4:	1105c83a 	sub	r2,r2,r4
    c9b8:	f800283a 	ret

0000c9bc <strncpy>:
    c9bc:	2005883a 	mov	r2,r4
    c9c0:	200f883a 	mov	r7,r4
    c9c4:	30000c26 	beq	r6,zero,c9f8 <strncpy+0x3c>
    c9c8:	2a000003 	ldbu	r8,0(r5)
    c9cc:	38c00044 	addi	r3,r7,1
    c9d0:	31bfffc4 	addi	r6,r6,-1
    c9d4:	3a000005 	stb	r8,0(r7)
    c9d8:	42003fcc 	andi	r8,r8,255
    c9dc:	4200201c 	xori	r8,r8,128
    c9e0:	423fe004 	addi	r8,r8,-128
    c9e4:	29400044 	addi	r5,r5,1
    c9e8:	180f883a 	mov	r7,r3
    c9ec:	403ff51e 	bne	r8,zero,c9c4 <_gp+0xffff7766>
    c9f0:	198d883a 	add	r6,r3,r6
    c9f4:	00000106 	br	c9fc <strncpy+0x40>
    c9f8:	f800283a 	ret
    c9fc:	30c00326 	beq	r6,r3,ca0c <strncpy+0x50>
    ca00:	18000005 	stb	zero,0(r3)
    ca04:	18c00044 	addi	r3,r3,1
    ca08:	003ffc06 	br	c9fc <_gp+0xffff779e>
    ca0c:	f800283a 	ret
